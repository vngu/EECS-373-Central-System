
Central System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f460  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6e4  0800f6e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6e4  0800f6e4  0001f6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6ec  0800f6ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6ec  0800f6ec  0001f6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6f0  0800f6f0  0001f6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f7c8  20000078  0800f76c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f840  0800f76c  0002f840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011717  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d7  00000000  00000000  000317bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00033b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029854  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f049  00000000  00000000  0005d614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fdfd2  00000000  00000000  0006c65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0016a62f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000036a8  00000000  00000000  0016a680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000068  00000000  00000000  0016dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000078 	.word	0x20000078
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800f604 	.word	0x0800f604

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	0800f604 	.word	0x0800f604

080001fc <graphicsDisplayInit>:
      HX8357_SLPOUT, 0x80 + 150/5, // Exit Sleep, then delay 150 ms
      HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
      0,                           // END OF COMMAND LIST
    };

void graphicsDisplayInit(SPI_HandleTypeDef *hspi) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	uint8_t cmd, x, numArgs;

	uint8_t* addr = initd;
 8000204:	4b23      	ldr	r3, [pc, #140]	; (8000294 <graphicsDisplayInit+0x98>)
 8000206:	60fb      	str	r3, [r7, #12]

	while((cmd = *(addr++)) > 0) {
 8000208:	e037      	b.n	800027a <graphicsDisplayInit+0x7e>
	  if(cmd != 0xFF) {
 800020a:	7a7b      	ldrb	r3, [r7, #9]
 800020c:	2bff      	cmp	r3, #255	; 0xff
 800020e:	d00d      	beq.n	800022c <graphicsDisplayInit+0x30>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000216:	4820      	ldr	r0, [pc, #128]	; (8000298 <graphicsDisplayInit+0x9c>)
 8000218:	f002 ff2e 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(hspi, &cmd, 1, 1000);       // '255' is ignored
 800021c:	f107 0109 	add.w	r1, r7, #9
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	2201      	movs	r2, #1
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f007 fd03 	bl	8007c32 <HAL_SPI_Transmit>
	  }
	  x = *(addr++);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	1c5a      	adds	r2, r3, #1
 8000230:	60fa      	str	r2, [r7, #12]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	72fb      	strb	r3, [r7, #11]
	  numArgs = x & 0x7F;
 8000236:	7afb      	ldrb	r3, [r7, #11]
 8000238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800023c:	72bb      	strb	r3, [r7, #10]
	  if(x & 0x80) {        // If high bit set...
 800023e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000242:	2b00      	cmp	r3, #0
 8000244:	da07      	bge.n	8000256 <graphicsDisplayInit+0x5a>
		HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000246:	7aba      	ldrb	r2, [r7, #10]
 8000248:	4613      	mov	r3, r2
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	4413      	add	r3, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fa0c 	bl	800166c <HAL_Delay>
 8000254:	e011      	b.n	800027a <graphicsDisplayInit+0x7e>
	  } else {              // Otherwise, issue args to command...
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025c:	480e      	ldr	r0, [pc, #56]	; (8000298 <graphicsDisplayInit+0x9c>)
 800025e:	f002 ff0b 	bl	8003078 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi,addr,numArgs, 1000);
 8000262:	7abb      	ldrb	r3, [r7, #10]
 8000264:	b29a      	uxth	r2, r3
 8000266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026a:	68f9      	ldr	r1, [r7, #12]
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f007 fce0 	bl	8007c32 <HAL_SPI_Transmit>
		addr+=numArgs;
 8000272:	7abb      	ldrb	r3, [r7, #10]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	4413      	add	r3, r2
 8000278:	60fb      	str	r3, [r7, #12]
	while((cmd = *(addr++)) > 0) {
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	60fa      	str	r2, [r7, #12]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	727b      	strb	r3, [r7, #9]
 8000284:	7a7b      	ldrb	r3, [r7, #9]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d1bf      	bne.n	800020a <graphicsDisplayInit+0xe>
	  }
	}
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	48000c00 	.word	0x48000c00

0800029c <writeCommand>:

void writeCommand(SPI_HandleTypeDef *hspi, uint8_t cmd){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	480a      	ldr	r0, [pc, #40]	; (80002d8 <writeCommand+0x3c>)
 80002b0:	f002 fee2 	bl	8003078 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 80002b4:	1cf9      	adds	r1, r7, #3
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	2201      	movs	r2, #1
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f007 fcb8 	bl	8007c32 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <writeCommand+0x3c>)
 80002ca:	f002 fed5 	bl	8003078 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000c00 	.word	0x48000c00

080002dc <SPI_write16>:

void SPI_write16(SPI_HandleTypeDef *hspi, uint16_t num) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	460b      	mov	r3, r1
 80002e6:	807b      	strh	r3, [r7, #2]
	uint8_t upper = (uint8_t)((num&0xFF00) >> 8);
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	0a1b      	lsrs	r3, r3, #8
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = (uint8_t)(num & 0xFF);
 80002f0:	887b      	ldrh	r3, [r7, #2]
 80002f2:	73bb      	strb	r3, [r7, #14]
	uint8_t buf[2] = {upper, lower};
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	733b      	strb	r3, [r7, #12]
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
 80002fa:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(hspi, buf, 2, 1000);
 80002fc:	f107 010c 	add.w	r1, r7, #12
 8000300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000304:	2202      	movs	r2, #2
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f007 fc93 	bl	8007c32 <HAL_SPI_Transmit>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <setAddrWindow>:

void setAddrWindow(SPI_HandleTypeDef *hspi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	4608      	mov	r0, r1
 800031e:	4611      	mov	r1, r2
 8000320:	461a      	mov	r2, r3
 8000322:	4603      	mov	r3, r0
 8000324:	817b      	strh	r3, [r7, #10]
 8000326:	460b      	mov	r3, r1
 8000328:	813b      	strh	r3, [r7, #8]
 800032a:	4613      	mov	r3, r2
 800032c:	80fb      	strh	r3, [r7, #6]
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800032e:	897a      	ldrh	r2, [r7, #10]
 8000330:	88fb      	ldrh	r3, [r7, #6]
 8000332:	4413      	add	r3, r2
 8000334:	b29b      	uxth	r3, r3
 8000336:	3b01      	subs	r3, #1
 8000338:	82fb      	strh	r3, [r7, #22]
 800033a:	893a      	ldrh	r2, [r7, #8]
 800033c:	8c3b      	ldrh	r3, [r7, #32]
 800033e:	4413      	add	r3, r2
 8000340:	b29b      	uxth	r3, r3
 8000342:	3b01      	subs	r3, #1
 8000344:	82bb      	strh	r3, [r7, #20]
  writeCommand(hspi,HX8357_CASET);
 8000346:	212a      	movs	r1, #42	; 0x2a
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f7ff ffa7 	bl	800029c <writeCommand>
  SPI_write16(hspi,x1);
 800034e:	897b      	ldrh	r3, [r7, #10]
 8000350:	4619      	mov	r1, r3
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	f7ff ffc2 	bl	80002dc <SPI_write16>
  SPI_write16(hspi,x2);
 8000358:	8afb      	ldrh	r3, [r7, #22]
 800035a:	4619      	mov	r1, r3
 800035c:	68f8      	ldr	r0, [r7, #12]
 800035e:	f7ff ffbd 	bl	80002dc <SPI_write16>
  writeCommand(hspi,HX8357_PASET);
 8000362:	212b      	movs	r1, #43	; 0x2b
 8000364:	68f8      	ldr	r0, [r7, #12]
 8000366:	f7ff ff99 	bl	800029c <writeCommand>
  SPI_write16(hspi,y1);
 800036a:	893b      	ldrh	r3, [r7, #8]
 800036c:	4619      	mov	r1, r3
 800036e:	68f8      	ldr	r0, [r7, #12]
 8000370:	f7ff ffb4 	bl	80002dc <SPI_write16>
  SPI_write16(hspi,y2);
 8000374:	8abb      	ldrh	r3, [r7, #20]
 8000376:	4619      	mov	r1, r3
 8000378:	68f8      	ldr	r0, [r7, #12]
 800037a:	f7ff ffaf 	bl	80002dc <SPI_write16>
  writeCommand(hspi,HX8357_RAMWR);
 800037e:	212c      	movs	r1, #44	; 0x2c
 8000380:	68f8      	ldr	r0, [r7, #12]
 8000382:	f7ff ff8b 	bl	800029c <writeCommand>
}
 8000386:	bf00      	nop
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <writeInplace>:

void writeInplace(SPI_HandleTypeDef *hspi, uint16_t color) {
 800038e:	b580      	push	{r7, lr}
 8000390:	b084      	sub	sp, #16
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	807b      	strh	r3, [r7, #2]
  uint8_t lower = color & 0xFF;
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	73fb      	strb	r3, [r7, #15]
  uint8_t upper = (color & 0xFF00) >> 8;
 800039e:	887b      	ldrh	r3, [r7, #2]
 80003a0:	0a1b      	lsrs	r3, r3, #8
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	73bb      	strb	r3, [r7, #14]
  uint8_t buf[2] = {upper, lower}; // TODO Might be other way around
 80003a6:	7bbb      	ldrb	r3, [r7, #14]
 80003a8:	733b      	strb	r3, [r7, #12]
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(hspi, buf, 2, 1000);
 80003ae:	f107 010c 	add.w	r1, r7, #12
 80003b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b6:	2202      	movs	r2, #2
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f007 fc3a 	bl	8007c32 <HAL_SPI_Transmit>
}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <writePixel>:

void writePixel(SPI_HandleTypeDef *hspi, int16_t x, int16_t y, uint16_t color) {
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b086      	sub	sp, #24
 80003ca:	af02      	add	r7, sp, #8
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	4608      	mov	r0, r1
 80003d0:	4611      	mov	r1, r2
 80003d2:	461a      	mov	r2, r3
 80003d4:	4603      	mov	r3, r0
 80003d6:	817b      	strh	r3, [r7, #10]
 80003d8:	460b      	mov	r3, r1
 80003da:	813b      	strh	r3, [r7, #8]
 80003dc:	4613      	mov	r3, r2
 80003de:	80fb      	strh	r3, [r7, #6]
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80003e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db1d      	blt.n	8000424 <writePixel+0x5e>
 80003e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80003f0:	4293      	cmp	r3, r2
 80003f2:	da17      	bge.n	8000424 <writePixel+0x5e>
 80003f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db13      	blt.n	8000424 <writePixel+0x5e>
 80003fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000400:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000404:	4293      	cmp	r3, r2
 8000406:	da0d      	bge.n	8000424 <writePixel+0x5e>
	setAddrWindow(hspi,x,y,1,1);
 8000408:	8979      	ldrh	r1, [r7, #10]
 800040a:	893a      	ldrh	r2, [r7, #8]
 800040c:	2301      	movs	r3, #1
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2301      	movs	r3, #1
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff7e 	bl	8000314 <setAddrWindow>
	writeInplace(hspi,color);
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	4619      	mov	r1, r3
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f7ff ffb6 	bl	800038e <writeInplace>
 8000422:	e000      	b.n	8000426 <writePixel+0x60>
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8000424:	bf00      	nop
}
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <printPicture>:

void printPicture(SPI_HandleTypeDef *hspi) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < IMAGE_WIDTH; i ++) {
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e039      	b.n	80004ae <printPicture+0x82>
	  for(int j = 0; j < IMAGE_HEIGHT; j++) {
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	e030      	b.n	80004a2 <printPicture+0x76>
		uint8_t* pix_start = picture + i*IMAGE_HEIGHT*3 + j*3;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000446:	fb02 f303 	mul.w	r3, r2, r3
 800044a:	4619      	mov	r1, r3
 800044c:	693a      	ldr	r2, [r7, #16]
 800044e:	4613      	mov	r3, r2
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	4413      	add	r3, r2
 8000454:	440b      	add	r3, r1
 8000456:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <printPicture+0x94>)
 8000458:	4413      	add	r3, r2
 800045a:	60fb      	str	r3, [r7, #12]
		uint16_t color =
				((*(pix_start) >> 3) << 11) |
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	02db      	lsls	r3, r3, #11
 8000466:	b21a      	sxth	r2, r3
				((*(pix_start + 1) >> 2) << 5) |
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	089b      	lsrs	r3, r3, #2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	015b      	lsls	r3, r3, #5
				((*(pix_start) >> 3) << 11) |
 8000474:	b21b      	sxth	r3, r3
 8000476:	4313      	orrs	r3, r2
 8000478:	b21a      	sxth	r2, r3
				((*(pix_start + 2) >> 3) << 0);
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3302      	adds	r3, #2
 800047e:	781b      	ldrb	r3, [r3, #0]
				((*(pix_start + 1) >> 2) << 5) |
 8000480:	08db      	lsrs	r3, r3, #3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	b21b      	sxth	r3, r3
 8000486:	4313      	orrs	r3, r2
 8000488:	b21b      	sxth	r3, r3
		uint16_t color =
 800048a:	817b      	strh	r3, [r7, #10]
		writePixel(hspi,i,j,color);
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	b219      	sxth	r1, r3
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	b21a      	sxth	r2, r3
 8000494:	897b      	ldrh	r3, [r7, #10]
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ff95 	bl	80003c6 <writePixel>
	  for(int j = 0; j < IMAGE_HEIGHT; j++) {
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	3301      	adds	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	2b95      	cmp	r3, #149	; 0x95
 80004a6:	ddcb      	ble.n	8000440 <printPicture+0x14>
	for(int i = 0; i < IMAGE_WIDTH; i ++) {
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	3301      	adds	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	2b8b      	cmp	r3, #139	; 0x8b
 80004b2:	ddc2      	ble.n	800043a <printPicture+0xe>
	  }
	}
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000094 	.word	0x20000094

080004c4 <resetDistributedPP>:

void resetDistributedPP() {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	dis_row = 0;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <resetDistributedPP+0x14>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	801a      	strh	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	2000f6ac 	.word	0x2000f6ac

080004dc <distributedPrintPicture>:

void distributedPrintPicture(SPI_HandleTypeDef *hspi) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(dis_row == IMAGE_WIDTH) return;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <distributedPrintPicture+0x9c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b8c      	cmp	r3, #140	; 0x8c
 80004ea:	d040      	beq.n	800056e <distributedPrintPicture+0x92>
	for(int i = 0; i < IMAGE_HEIGHT; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e033      	b.n	800055a <distributedPrintPicture+0x7e>
		uint8_t* pix_start = picture + dis_row*IMAGE_HEIGHT*3 + i*3;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <distributedPrintPicture+0x9c>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	4619      	mov	r1, r3
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	4613      	mov	r3, r2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	4413      	add	r3, r2
 800050a:	440b      	add	r3, r1
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <distributedPrintPicture+0xa0>)
 800050e:	4413      	add	r3, r2
 8000510:	613b      	str	r3, [r7, #16]
		uint16_t color =
				((*(pix_start) >> 3) << 11) |
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	02db      	lsls	r3, r3, #11
 800051c:	b21a      	sxth	r2, r3
				((*(pix_start + 1) >> 2) << 5) |
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	3301      	adds	r3, #1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	b2db      	uxtb	r3, r3
 8000528:	015b      	lsls	r3, r3, #5
				((*(pix_start) >> 3) << 11) |
 800052a:	b21b      	sxth	r3, r3
 800052c:	4313      	orrs	r3, r2
 800052e:	b21a      	sxth	r2, r3
				((*(pix_start + 2) >> 3) << 0);
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3302      	adds	r3, #2
 8000534:	781b      	ldrb	r3, [r3, #0]
				((*(pix_start + 1) >> 2) << 5) |
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	b2db      	uxtb	r3, r3
 800053a:	b21b      	sxth	r3, r3
 800053c:	4313      	orrs	r3, r2
 800053e:	b21b      	sxth	r3, r3
		uint16_t color =
 8000540:	81fb      	strh	r3, [r7, #14]
		writePixel(hspi, dis_row, i, color);
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <distributedPrintPicture+0x9c>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b219      	sxth	r1, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	b21a      	sxth	r2, r3
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff ff39 	bl	80003c6 <writePixel>
	for(int i = 0; i < IMAGE_HEIGHT; i++) {
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b95      	cmp	r3, #149	; 0x95
 800055e:	ddc8      	ble.n	80004f2 <distributedPrintPicture+0x16>
	}
	dis_row++;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <distributedPrintPicture+0x9c>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <distributedPrintPicture+0x9c>)
 800056a:	801a      	strh	r2, [r3, #0]
 800056c:	e000      	b.n	8000570 <distributedPrintPicture+0x94>
	if(dis_row == IMAGE_WIDTH) return;
 800056e:	bf00      	nop
}
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000f6ac 	.word	0x2000f6ac
 800057c:	20000094 	.word	0x20000094

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 ff7c 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82c 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f946 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f8ac 	bl	80006ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000594:	f000 f8f6 	bl	8000784 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000598:	f000 f86a 	bl	8000670 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  graphicsDisplayInit(&hspi1);
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <main+0x50>)
 800059e:	f7ff fe2d 	bl	80001fc <graphicsDisplayInit>
  //HAL_UART_Receive_DMA(&huart3, picture, IMAGE_BYTES);
  // Should fill picture array in nonblocking way
  // Drawing Picture is currently blocking
  HAL_UART_Receive_IT (&huart2, buf, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	490b      	ldr	r1, [pc, #44]	; (80005d4 <main+0x54>)
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x58>)
 80005a8:	f00a fcae 	bl	800af08 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (&huart3, picture, IMAGE_BYTES);
 80005ac:	f24f 6218 	movw	r2, #63000	; 0xf618
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <main+0x5c>)
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x60>)
 80005b4:	f00a fca8 	bl	800af08 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Keypad
	if(keypad() == 1) {
 80005b8:	f000 fb9e 	bl	8000cf8 <keypad>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d102      	bne.n	80005c8 <main+0x48>
		toggleArmed(&huart3);
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x60>)
 80005c4:	f000 fc9c 	bl	8000f00 <toggleArmed>
	}
	distributedPrintPicture(&hspi1);
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <main+0x50>)
 80005ca:	f7ff ff87 	bl	80004dc <distributedPrintPicture>
	if(keypad() == 1) {
 80005ce:	e7f3      	b.n	80005b8 <main+0x38>
 80005d0:	2000f6b0 	.word	0x2000f6b0
 80005d4:	2000f838 	.word	0x2000f838
 80005d8:	2000f714 	.word	0x2000f714
 80005dc:	20000094 	.word	0x20000094
 80005e0:	2000f7a4 	.word	0x2000f7a4

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00e fffe 	bl	800f5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060a:	f002 ff6d 	bl	80034e8 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 fcc6 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000618:	2310      	movs	r3, #16
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f003 ff2f 	bl	8004494 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800063c:	f000 fcb2 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fb41 	bl	8004ce0 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000664:	f000 fc9e 	bl	8000fa4 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_SPI1_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <MX_SPI1_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_SPI1_Init+0x74>)
 800067c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_SPI1_Init+0x74>)
 800068a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800068e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_SPI1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_SPI1_Init+0x74>)
 800069e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006be:	2207      	movs	r2, #7
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_SPI1_Init+0x74>)
 80006d0:	f007 f9d0 	bl	8007a74 <HAL_SPI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 fc63 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000f6b0 	.word	0x2000f6b0
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_USART2_UART_Init+0x90>)
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_USART2_UART_Init+0x94>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_USART2_UART_Init+0x90>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_USART2_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_USART2_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART2_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000736:	f009 ffff 	bl	800a738 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 fc30 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_USART2_UART_Init+0x90>)
 8000748:	f00e fad4 	bl	800ecf4 <HAL_UARTEx_SetTxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000752:	f000 fc27 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x90>)
 800075a:	f00e fb09 	bl	800ed70 <HAL_UARTEx_SetRxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 fc1e 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_USART2_UART_Init+0x90>)
 800076a:	f00e fa4f 	bl	800ec0c <HAL_UARTEx_EnableFifoMode>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 fc16 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000f714 	.word	0x2000f714
 8000780:	40004400 	.word	0x40004400

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_USART3_UART_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_USART3_UART_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_USART3_UART_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007ce:	f009 ffb3 	bl	800a738 <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 fbe4 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007e0:	f00e fa88 	bl	800ecf4 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 fbdb 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_USART3_UART_Init+0x90>)
 80007f2:	f00e fabd 	bl	800ed70 <HAL_UARTEx_SetRxFifoThreshold>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 fbd2 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_USART3_UART_Init+0x90>)
 8000802:	f00e fa03 	bl	800ec0c <HAL_UARTEx_EnableFifoMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 fbca 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000f7a4 	.word	0x2000f7a4
 8000818:	40004800 	.word	0x40004800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	4bb3      	ldr	r3, [pc, #716]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4ab2      	ldr	r2, [pc, #712]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4bb0      	ldr	r3, [pc, #704]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	623b      	str	r3, [r7, #32]
 8000848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4bad      	ldr	r3, [pc, #692]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4aac      	ldr	r2, [pc, #688]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4baa      	ldr	r3, [pc, #680]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000862:	4ba7      	ldr	r3, [pc, #668]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4aa6      	ldr	r2, [pc, #664]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4ba4      	ldr	r3, [pc, #656]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4ba1      	ldr	r3, [pc, #644]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4aa0      	ldr	r2, [pc, #640]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b9b      	ldr	r3, [pc, #620]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a9a      	ldr	r2, [pc, #616]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b98      	ldr	r3, [pc, #608]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b95      	ldr	r3, [pc, #596]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b92      	ldr	r3, [pc, #584]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b8f      	ldr	r3, [pc, #572]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a8e      	ldr	r2, [pc, #568]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b8c      	ldr	r3, [pc, #560]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b89      	ldr	r3, [pc, #548]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a88      	ldr	r2, [pc, #544]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b86      	ldr	r3, [pc, #536]	; (8000b00 <MX_GPIO_Init+0x2e4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008f2:	f002 fee7 	bl	80036c4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_LINE2_Pin|OUT_LINE3_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2128      	movs	r1, #40	; 0x28
 80008fa:	4882      	ldr	r0, [pc, #520]	; (8000b04 <MX_GPIO_Init+0x2e8>)
 80008fc:	f002 fbbc 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|OUT_LINE1_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f244 0104 	movw	r1, #16388	; 0x4004
 8000906:	4880      	ldr	r0, [pc, #512]	; (8000b08 <MX_GPIO_Init+0x2ec>)
 8000908:	f002 fbb6 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LINE0_GPIO_Port, OUT_LINE0_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	487e      	ldr	r0, [pc, #504]	; (8000b0c <MX_GPIO_Init+0x2f0>)
 8000914:	f002 fbb0 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	487c      	ldr	r0, [pc, #496]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 800091e:	f002 fbab 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000922:	230c      	movs	r3, #12
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000932:	230d      	movs	r3, #13
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4875      	ldr	r0, [pc, #468]	; (8000b14 <MX_GPIO_Init+0x2f8>)
 800093e:	f002 f8ff 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	2312      	movs	r3, #18
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000952:	2304      	movs	r3, #4
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4869      	ldr	r0, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x2e8>)
 800095e:	f002 f8ef 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LINE2_Pin OUT_LINE3_Pin */
  GPIO_InitStruct.Pin = OUT_LINE2_Pin|OUT_LINE3_Pin;
 8000962:	2328      	movs	r3, #40	; 0x28
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4862      	ldr	r0, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x2e8>)
 800097a:	f002 f8e1 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800098e:	230d      	movs	r3, #13
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	485a      	ldr	r0, [pc, #360]	; (8000b04 <MX_GPIO_Init+0x2e8>)
 800099a:	f002 f8d1 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800099e:	233f      	movs	r3, #63	; 0x3f
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4856      	ldr	r0, [pc, #344]	; (8000b0c <MX_GPIO_Init+0x2f0>)
 80009b2:	f002 f8c5 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009c6:	2301      	movs	r3, #1
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f002 f8b4 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80009d8:	230a      	movs	r3, #10
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009dc:	230b      	movs	r3, #11
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f002 f8a7 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a02:	2302      	movs	r3, #2
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4840      	ldr	r0, [pc, #256]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000a0e:	f002 f897 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a12:	2302      	movs	r3, #2
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a16:	230b      	movs	r3, #11
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	483a      	ldr	r0, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000a26:	f002 f88b 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a2a:	2344      	movs	r3, #68	; 0x44
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4834      	ldr	r0, [pc, #208]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000a3e:	f002 f87f 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a42:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482d      	ldr	r0, [pc, #180]	; (8000b14 <MX_GPIO_Init+0x2f8>)
 8000a60:	f002 f86e 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000a76:	2303      	movs	r3, #3
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4824      	ldr	r0, [pc, #144]	; (8000b14 <MX_GPIO_Init+0x2f8>)
 8000a82:	f002 f85d 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000aa4:	f002 f84c 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000aa8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000aba:	230d      	movs	r3, #13
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000ac6:	f002 f83b 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000adc:	230e      	movs	r3, #14
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <MX_GPIO_Init+0x2f4>)
 8000ae8:	f002 f82a 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e00c      	b.n	8000b18 <MX_GPIO_Init+0x2fc>
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48001400 	.word	0x48001400
 8000b08:	48000c00 	.word	0x48000c00
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48001000 	.word	0x48001000
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4870      	ldr	r0, [pc, #448]	; (8000ce4 <MX_GPIO_Init+0x4c8>)
 8000b22:	f002 f80d 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4868      	ldr	r0, [pc, #416]	; (8000ce4 <MX_GPIO_Init+0x4c8>)
 8000b44:	f001 fffc 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4860      	ldr	r0, [pc, #384]	; (8000ce8 <MX_GPIO_Init+0x4cc>)
 8000b66:	f001 ffeb 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b7a:	230d      	movs	r3, #13
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4859      	ldr	r0, [pc, #356]	; (8000cec <MX_GPIO_Init+0x4d0>)
 8000b86:	f001 ffdb 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4851      	ldr	r0, [pc, #324]	; (8000cec <MX_GPIO_Init+0x4d0>)
 8000ba6:	f001 ffcb 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_LINE0_Pin IN_LINE1_Pin IN_LINE2_Pin IN_LINE3_Pin */
  GPIO_InitStruct.Pin = IN_LINE0_Pin|IN_LINE1_Pin|IN_LINE2_Pin|IN_LINE3_Pin;
 8000baa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	484b      	ldr	r0, [pc, #300]	; (8000cec <MX_GPIO_Init+0x4d0>)
 8000bc0:	f001 ffbe 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000bc4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f001 ffac 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f001 ff9e 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LINE0_Pin */
  GPIO_InitStruct.Pin = OUT_LINE0_Pin;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LINE0_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4833      	ldr	r0, [pc, #204]	; (8000cec <MX_GPIO_Init+0x4d0>)
 8000c1e:	f001 ff8f 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c22:	2301      	movs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c32:	2309      	movs	r3, #9
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4829      	ldr	r0, [pc, #164]	; (8000ce4 <MX_GPIO_Init+0x4c8>)
 8000c3e:	f001 ff7f 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LINE1_Pin */
  GPIO_InitStruct.Pin = OUT_LINE1_Pin;
 8000c42:	2304      	movs	r3, #4
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LINE1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0x4c8>)
 8000c5a:	f001 ff71 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c5e:	2338      	movs	r3, #56	; 0x38
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x4d4>)
 8000c7a:	f001 ff61 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <MX_GPIO_Init+0x4d4>)
 8000c96:	f001 ff53 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_GPIO_Init+0x4d4>)
 8000cb8:	f001 ff42 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_GPIO_Init+0x4d8>)
 8000cd8:	f001 ff32 	bl	8002b40 <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3738      	adds	r7, #56	; 0x38
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	48000c00 	.word	0x48000c00
 8000ce8:	48001800 	.word	0x48001800
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48001000 	.word	0x48001000

08000cf8 <keypad>:

/* USER CODE BEGIN 4 */
uint8_t keypad(void) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b097      	sub	sp, #92	; 0x5c
 8000cfc:	af00      	add	r7, sp, #0
  // Constants

  const GPIO_TypeDef* input_ports[] = { IN_LINE0_GPIO_Port, IN_LINE1_GPIO_Port, IN_LINE2_GPIO_Port, IN_LINE3_GPIO_Port};
 8000cfe:	4b77      	ldr	r3, [pc, #476]	; (8000edc <keypad+0x1e4>)
 8000d00:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint32_t input_pins[] = { IN_LINE0_Pin, IN_LINE1_Pin, IN_LINE2_Pin, IN_LINE3_Pin};
 8000d0a:	4b75      	ldr	r3, [pc, #468]	; (8000ee0 <keypad+0x1e8>)
 8000d0c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const GPIO_TypeDef* output_ports[] = {OUT_LINE0_GPIO_Port, OUT_LINE1_GPIO_Port, OUT_LINE2_GPIO_Port, OUT_LINE3_GPIO_Port};
 8000d16:	4b73      	ldr	r3, [pc, #460]	; (8000ee4 <keypad+0x1ec>)
 8000d18:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint32_t output_pins[] = {OUT_LINE0_Pin, OUT_LINE1_Pin, OUT_LINE2_Pin, OUT_LINE3_Pin};
 8000d22:	4b71      	ldr	r3, [pc, #452]	; (8000ee8 <keypad+0x1f0>)
 8000d24:	f107 0414 	add.w	r4, r7, #20
 8000d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const char keypad[4][4] = {{'1','2','3','A'}, {'4', '5', '6', 'B'}, {'7','8','9','C'}, {'*', '0', '#', 'D'}};
 8000d2e:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <keypad+0x1f4>)
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  static uint8_t password_correct = 0;

  // Output pins shall correspond to rows
  // Input pins shall correspond to cols

  for(uint8_t i = 0; i < 4; i++) { // Iterates through rows
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000d3e:	e0c3      	b.n	8000ec8 <keypad+0x1d0>
    HAL_GPIO_WritePin(output_ports[i], output_pins[i], GPIO_PIN_SET);
 8000d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	3358      	adds	r3, #88	; 0x58
 8000d48:	443b      	add	r3, r7
 8000d4a:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	3358      	adds	r3, #88	; 0x58
 8000d56:	443b      	add	r3, r7
 8000d58:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	f002 f989 	bl	8003078 <HAL_GPIO_WritePin>

	for(uint8_t j = 0; j < 4; j++) { // Iterates through cols
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000d6c:	e075      	b.n	8000e5a <keypad+0x162>
		GPIO_PinState pin_state = HAL_GPIO_ReadPin(input_ports[j], input_pins[j]);
 8000d6e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	3358      	adds	r3, #88	; 0x58
 8000d76:	443b      	add	r3, r7
 8000d78:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000d7c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	3358      	adds	r3, #88	; 0x58
 8000d84:	443b      	add	r3, r7
 8000d86:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f002 f95a 	bl	8003048 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		if(pin_state == GPIO_PIN_SET)
 8000d9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d156      	bne.n	8000e50 <keypad+0x158>
		{
			// Wait for button to be let go
			while(pin_state == GPIO_PIN_SET){
 8000da2:	e01a      	b.n	8000dda <keypad+0xe2>
				pin_state = HAL_GPIO_ReadPin(input_ports[j], input_pins[j]);
 8000da4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	3358      	adds	r3, #88	; 0x58
 8000dac:	443b      	add	r3, r7
 8000dae:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000db2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	3358      	adds	r3, #88	; 0x58
 8000dba:	443b      	add	r3, r7
 8000dbc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f002 f93f 	bl	8003048 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				// Flash Blue LED
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	4846      	ldr	r0, [pc, #280]	; (8000ef0 <keypad+0x1f8>)
 8000dd6:	f002 f94f 	bl	8003078 <HAL_GPIO_WritePin>
			while(pin_state == GPIO_PIN_SET){
 8000dda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d0e0      	beq.n	8000da4 <keypad+0xac>
			}
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4842      	ldr	r0, [pc, #264]	; (8000ef0 <keypad+0x1f8>)
 8000de8:	f002 f946 	bl	8003078 <HAL_GPIO_WritePin>
			// Verify Input
			if(password[password_correct] == keypad[i][j])
 8000dec:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <keypad+0x1fc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a41      	ldr	r2, [pc, #260]	; (8000ef8 <keypad+0x200>)
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8000dfc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000e00:	0089      	lsls	r1, r1, #2
 8000e02:	3158      	adds	r1, #88	; 0x58
 8000e04:	4439      	add	r1, r7
 8000e06:	440b      	add	r3, r1
 8000e08:	3b54      	subs	r3, #84	; 0x54
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d106      	bne.n	8000e1e <keypad+0x126>
			{
				++password_correct;
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <keypad+0x200>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <keypad+0x200>)
 8000e1a:	701a      	strb	r2, [r3, #0]
				if(password[0] == keypad[i][j]){
					password_correct++;
				}

			}
			break;
 8000e1c:	e022      	b.n	8000e64 <keypad+0x16c>
				password_correct = 0;
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <keypad+0x200>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
				if(password[0] == keypad[i][j]){
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <keypad+0x1fc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8000e2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000e32:	0089      	lsls	r1, r1, #2
 8000e34:	3158      	adds	r1, #88	; 0x58
 8000e36:	4439      	add	r1, r7
 8000e38:	440b      	add	r3, r1
 8000e3a:	3b54      	subs	r3, #84	; 0x54
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d110      	bne.n	8000e64 <keypad+0x16c>
					password_correct++;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <keypad+0x200>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <keypad+0x200>)
 8000e4c:	701a      	strb	r2, [r3, #0]
			break;
 8000e4e:	e009      	b.n	8000e64 <keypad+0x16c>
	for(uint8_t j = 0; j < 4; j++) { // Iterates through cols
 8000e50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000e54:	3301      	adds	r3, #1
 8000e56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000e5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d985      	bls.n	8000d6e <keypad+0x76>
 8000e62:	e000      	b.n	8000e66 <keypad+0x16e>
			break;
 8000e64:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(output_ports[i], output_pins[i], GPIO_PIN_RESET);
 8000e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	3358      	adds	r3, #88	; 0x58
 8000e6e:	443b      	add	r3, r7
 8000e70:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3358      	adds	r3, #88	; 0x58
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	f002 f8f6 	bl	8003078 <HAL_GPIO_WritePin>

	// When password is entered
	if(password_correct == password_length) {
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <keypad+0x200>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <keypad+0x204>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d112      	bne.n	8000ebe <keypad+0x1c6>
		// Flash Blue LED
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <keypad+0x1f8>)
 8000e9e:	f002 f8eb 	bl	8003078 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000ea2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ea6:	f000 fbe1 	bl	800166c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <keypad+0x1f8>)
 8000eb0:	f002 f8e2 	bl	8003078 <HAL_GPIO_WritePin>
		password_correct = 0;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <keypad+0x200>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		// Return signal
		return 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00a      	b.n	8000ed4 <keypad+0x1dc>
  for(uint8_t i = 0; i < 4; i++) { // Iterates through rows
 8000ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f67f af37 	bls.w	8000d40 <keypad+0x48>
	}
  }
  // Correct Password Not yet detected
  return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	375c      	adds	r7, #92	; 0x5c
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	0800f61c 	.word	0x0800f61c
 8000ee0:	0800f62c 	.word	0x0800f62c
 8000ee4:	0800f63c 	.word	0x0800f63c
 8000ee8:	0800f64c 	.word	0x0800f64c
 8000eec:	0800f65c 	.word	0x0800f65c
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	20000068 	.word	0x20000068
 8000ef8:	2000f83b 	.word	0x2000f83b
 8000efc:	0800f671 	.word	0x0800f671

08000f00 <toggleArmed>:

void toggleArmed(UART_HandleTypeDef *huart) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t buf[1] = {0};
 8000f08:	2300      	movs	r3, #0
 8000f0a:	733b      	strb	r3, [r7, #12]
	armed = !armed;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <toggleArmed+0x48>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <toggleArmed+0x48>)
 8000f1e:	701a      	strb	r2, [r3, #0]
	if(armed) {
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <toggleArmed+0x48>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <toggleArmed+0x2e>
		*buf = 'A';
 8000f28:	2341      	movs	r3, #65	; 0x41
 8000f2a:	733b      	strb	r3, [r7, #12]
 8000f2c:	e001      	b.n	8000f32 <toggleArmed+0x32>
	}
	else {
		*buf = 'D';
 8000f2e:	2344      	movs	r3, #68	; 0x44
 8000f30:	733b      	strb	r3, [r7, #12]
	}
	HAL_UART_Transmit(huart, buf, 1, 100);
 8000f32:	f107 010c 	add.w	r1, r7, #12
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f009 fdd0 	bl	800aae0 <HAL_UART_Transmit>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000f834 	.word	0x2000f834

08000f4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(huart == &huart2) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_UART_RxCpltCallback+0x48>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d10b      	bne.n	8000f74 <HAL_UART_RxCpltCallback+0x28>
	  HAL_UART_Transmit(&huart3, buf, 1, 100); // Transmit what is in the buffers to the robots
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	2201      	movs	r2, #1
 8000f60:	490d      	ldr	r1, [pc, #52]	; (8000f98 <HAL_UART_RxCpltCallback+0x4c>)
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <HAL_UART_RxCpltCallback+0x50>)
 8000f64:	f009 fdbc 	bl	800aae0 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT (&huart2, buf, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	490b      	ldr	r1, [pc, #44]	; (8000f98 <HAL_UART_RxCpltCallback+0x4c>)
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x48>)
 8000f6e:	f009 ffcb 	bl	800af08 <HAL_UART_Receive_IT>
  else if(huart == &huart3) {
	  //printPicture(&hspi1); // This will block until image finishes
	  resetDistributedPP();
	  HAL_UART_Receive_IT(&huart3, picture, IMAGE_BYTES);
  }
}
 8000f72:	e00b      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x40>
  else if(huart == &huart3) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_UART_RxCpltCallback+0x50>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d107      	bne.n	8000f8c <HAL_UART_RxCpltCallback+0x40>
	  resetDistributedPP();
 8000f7c:	f7ff faa2 	bl	80004c4 <resetDistributedPP>
	  HAL_UART_Receive_IT(&huart3, picture, IMAGE_BYTES);
 8000f80:	f24f 6218 	movw	r2, #63000	; 0xf618
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <HAL_UART_RxCpltCallback+0x54>)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_UART_RxCpltCallback+0x50>)
 8000f88:	f009 ffbe 	bl	800af08 <HAL_UART_Receive_IT>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000f714 	.word	0x2000f714
 8000f98:	2000f838 	.word	0x2000f838
 8000f9c:	2000f7a4 	.word	0x2000f7a4
 8000fa0:	20000094 	.word	0x20000094

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
 8000fae:	bf00      	nop

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_SPI_MspInit+0x80>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800104a:	23f0      	movs	r3, #240	; 0xf0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f001 fd6a 	bl	8002b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013000 	.word	0x40013000
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_SPI_MspDeInit+0x30>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10a      	bne.n	80010a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_SPI_MspDeInit+0x34>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_SPI_MspDeInit+0x34>)
 8001094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800109a:	21f0      	movs	r1, #240	; 0xf0
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 fee0 	bl	8002e64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40013000 	.word	0x40013000
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0b0      	sub	sp, #192	; 0xc0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	2294      	movs	r2, #148	; 0x94
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00e fa8d 	bl	800f5f4 <memset>
  if(huart->Instance==USART2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_UART_MspInit+0x154>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d143      	bne.n	800116c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fa1d 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010fc:	f7ff ff52 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_UART_MspInit+0x158>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	4a41      	ldr	r2, [pc, #260]	; (800120c <HAL_UART_MspInit+0x158>)
 8001106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110a:	6593      	str	r3, [r2, #88]	; 0x58
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_UART_MspInit+0x158>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_UART_MspInit+0x158>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a3b      	ldr	r2, [pc, #236]	; (800120c <HAL_UART_MspInit+0x158>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <HAL_UART_MspInit+0x158>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001130:	2378      	movs	r3, #120	; 0x78
 8001132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001152:	4619      	mov	r1, r3
 8001154:	482e      	ldr	r0, [pc, #184]	; (8001210 <HAL_UART_MspInit+0x15c>)
 8001156:	f001 fcf3 	bl	8002b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2026      	movs	r0, #38	; 0x26
 8001160:	f000 fe21 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001164:	2026      	movs	r0, #38	; 0x26
 8001166:	f000 fe3a 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800116a:	e048      	b.n	80011fe <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <HAL_UART_MspInit+0x160>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d143      	bne.n	80011fe <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001176:	2304      	movs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f004 f9d4 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800118e:	f7ff ff09 	bl	8000fa4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_UART_MspInit+0x158>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_UART_MspInit+0x158>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x158>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x158>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_UART_MspInit+0x158>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x158>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_UART_MspInit+0x15c>)
 80011ea:	f001 fca9 	bl	8002b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2027      	movs	r0, #39	; 0x27
 80011f4:	f000 fdd7 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f8:	2027      	movs	r0, #39	; 0x27
 80011fa:	f000 fdf0 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	37c0      	adds	r7, #192	; 0xc0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000c00 	.word	0x48000c00
 8001214:	40004800 	.word	0x40004800

08001218 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_UART_MspDeInit+0x5c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10d      	bne.n	8001246 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_UART_MspDeInit+0x60>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_UART_MspDeInit+0x60>)
 8001230:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001236:	2178      	movs	r1, #120	; 0x78
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <HAL_UART_MspDeInit+0x64>)
 800123a:	f001 fe13 	bl	8002e64 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800123e:	2026      	movs	r0, #38	; 0x26
 8001240:	f000 fddb 	bl	8001dfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001244:	e012      	b.n	800126c <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART3)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_UART_MspDeInit+0x68>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d10d      	bne.n	800126c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_UART_MspDeInit+0x60>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_UART_MspDeInit+0x60>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 800125c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <HAL_UART_MspDeInit+0x64>)
 8001262:	f001 fdff 	bl	8002e64 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001266:	2027      	movs	r0, #39	; 0x27
 8001268:	f000 fdc7 	bl	8001dfa <HAL_NVIC_DisableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40004400 	.word	0x40004400
 8001278:	40021000 	.word	0x40021000
 800127c:	48000c00 	.word	0x48000c00
 8001280:	40004800 	.word	0x40004800

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f96c 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART2_IRQHandler+0x10>)
 80012de:	f00a fe11 	bl	800bf04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000f714 	.word	0x2000f714

080012ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <USART3_IRQHandler+0x10>)
 80012f2:	f00a fe07 	bl	800bf04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000f7a4 	.word	0x2000f7a4

08001300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <SystemCoreClockUpdate+0x144>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d107      	bne.n	8001346 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001336:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <SystemCoreClockUpdate+0x144>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e005      	b.n	8001352 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <SystemCoreClockUpdate+0x144>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001352:	4a46      	ldr	r2, [pc, #280]	; (800146c <SystemCoreClockUpdate+0x148>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <SystemCoreClockUpdate+0x144>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d866      	bhi.n	8001436 <SystemCoreClockUpdate+0x112>
 8001368:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <SystemCoreClockUpdate+0x4c>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	080013a5 	.word	0x080013a5
 8001374:	08001437 	.word	0x08001437
 8001378:	08001437 	.word	0x08001437
 800137c:	08001437 	.word	0x08001437
 8001380:	080013ad 	.word	0x080013ad
 8001384:	08001437 	.word	0x08001437
 8001388:	08001437 	.word	0x08001437
 800138c:	08001437 	.word	0x08001437
 8001390:	080013b5 	.word	0x080013b5
 8001394:	08001437 	.word	0x08001437
 8001398:	08001437 	.word	0x08001437
 800139c:	08001437 	.word	0x08001437
 80013a0:	080013bd 	.word	0x080013bd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80013a4:	4a32      	ldr	r2, [pc, #200]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	6013      	str	r3, [r2, #0]
      break;
 80013aa:	e048      	b.n	800143e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 80013ae:	4a31      	ldr	r2, [pc, #196]	; (8001474 <SystemCoreClockUpdate+0x150>)
 80013b0:	601a      	str	r2, [r3, #0]
      break;
 80013b2:	e044      	b.n	800143e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <SystemCoreClockUpdate+0x154>)
 80013b8:	601a      	str	r2, [r3, #0]
      break;
 80013ba:	e040      	b.n	800143e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <SystemCoreClockUpdate+0x144>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <SystemCoreClockUpdate+0x144>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	3301      	adds	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d003      	beq.n	80013e2 <SystemCoreClockUpdate+0xbe>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d006      	beq.n	80013ee <SystemCoreClockUpdate+0xca>
 80013e0:	e00b      	b.n	80013fa <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <SystemCoreClockUpdate+0x150>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	613b      	str	r3, [r7, #16]
          break;
 80013ec:	e00b      	b.n	8001406 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <SystemCoreClockUpdate+0x154>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	613b      	str	r3, [r7, #16]
          break;
 80013f8:	e005      	b.n	8001406 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	613b      	str	r3, [r7, #16]
          break;
 8001404:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <SystemCoreClockUpdate+0x144>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <SystemCoreClockUpdate+0x144>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0e5b      	lsrs	r3, r3, #25
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	3301      	adds	r3, #1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 8001432:	6013      	str	r3, [r2, #0]
      break;
 8001434:	e003      	b.n	800143e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	6013      	str	r3, [r2, #0]
      break;
 800143c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <SystemCoreClockUpdate+0x144>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <SystemCoreClockUpdate+0x158>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemCoreClockUpdate+0x14c>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	0800f68c 	.word	0x0800f68c
 8001470:	2000006c 	.word	0x2000006c
 8001474:	00f42400 	.word	0x00f42400
 8001478:	007a1200 	.word	0x007a1200
 800147c:	0800f674 	.word	0x0800f674

08001480 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 fc80 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f84f 	bl	8001534 <HAL_InitTick>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	e001      	b.n	80014a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a2:	f7ff fd85 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_DeInit+0x64>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	639a      	str	r2, [r3, #56]	; 0x38
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_DeInit+0x64>)
 80014be:	f04f 32ff 	mov.w	r2, #4294967295
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_DeInit+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_DeInit+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_DeInit+0x64>)
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_DeInit+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_DeInit+0x64>)
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_DeInit+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_DeInit+0x64>)
 80014ee:	f04f 32ff 	mov.w	r2, #4294967295
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_DeInit+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_DeInit+0x64>)
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_DeInit+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001508:	f000 f80d 	bl	8001526 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_InitTick+0x6c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_InitTick+0x70>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_InitTick+0x6c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fc5d 	bl	8001e1e <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d809      	bhi.n	8001584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 fc15 	bl	8001da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_InitTick+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e007      	b.n	8001594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e004      	b.n	8001594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000074 	.word	0x20000074
 80015a4:	2000006c 	.word	0x2000006c
 80015a8:	20000070 	.word	0x20000070

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000074 	.word	0x20000074
 80015d0:	2000f83c 	.word	0x2000f83c

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000f83c 	.word	0x2000f83c

080015ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTickPrio+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000070 	.word	0x20000070

08001604 <HAL_SetTickFreq>:
  * @brief Set new tick Freq.
  * @param Freq tick frequency
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  if (uwTickFreq != Freq)
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_SetTickFreq+0x48>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	429a      	cmp	r2, r3
 800161a:	d012      	beq.n	8001642 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_SetTickFreq+0x48>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_SetTickFreq+0x48>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_SetTickFreq+0x4c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff81 	bl	8001534 <HAL_InitTick>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800163c:	4a03      	ldr	r2, [pc, #12]	; (800164c <HAL_SetTickFreq+0x48>)
 800163e:	7bbb      	ldrb	r3, [r7, #14]
 8001640:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000074 	.word	0x20000074
 8001650:	20000070 	.word	0x20000070

08001654 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTickFreq+0x14>)
 800165a:	781b      	ldrb	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000074 	.word	0x20000074

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffae 	bl	80015d4 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ff9e 	bl	80015d4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000074 	.word	0x20000074

080016b4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_SuspendTick+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_SuspendTick+0x1c>)
 80016be:	f023 0302 	bic.w	r3, r3, #2
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_ResumeTick+0x1c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_ResumeTick+0x1c>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetHalVersion+0x10>)
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	010d0200 	.word	0x010d0200

08001708 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_GetREVID+0x18>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	b29b      	uxth	r3, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e0042000 	.word	0xe0042000

08001724 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_GetDEVID+0x18>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e0042000 	.word	0xe0042000

08001740 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetUIDw0+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	1fff7590 	.word	0x1fff7590

08001758 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetUIDw1+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	1fff7594 	.word	0x1fff7594

08001770 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetUIDw2+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	1fff7598 	.word	0x1fff7598

08001788 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6053      	str	r3, [r2, #4]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e0042000 	.word	0xe0042000

080017a8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6053      	str	r3, [r2, #4]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e0042000 	.word	0xe0042000

080017c8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	6053      	str	r3, [r2, #4]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e0042000 	.word	0xe0042000

080017e8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	6053      	str	r3, [r2, #4]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e0042000 	.word	0xe0042000

08001808 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6053      	str	r3, [r2, #4]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e0042000 	.word	0xe0042000

08001828 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	6053      	str	r3, [r2, #4]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e0042000 	.word	0xe0042000

08001848 <HAL_SYSCFG_SRAM2Erase>:
  * @note   As long as SRAM2 is not erased the SRAM2ER bit will be set.
  *         This bit is automatically reset at the end of the SRAM2 erase operation.
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_SYSCFG_SRAM2Erase+0x20>)
 800184e:	22ca      	movs	r2, #202	; 0xca
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_SYSCFG_SRAM2Erase+0x20>)
 8001854:	2253      	movs	r2, #83	; 0x53
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_SYSCFG_SRAM2Erase+0x24>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40010000 	.word	0x40010000
 800186c:	42200300 	.word	0x42200300

08001870 <HAL_SYSCFG_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_SYSCFG_EnableMemorySwappingBank+0x14>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	42200020 	.word	0x42200020

08001888 <HAL_SYSCFG_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_SYSCFG_DisableMemorySwappingBank+0x14>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	42200020 	.word	0x42200020

080018a0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0204 	bic.w	r2, r3, #4
 80018b0:	4904      	ldr	r1, [pc, #16]	; (80018c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40010030 	.word	0x40010030

080018c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 0202 	bic.w	r2, r3, #2
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40010030 	.word	0x40010030

080018f0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001900:	4904      	ldr	r1, [pc, #16]	; (8001914 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40010030 	.word	0x40010030

08001918 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800192a:	f7ff fe53 	bl	80015d4 <HAL_GetTick>
 800192e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001932:	f7ff fe4f 	bl	80015d4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b0a      	cmp	r3, #10
 800193e:	d901      	bls.n	8001944 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e006      	b.n	8001952 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010030 	.word	0x40010030

08001960 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010030 	.word	0x40010030

08001980 <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  * @brief  Enable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6053      	str	r3, [r2, #4]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  * @brief  Disable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80019aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ae:	6053      	str	r3, [r2, #4]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db12      	blt.n	8001a98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <__NVIC_DisableIRQ+0x44>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	3320      	adds	r3, #32
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a8c:	f3bf 8f4f 	dsb	sy
}
 8001a90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a92:	f3bf 8f6f 	isb	sy
}
 8001a96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0e      	blt.n	8001ad8 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <__NVIC_GetPendingIRQ+0x40>)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	3340      	adds	r3, #64	; 0x40
 8001ac4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	e000      	b.n	8001ada <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8001ad8:	2300      	movs	r3, #0
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0c      	blt.n	8001b18 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_SetPendingIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	3340      	adds	r3, #64	; 0x40
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0c      	blt.n	8001b54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_ClearPendingIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0e      	blt.n	8001b94 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <__NVIC_GetActive+0x40>)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	3380      	adds	r3, #128	; 0x80
 8001b80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	e000      	b.n	8001b96 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8001b94:	2300      	movs	r3, #0
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db09      	blt.n	8001c22 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <__NVIC_GetPriority+0x48>)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4413      	add	r3, r2
 8001c16:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e009      	b.n	8001c36 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <__NVIC_GetPriority+0x4c>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	7e1b      	ldrb	r3, [r3, #24]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	b2db      	uxtb	r3, r3
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b089      	sub	sp, #36	; 0x24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_DecodePriority+0x32>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_DecodePriority+0x34>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	40da      	lsrs	r2, r3
 8001cee:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	601a      	str	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001d24:	f3bf 8f4f 	dsb	sy
}
 8001d28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <__NVIC_SystemReset+0x24>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d32:	4904      	ldr	r1, [pc, #16]	; (8001d44 <__NVIC_SystemReset+0x24>)
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_SystemReset+0x28>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <__NVIC_SystemReset+0x20>
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	05fa0004 	.word	0x05fa0004

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff1a 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fe11 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff fe26 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff42 	bl	8001c4c <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fee9 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe19 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe29 	bl	8001a60 <__NVIC_DisableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001e1a:	f7ff ff81 	bl	8001d20 <__NVIC_SystemReset>

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff90 	bl	8001d4c <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Get the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001e3a:	f7ff fde5 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fecf 	bl	8001bfc <__NVIC_GetPriority>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	f7ff ff25 	bl	8001cb2 <NVIC_DecodePriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe34 	bl	8001aec <__NVIC_SetPendingIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fe04 	bl	8001aa8 <__NVIC_GetPendingIRQ>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe35 	bl	8001b28 <__NVIC_ClearPendingIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe45 	bl	8001b64 <__NVIC_GetActive>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d106      	bne.n	8001f00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001efe:	e005      	b.n	8001f0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f20:	f000 f802 	bl	8001f28 <HAL_SYSTICK_Callback>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MPU_Enable+0x2a>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f48:	f3bf 8f4f 	dsb	sy
}
 8001f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f4e:	f3bf 8f6f 	isb	sy
}
 8001f52:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed90 	.word	0xe000ed90

08001f64 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f68:	f3bf 8f5f 	dmb	sy
}
 8001f6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable the MPU and clear the control register*/
  MPU->CTRL  = 0;
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HAL_MPU_Disable+0x1c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed90 	.word	0xe000ed90

08001f84 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	785a      	ldrb	r2, [r3, #1]
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_MPU_ConfigRegion+0x84>)
 8001f92:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d029      	beq.n	8001ff0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_MPU_ConfigRegion+0x84>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
 8001fa8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7adb      	ldrb	r3, [r3, #11]
 8001fae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8001fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7a9b      	ldrb	r3, [r3, #10]
 8001fb6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8001fb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7b5b      	ldrb	r3, [r3, #13]
 8001fbe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8001fc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b9b      	ldrb	r3, [r3, #14]
 8001fc6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8001fc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7bdb      	ldrb	r3, [r3, #15]
 8001fce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8001fd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7a5b      	ldrb	r3, [r3, #9]
 8001fd6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8001fd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7a1b      	ldrb	r3, [r3, #8]
 8001fde:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8001fe0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8001fea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8001fec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001fee:	e005      	b.n	8001ffc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_MPU_ConfigRegion+0x84>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_MPU_ConfigRegion+0x84>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed90 	.word	0xe000ed90

0800200c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e08d      	b.n	800213a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_DMA_Init+0x138>)
 8002026:	429a      	cmp	r2, r3
 8002028:	d80f      	bhi.n	800204a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_DMA_Init+0x13c>)
 8002032:	4413      	add	r3, r2
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <HAL_DMA_Init+0x140>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a42      	ldr	r2, [pc, #264]	; (8002150 <HAL_DMA_Init+0x144>)
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
 8002048:	e00e      	b.n	8002068 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <HAL_DMA_Init+0x148>)
 8002052:	4413      	add	r3, r2
 8002054:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_DMA_Init+0x140>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	009a      	lsls	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_DMA_Init+0x14c>)
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fcdd 	bl	8002a7a <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020c8:	d102      	bne.n	80020d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_DMA_Init+0x104>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d80c      	bhi.n	8002110 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fcfe 	bl	8002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e008      	b.n	8002122 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40020407 	.word	0x40020407
 8002148:	bffdfff8 	.word	0xbffdfff8
 800214c:	cccccccd 	.word	0xcccccccd
 8002150:	40020000 	.word	0x40020000
 8002154:	bffdfbf8 	.word	0xbffdfbf8
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07b      	b.n	8002266 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_DMA_DeInit+0x114>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d80f      	bhi.n	80021aa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_DMA_DeInit+0x118>)
 8002192:	4413      	add	r3, r2
 8002194:	4a38      	ldr	r2, [pc, #224]	; (8002278 <HAL_DMA_DeInit+0x11c>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	009a      	lsls	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <HAL_DMA_DeInit+0x120>)
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
 80021a8:	e00e      	b.n	80021c8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_DMA_DeInit+0x124>)
 80021b2:	4413      	add	r3, r2
 80021b4:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_DMA_DeInit+0x11c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	009a      	lsls	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_DMA_DeInit+0x128>)
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f003 021c 	and.w	r2, r3, #28
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fc48 	bl	8002a7a <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021fa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00f      	beq.n	8002224 <HAL_DMA_DeInit+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d80b      	bhi.n	8002224 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fc73 	bl	8002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002222:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020407 	.word	0x40020407
 8002274:	bffdfff8 	.word	0xbffdfff8
 8002278:	cccccccd 	.word	0xcccccccd
 800227c:	40020000 	.word	0x40020000
 8002280:	bffdfbf8 	.word	0xbffdfbf8
 8002284:	40020400 	.word	0x40020400

08002288 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Start+0x20>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e02e      	b.n	8002306 <HAL_DMA_Start+0x7e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d11d      	bne.n	80022f8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb8c 	bl	80029fe <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e005      	b.n	8002304 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_DMA_Start_IT+0x20>
 800232a:	2302      	movs	r3, #2
 800232c:	e066      	b.n	80023fc <HAL_DMA_Start_IT+0xee>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d155      	bne.n	80023ee <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fb49 	bl	80029fe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 020e 	orr.w	r2, r2, #14
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e00f      	b.n	80023a6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0204 	bic.w	r2, r2, #4
 8002394:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 020a 	orr.w	r2, r2, #10
 80023a4:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c2:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e005      	b.n	80023fa <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e040      	b.n	80024b0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800244c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 021c 	and.w	r2, r3, #28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800247a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002492:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800249c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e047      	b.n	8002570 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800250e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 021c 	and.w	r2, r3, #28
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800252c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002544:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800254e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
    }
  }
  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	460b      	mov	r3, r1
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2204      	movs	r2, #4
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0be      	b.n	8002724 <HAL_DMA_PollForTransfer+0x1aa>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b1      	b.n	8002724 <HAL_DMA_PollForTransfer+0x1aa>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f003 031c 	and.w	r3, r3, #28
 80025ce:	2202      	movs	r2, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e007      	b.n	80025e8 <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f003 031c 	and.w	r3, r3, #28
 80025e0:	2204      	movs	r2, #4
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e8:	f7fe fff4 	bl	80015d4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80025ee:	e03f      	b.n	8002670 <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	2108      	movs	r1, #8
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 021c 	and.w	r2, r3, #28
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e075      	b.n	8002724 <HAL_DMA_PollForTransfer+0x1aa>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d017      	beq.n	8002670 <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8002640:	f7fe ffc8 	bl	80015d4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <HAL_DMA_PollForTransfer+0xdc>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e059      	b.n	8002724 <HAL_DMA_PollForTransfer+0x1aa>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0b8      	beq.n	80025f0 <HAL_DMA_PollForTransfer+0x76>
    }
  }

#if defined(DMAMUX1)
  /*Check for DMAMUX Request generator (if used) overrun status */
  if(hdma->DMAmuxRequestGen != 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01a      	beq.n	80026bc <HAL_DMA_PollForTransfer+0x142>
  {
    /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <HAL_DMA_PollForTransfer+0x142>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_DMA_PollForTransfer+0x168>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
#endif /* DMAMUX1 */

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d112      	bne.n	800270e <HAL_DMA_PollForTransfer+0x194>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 021c 	and.w	r2, r3, #28
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2102      	movs	r1, #2
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800270c:	e009      	b.n	8002722 <HAL_DMA_PollForTransfer+0x1a8>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 021c 	and.w	r2, r3, #28
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2104      	movs	r1, #4
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d026      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x7a>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d021      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 021c 	and.w	r2, r3, #28
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2104      	movs	r1, #4
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	2b00      	cmp	r3, #0
 800279a:	d071      	beq.n	8002880 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027a4:	e06c      	b.n	8002880 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f003 031c 	and.w	r3, r3, #28
 80027ae:	2202      	movs	r2, #2
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02e      	beq.n	8002818 <HAL_DMA_IRQHandler+0xec>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d029      	beq.n	8002818 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020a 	bic.w	r2, r2, #10
 80027e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 021c 	and.w	r2, r3, #28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2102      	movs	r1, #2
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d038      	beq.n	8002880 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002816:	e033      	b.n	8002880 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f003 031c 	and.w	r3, r3, #28
 8002820:	2208      	movs	r2, #8
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02a      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d025      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020e 	bic.w	r2, r2, #14
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f003 021c 	and.w	r2, r3, #28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002880:	bf00      	nop
 8002882:	bf00      	nop
}
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800288a:	b480      	push	{r7}
 800288c:	b087      	sub	sp, #28
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	460b      	mov	r3, r1
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_DMA_RegisterCallback+0x20>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e032      	b.n	8002910 <HAL_DMA_RegisterCallback+0x86>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d121      	bne.n	8002902 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d81b      	bhi.n	80028fc <HAL_DMA_RegisterCallback+0x72>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_DMA_RegisterCallback+0x42>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028dd 	.word	0x080028dd
 80028d0:	080028e5 	.word	0x080028e5
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	080028f5 	.word	0x080028f5
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80028e2:	e010      	b.n	8002906 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 80028ea:	e00c      	b.n	8002906 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80028f2:	e008      	b.n	8002906 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80028fa:	e004      	b.n	8002906 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
           break;
 8002900:	e001      	b.n	8002906 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]

    /* Process locked */
  __HAL_LOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_DMA_UnRegisterCallback+0x1e>
 8002936:	2302      	movs	r3, #2
 8002938:	e041      	b.n	80029be <HAL_DMA_UnRegisterCallback+0xa2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d130      	bne.n	80029b0 <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d82a      	bhi.n	80029aa <HAL_DMA_UnRegisterCallback+0x8e>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_DMA_UnRegisterCallback+0x40>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	08002971 	.word	0x08002971
 8002960:	08002979 	.word	0x08002979
 8002964:	08002981 	.word	0x08002981
 8002968:	08002989 	.word	0x08002989
 800296c:	08002991 	.word	0x08002991
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8002976:	e01d      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800297e:	e019      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8002986:	e015      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800298e:	e011      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80029a8:	e004      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>

    default:
           status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
           break;
 80029ae:	e001      	b.n	80029b4 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029d8:	b2db      	uxtb	r3, r3
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a14:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a26:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f003 021c 	and.w	r2, r3, #28
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d108      	bne.n	8002a5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a5c:	e007      	b.n	8002a6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	60da      	str	r2, [r3, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6e>)
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d80a      	bhi.n	8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a9a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6493      	str	r3, [r2, #72]	; 0x48
 8002aa2:	e007      	b.n	8002ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <DMA_CalcDMAMUXChannelBaseAndMask+0x72>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3b08      	subs	r3, #8
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>)
 8002aca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40020407 	.word	0x40020407
 8002aec:	4002081c 	.word	0x4002081c
 8002af0:	cccccccd 	.word	0xcccccccd
 8002af4:	40020880 	.word	0x40020880

08002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2201      	movs	r2, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	1000823f 	.word	0x1000823f
 8002b3c:	40020940 	.word	0x40020940

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	e166      	b.n	8002e1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8158 	beq.w	8002e18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d005      	beq.n	8002b80 <HAL_GPIO_Init+0x40>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d130      	bne.n	8002be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0201 	and.w	r2, r3, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d017      	beq.n	8002c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d123      	bne.n	8002c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	6939      	ldr	r1, [r7, #16]
 8002c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80b2 	beq.w	8002e18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_GPIO_Init+0x2fc>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	4a60      	ldr	r2, [pc, #384]	; (8002e3c <HAL_GPIO_Init+0x2fc>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_GPIO_Init+0x2fc>)
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ccc:	4a5c      	ldr	r2, [pc, #368]	; (8002e40 <HAL_GPIO_Init+0x300>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cf6:	d02b      	beq.n	8002d50 <HAL_GPIO_Init+0x210>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_GPIO_Init+0x304>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d025      	beq.n	8002d4c <HAL_GPIO_Init+0x20c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a51      	ldr	r2, [pc, #324]	; (8002e48 <HAL_GPIO_Init+0x308>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01f      	beq.n	8002d48 <HAL_GPIO_Init+0x208>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a50      	ldr	r2, [pc, #320]	; (8002e4c <HAL_GPIO_Init+0x30c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d019      	beq.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4f      	ldr	r2, [pc, #316]	; (8002e50 <HAL_GPIO_Init+0x310>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_GPIO_Init+0x200>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_GPIO_Init+0x314>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00d      	beq.n	8002d3c <HAL_GPIO_Init+0x1fc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <HAL_GPIO_Init+0x318>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1f8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_GPIO_Init+0x31c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_GPIO_Init+0x1f4>
 8002d30:	2307      	movs	r3, #7
 8002d32:	e00e      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d34:	2308      	movs	r3, #8
 8002d36:	e00c      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d38:	2306      	movs	r3, #6
 8002d3a:	e00a      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	e008      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x300>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d94:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f ae91 	bne.w	8002b50 <HAL_GPIO_Init+0x10>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	48000800 	.word	0x48000800
 8002e4c:	48000c00 	.word	0x48000c00
 8002e50:	48001000 	.word	0x48001000
 8002e54:	48001400 	.word	0x48001400
 8002e58:	48001800 	.word	0x48001800
 8002e5c:	48001c00 	.word	0x48001c00
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e72:	e0c9      	b.n	8003008 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e74:	2201      	movs	r2, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80bc 	beq.w	8003002 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e8a:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_GPIO_DeInit+0x1c0>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eb2:	d02b      	beq.n	8002f0c <HAL_GPIO_DeInit+0xa8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	; (8003028 <HAL_GPIO_DeInit+0x1c4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d025      	beq.n	8002f08 <HAL_GPIO_DeInit+0xa4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_GPIO_DeInit+0x1c8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01f      	beq.n	8002f04 <HAL_GPIO_DeInit+0xa0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	; (8003030 <HAL_GPIO_DeInit+0x1cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d019      	beq.n	8002f00 <HAL_GPIO_DeInit+0x9c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a59      	ldr	r2, [pc, #356]	; (8003034 <HAL_GPIO_DeInit+0x1d0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <HAL_GPIO_DeInit+0x98>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_GPIO_DeInit+0x1d4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00d      	beq.n	8002ef8 <HAL_GPIO_DeInit+0x94>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_GPIO_DeInit+0x1d8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <HAL_GPIO_DeInit+0x90>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_GPIO_DeInit+0x1dc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_GPIO_DeInit+0x8c>
 8002eec:	2307      	movs	r3, #7
 8002eee:	e00e      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	e00c      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	e00a      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002ef8:	2305      	movs	r3, #5
 8002efa:	e008      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e006      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e004      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e002      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_GPIO_DeInit+0xaa>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	f002 0203 	and.w	r2, r2, #3
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	4093      	lsls	r3, r2
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d132      	bne.n	8002f84 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002f1e:	4b49      	ldr	r3, [pc, #292]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4947      	ldr	r1, [pc, #284]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f2c:	4b45      	ldr	r3, [pc, #276]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4943      	ldr	r1, [pc, #268]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f3a:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4940      	ldr	r1, [pc, #256]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f48:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	493c      	ldr	r1, [pc, #240]	; (8003044 <HAL_GPIO_DeInit+0x1e0>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f66:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <HAL_GPIO_DeInit+0x1c0>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	482b      	ldr	r0, [pc, #172]	; (8003024 <HAL_GPIO_DeInit+0x1c0>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	3302      	adds	r3, #2
 8002f80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2103      	movs	r1, #3
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	08d2      	lsrs	r2, r2, #3
 8002fb8:	4019      	ands	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2103      	movs	r1, #3
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f af2f 	bne.w	8002e74 <HAL_GPIO_DeInit+0x10>
  }
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40010000 	.word	0x40010000
 8003028:	48000400 	.word	0x48000400
 800302c:	48000800 	.word	0x48000800
 8003030:	48000c00 	.word	0x48000c00
 8003034:	48001000 	.word	0x48001000
 8003038:	48001400 	.word	0x48001400
 800303c:	48001800 	.word	0x48001800
 8003040:	48001c00 	.word	0x48001c00
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e001      	b.n	800306a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003094:	e002      	b.n	800309c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43d9      	mvns	r1, r3
 80030c6:	887b      	ldrh	r3, [r7, #2]
 80030c8:	400b      	ands	r3, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80030e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f806 	bl	800315c <HAL_GPIO_EXTI_Callback>
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40010400 	.word	0x40010400

0800315c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <HAL_PWR_DeInit>:
/**
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_PWR_DeInit+0x28>)
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <HAL_PWR_DeInit+0x28>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_PWR_DeInit+0x28>)
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <HAL_PWR_DeInit+0x28>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000

080031a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000

080031c0 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80031ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40007000 	.word	0x40007000

080031e0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_PWR_ConfigPVD+0xb8>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f023 020e 	bic.w	r2, r3, #14
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_PWR_ConfigPVD+0xb8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a06      	ldr	r2, [pc, #24]	; (800329c <HAL_PWR_ConfigPVD+0xbc>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40007000 	.word	0x40007000
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_PWR_EnablePVD+0x1c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_PWR_EnablePVD+0x1c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6053      	str	r3, [r2, #4]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000

080032c0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_PWR_DisablePVD+0x1c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_PWR_DisablePVD+0x1c>)
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	6053      	str	r3, [r2, #4]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <HAL_PWR_EnableWakeUpPin+0x3c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]


}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40007000 	.word	0x40007000

08003320 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_PWR_DisableWakeUpPin+0x28>)
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	43db      	mvns	r3, r3
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <HAL_PWR_DisableWakeUpPin+0x28>)
 8003336:	4013      	ands	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40007000 	.word	0x40007000

0800334c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_PWR_EnterSLEEPMode+0x60>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d10e      	bne.n	800338a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800336c:	f000 fec2 	bl	80040f4 <HAL_PWREx_DisableLowPowerRunMode>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003376:	e016      	b.n	80033a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_PWR_EnterSLEEPMode+0x60>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d001      	beq.n	800338a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003386:	f000 fea5 	bl	80040d4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800339c:	bf30      	wfi
 800339e:	e002      	b.n	80033a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80033a0:	bf40      	sev
    __WFE();
 80033a2:	bf20      	wfe
    __WFE();
 80033a4:	bf20      	wfe
  }

}
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40007000 	.word	0x40007000
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c6:	d104      	bne.n	80033d2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fef4 	bl	80041b8 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80033d0:	e003      	b.n	80033da <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fec5 	bl	8004164 <HAL_PWREx_EnterSTOP0Mode>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_PWR_EnterSTANDBYMode+0x2e>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_PWR_EnterSTANDBYMode+0x2e>)
 80033f0:	f043 0303 	orr.w	r3, r3, #3
 80033f4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_PWR_EnterSTANDBYMode+0x32>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	4a06      	ldr	r2, [pc, #24]	; (8003414 <HAL_PWR_EnterSTANDBYMode+0x32>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003402:	bf30      	wfi
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	6113      	str	r3, [r2, #16]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8003442:	f023 0302 	bic.w	r3, r3, #2
 8003446:	6113      	str	r3, [r2, #16]
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <HAL_PWR_EnableSEVOnPend>:
  * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_PWR_EnableSEVOnPend+0x1c>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8003462:	f043 0310 	orr.w	r3, r3, #16
 8003466:	6113      	str	r3, [r2, #16]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <HAL_PWR_DisableSEVOnPend>:
  * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_PWR_DisableSEVOnPend+0x1c>)
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	4a04      	ldr	r2, [pc, #16]	; (8003494 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8003482:	f023 0310 	bic.w	r3, r3, #16
 8003486:	6113      	str	r3, [r2, #16]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b8:	d102      	bne.n	80034c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80034ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034be:	e00b      	b.n	80034d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80034c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ce:	d102      	bne.n	80034d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80034d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d4:	e000      	b.n	80034d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80034d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d141      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d131      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003504:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350a:	4a46      	ldr	r2, [pc, #280]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800351c:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2232      	movs	r2, #50	; 0x32
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a3f      	ldr	r2, [pc, #252]	; (800362c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800353a:	e002      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3b01      	subs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d102      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f2      	bne.n	800353c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003556:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d158      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e057      	b.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003578:	e04d      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d141      	bne.n	8003606 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d131      	bne.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003596:	4a23      	ldr	r2, [pc, #140]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a0:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2232      	movs	r2, #50	; 0x32
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9b      	lsrs	r3, r3, #18
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c6:	e002      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d102      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f2      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ee:	d112      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e011      	b.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003604:	e007      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003614:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40007000 	.word	0x40007000
 8003628:	2000006c 	.word	0x2000006c
 800362c:	431bde83 	.word	0x431bde83

08003630 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HAL_PWREx_EnableBatteryCharging+0x30>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <HAL_PWREx_EnableBatteryCharging+0x30>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4313      	orrs	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_PWREx_EnableBatteryCharging+0x30>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_PWREx_EnableBatteryCharging+0x30>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	60d3      	str	r3, [r2, #12]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40007000 	.word	0x40007000

08003664 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_PWREx_DisableBatteryCharging+0x1c>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_PWREx_DisableBatteryCharging+0x1c>)
 800366e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40007000 	.word	0x40007000

08003684 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800368e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003692:	6053      	str	r3, [r2, #4]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40007000 	.word	0x40007000

080036a4 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_PWREx_DisableVddUSB+0x1c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_PWREx_DisableVddUSB+0x1c>)
 80036ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b2:	6053      	str	r3, [r2, #4]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40007000 	.word	0x40007000

080036c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d2:	6053      	str	r3, [r2, #4]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40007000 	.word	0x40007000

080036e4 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_PWREx_DisableVddIO2+0x1c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_PWREx_DisableVddIO2+0x1c>)
 80036ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f2:	6053      	str	r3, [r2, #4]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40007000 	.word	0x40007000

08003704 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	6093      	str	r3, [r2, #8]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 800372e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003732:	6093      	str	r3, [r2, #8]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000

08003744 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b08      	cmp	r3, #8
 8003756:	f200 809f 	bhi.w	8003898 <HAL_PWREx_EnableGPIOPullUp+0x154>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003785 	.word	0x08003785
 8003764:	080037a9 	.word	0x080037a9
 8003768:	080037c9 	.word	0x080037c9
 800376c:	080037e5 	.word	0x080037e5
 8003770:	08003801 	.word	0x08003801
 8003774:	0800381d 	.word	0x0800381d
 8003778:	08003839 	.word	0x08003839
 800377c:	08003855 	.word	0x08003855
 8003780:	08003875 	.word	0x08003875
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8003784:	4b49      	ldr	r3, [pc, #292]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378e:	4947      	ldr	r1, [pc, #284]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003790:	4313      	orrs	r3, r2
 8003792:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800379e:	43db      	mvns	r3, r3
 80037a0:	4942      	ldr	r1, [pc, #264]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 80037a6:	e07a      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80037a8:	4b40      	ldr	r3, [pc, #256]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ac:	493f      	ldr	r1, [pc, #252]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80037b4:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f023 0310 	bic.w	r3, r3, #16
 80037be:	43db      	mvns	r3, r3
 80037c0:	493a      	ldr	r1, [pc, #232]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80037c6:	e06a      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037cc:	4937      	ldr	r1, [pc, #220]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	43db      	mvns	r3, r3
 80037dc:	4933      	ldr	r1, [pc, #204]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037de:	4013      	ands	r3, r2
 80037e0:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80037e2:	e05c      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e8:	4930      	ldr	r1, [pc, #192]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80037f0:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	492c      	ldr	r1, [pc, #176]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80037fe:	e04e      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003804:	4929      	ldr	r1, [pc, #164]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	640b      	str	r3, [r1, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	43db      	mvns	r3, r3
 8003814:	4925      	ldr	r1, [pc, #148]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003816:	4013      	ands	r3, r2
 8003818:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 800381a:	e040      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800381e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003820:	4922      	ldr	r1, [pc, #136]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	648b      	str	r3, [r1, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8003828:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800382a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	43db      	mvns	r3, r3
 8003830:	491e      	ldr	r1, [pc, #120]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003832:	4013      	ands	r3, r2
 8003834:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 8003836:	e032      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 8003838:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800383a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800383c:	491b      	ldr	r1, [pc, #108]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	650b      	str	r3, [r1, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	43db      	mvns	r3, r3
 800384c:	4917      	ldr	r1, [pc, #92]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800384e:	4013      	ands	r3, r2
 8003850:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 8003852:	e024      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4913      	ldr	r1, [pc, #76]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800385e:	4313      	orrs	r3, r2
 8003860:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	490f      	ldr	r1, [pc, #60]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 800386e:	4013      	ands	r3, r2
 8003870:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8003872:	e014      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#if defined(GPIOI)
    case PWR_GPIO_I:
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003876:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	490b      	ldr	r1, [pc, #44]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003880:	4313      	orrs	r3, r2
 8003882:	660b      	str	r3, [r1, #96]	; 0x60
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003886:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	43db      	mvns	r3, r3
 8003890:	4906      	ldr	r1, [pc, #24]	; (80038ac <HAL_PWREx_EnableGPIOPullUp+0x168>)
 8003892:	4013      	ands	r3, r2
 8003894:	664b      	str	r3, [r1, #100]	; 0x64
       break;
 8003896:	e002      	b.n	800389e <HAL_PWREx_EnableGPIOPullUp+0x15a>
#endif
    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	bf00      	nop
  }

  return status;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_PWREx_DisableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d862      	bhi.n	800398a <HAL_PWREx_DisableGPIOPullUp+0xda>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <HAL_PWREx_DisableGPIOPullUp+0x1c>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003915 	.word	0x08003915
 80038d8:	08003925 	.word	0x08003925
 80038dc:	08003935 	.word	0x08003935
 80038e0:	08003945 	.word	0x08003945
 80038e4:	08003955 	.word	0x08003955
 80038e8:	08003965 	.word	0x08003965
 80038ec:	08003977 	.word	0x08003977
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038fa:	43db      	mvns	r3, r3
 80038fc:	4928      	ldr	r1, [pc, #160]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 80038fe:	4013      	ands	r3, r2
 8003900:	620b      	str	r3, [r1, #32]
       break;
 8003902:	e045      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	43db      	mvns	r3, r3
 800390c:	4924      	ldr	r1, [pc, #144]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800390e:	4013      	ands	r3, r2
 8003910:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 8003912:	e03d      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8003914:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	43db      	mvns	r3, r3
 800391c:	4920      	ldr	r1, [pc, #128]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800391e:	4013      	ands	r3, r2
 8003920:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 8003922:	e035      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	43db      	mvns	r3, r3
 800392c:	491c      	ldr	r1, [pc, #112]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800392e:	4013      	ands	r3, r2
 8003930:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 8003932:	e02d      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	43db      	mvns	r3, r3
 800393c:	4918      	ldr	r1, [pc, #96]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800393e:	4013      	ands	r3, r2
 8003940:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8003942:	e025      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	43db      	mvns	r3, r3
 800394c:	4914      	ldr	r1, [pc, #80]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800394e:	4013      	ands	r3, r2
 8003950:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8003952:	e01d      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	43db      	mvns	r3, r3
 800395c:	4910      	ldr	r1, [pc, #64]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 800395e:	4013      	ands	r3, r2
 8003960:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8003962:	e015      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003966:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	490c      	ldr	r1, [pc, #48]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003970:	4013      	ands	r3, r2
 8003972:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8003974:	e00c      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#if defined(GPIOI)
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	43db      	mvns	r3, r3
 8003982:	4907      	ldr	r1, [pc, #28]	; (80039a0 <HAL_PWREx_DisableGPIOPullUp+0xf0>)
 8003984:	4013      	ands	r3, r2
 8003986:	660b      	str	r3, [r1, #96]	; 0x60
       break;
 8003988:	e002      	b.n	8003990 <HAL_PWREx_DisableGPIOPullUp+0xe0>
#endif
    default:
       status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
       break;
 800398e:	bf00      	nop
  }

  return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000

080039a4 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_PWREx_EnableGPIOPullDown+0x154>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	08003a09 	.word	0x08003a09
 80039c8:	08003a29 	.word	0x08003a29
 80039cc:	08003a45 	.word	0x08003a45
 80039d0:	08003a61 	.word	0x08003a61
 80039d4:	08003a7d 	.word	0x08003a7d
 80039d8:	08003a99 	.word	0x08003a99
 80039dc:	08003ab5 	.word	0x08003ab5
 80039e0:	08003ad5 	.word	0x08003ad5
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 80039e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80039ee:	4947      	ldr	r1, [pc, #284]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	624b      	str	r3, [r1, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4942      	ldr	r1, [pc, #264]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	620b      	str	r3, [r1, #32]
       break;
 8003a06:	e07a      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f023 0310 	bic.w	r3, r3, #16
 8003a12:	493e      	ldr	r1, [pc, #248]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	62cb      	str	r3, [r1, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	493a      	ldr	r1, [pc, #232]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 8003a26:	e06a      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8003a28:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a2c:	4937      	ldr	r1, [pc, #220]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	634b      	str	r3, [r1, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	4933      	ldr	r1, [pc, #204]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 8003a42:	e05c      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	4930      	ldr	r1, [pc, #192]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8003a50:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	492c      	ldr	r1, [pc, #176]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 8003a5e:	e04e      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a64:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	644b      	str	r3, [r1, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	4925      	ldr	r1, [pc, #148]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8003a7a:	e040      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a80:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	64cb      	str	r3, [r1, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	491e      	ldr	r1, [pc, #120]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8003a96:	e032      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8003a98:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9c:	491b      	ldr	r1, [pc, #108]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	654b      	str	r3, [r1, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8003ab2:	e024      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4913      	ldr	r1, [pc, #76]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	490f      	ldr	r1, [pc, #60]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8003ad2:	e014      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#if defined(GPIOI)
    case PWR_GPIO_I:
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ad6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ade:	490b      	ldr	r1, [pc, #44]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	664b      	str	r3, [r1, #100]	; 0x64
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aee:	43db      	mvns	r3, r3
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <HAL_PWREx_EnableGPIOPullDown+0x168>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	660b      	str	r3, [r1, #96]	; 0x60
       break;
 8003af6:	e002      	b.n	8003afe <HAL_PWREx_EnableGPIOPullDown+0x15a>
#endif
    default:
      status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
      break;
 8003afc:	bf00      	nop
  }

  return status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40007000 	.word	0x40007000

08003b10 <HAL_PWREx_DisableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d864      	bhi.n	8003bee <HAL_PWREx_DisableGPIOPullDown+0xde>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_PWREx_DisableGPIOPullDown+0x1c>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b79 	.word	0x08003b79
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b99 	.word	0x08003b99
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003bb9 	.word	0x08003bb9
 8003b48:	08003bc9 	.word	0x08003bc9
 8003b4c:	08003bdb 	.word	0x08003bdb
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4929      	ldr	r1, [pc, #164]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 8003b62:	e047      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	4924      	ldr	r1, [pc, #144]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 8003b76:	e03d      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 8003b78:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	4920      	ldr	r1, [pc, #128]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 8003b86:	e035      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	491c      	ldr	r1, [pc, #112]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 8003b96:	e02d      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	4918      	ldr	r1, [pc, #96]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 8003ba6:	e025      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	4914      	ldr	r1, [pc, #80]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 8003bb6:	e01d      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	4910      	ldr	r1, [pc, #64]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 8003bc6:	e015      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	490c      	ldr	r1, [pc, #48]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#if defined(GPIOI)
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003bdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4907      	ldr	r1, [pc, #28]	; (8003c04 <HAL_PWREx_DisableGPIOPullDown+0xf4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	664b      	str	r3, [r1, #100]	; 0x64
       break;
 8003bec:	e002      	b.n	8003bf4 <HAL_PWREx_DisableGPIOPullDown+0xe4>
#endif
    default:
      status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf2:	bf00      	nop
  }

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40007000 	.word	0x40007000

08003c08 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8003c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c16:	6093      	str	r3, [r2, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40007000 	.word	0x40007000

08003c28 <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8003c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c36:	6093      	str	r3, [r2, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40007000 	.word	0x40007000

08003c48 <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 8003c4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c50:	f000 f809 	bl	8003c66 <HAL_PWREx_SetSRAM2ContentRetention>
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_PWREx_DisableSRAM2ContentRetention>:
/**
  * @brief Disable SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_NO_SRAM2_RETENTION);
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f000 f802 	bl	8003c66 <HAL_PWREx_SetSRAM2ContentRetention>
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_PWREx_SetSRAM2ContentRetention+0x46>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <HAL_PWREx_SetSRAM2ContentRetention+0x46>)
 8003c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7e:	6093      	str	r3, [r2, #8]
 8003c80:	e00c      	b.n	8003c9c <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c88:	d106      	bne.n	8003c98 <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_PWREx_SetSRAM2ContentRetention+0x46>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_PWREx_SetSRAM2ContentRetention+0x46>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6093      	str	r3, [r2, #8]
 8003c96:	e001      	b.n	8003c9c <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40007000 	.word	0x40007000

08003cb0 <HAL_PWREx_EnableSRAM3ContentRetention>:
  * @note  When RRSTP bit is set, SRAM3 is powered by the low-power regulator in
  *        Stop 2 mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM3ContentRetention(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_RRSTP);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_PWREx_EnableSRAM3ContentRetention+0x1c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <HAL_PWREx_EnableSRAM3ContentRetention+0x1c>)
 8003cba:	f043 0310 	orr.w	r3, r3, #16
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40007000 	.word	0x40007000

08003cd0 <HAL_PWREx_DisableSRAM3ContentRetention>:
  * @note  When RRSTP bit is reset, SRAM3 is powered off in Stop 2 mode
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM3ContentRetention(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_RRSTP);
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_PWREx_DisableSRAM3ContentRetention+0x1c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_PWREx_DisableSRAM3ContentRetention+0x1c>)
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_EnableDSIPinsPDActivation>:
/**
  * @brief Enable pull-down activation on DSI pins.
  * @retval None
  */
void HAL_PWREx_EnableDSIPinsPDActivation(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_DSIPDEN);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_PWREx_EnableDSIPinsPDActivation+0x1c>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_PWREx_EnableDSIPinsPDActivation+0x1c>)
 8003cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cfe:	6093      	str	r3, [r2, #8]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_PWREx_DisableDSIPinsPDActivation>:
/**
  * @brief Disable pull-down activation on DSI pins.
  * @retval None
  */
void HAL_PWREx_DisableDSIPinsPDActivation(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_DSIPDEN);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_PWREx_DisableDSIPinsPDActivation+0x1c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_PWREx_DisableDSIPinsPDActivation+0x1c>)
 8003d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1e:	6093      	str	r3, [r2, #8]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40007000 	.word	0x40007000

08003d30 <HAL_PWREx_EnablePVM1>:
/**
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_1);
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_PWREx_EnablePVM1+0x1c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_PWREx_EnablePVM1+0x1c>)
 8003d3a:	f043 0310 	orr.w	r3, r3, #16
 8003d3e:	6053      	str	r3, [r2, #4]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40007000 	.word	0x40007000

08003d50 <HAL_PWREx_DisablePVM1>:
/**
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PWREx_DisablePVM1+0x1c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_PWREx_DisablePVM1+0x1c>)
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	6053      	str	r3, [r2, #4]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_EnablePVM2>:
/**
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_2);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_PWREx_EnablePVM2+0x1c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_PWREx_EnablePVM2+0x1c>)
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	6053      	str	r3, [r2, #4]
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40007000 	.word	0x40007000

08003d90 <HAL_PWREx_DisablePVM2>:
/**
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_PWREx_DisablePVM2+0x1c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <HAL_PWREx_DisablePVM2+0x1c>)
 8003d9a:	f023 0320 	bic.w	r3, r3, #32
 8003d9e:	6053      	str	r3, [r2, #4]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000

08003db0 <HAL_PWREx_EnablePVM3>:
/**
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_3);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_PWREx_EnablePVM3+0x1c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_PWREx_EnablePVM3+0x1c>)
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	6053      	str	r3, [r2, #4]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000

08003dd0 <HAL_PWREx_DisablePVM3>:
/**
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_PWREx_DisablePVM3+0x1c>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a04      	ldr	r2, [pc, #16]	; (8003dec <HAL_PWREx_DisablePVM3+0x1c>)
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dde:	6053      	str	r3, [r2, #4]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40007000 	.word	0x40007000

08003df0 <HAL_PWREx_EnablePVM4>:
/**
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_4);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_PWREx_EnablePVM4+0x1c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_PWREx_EnablePVM4+0x1c>)
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfe:	6053      	str	r3, [r2, #4]
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40007000 	.word	0x40007000

08003e10 <HAL_PWREx_DisablePVM4>:
/**
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_PWREx_DisablePVM4+0x1c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <HAL_PWREx_DisablePVM4+0x1c>)
 8003e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1e:	6053      	str	r3, [r2, #4]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40007000 	.word	0x40007000

08003e30 <HAL_PWREx_ConfigPVM>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level and to each monitored supply.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan through PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	f000 80eb 	beq.w	800401c <HAL_PWREx_ConfigPVM+0x1ec>
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	f200 8131 	bhi.w	80040ae <HAL_PWREx_ConfigPVM+0x27e>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	f000 809c 	beq.w	8003f8a <HAL_PWREx_ConfigPVM+0x15a>
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	f200 812b 	bhi.w	80040ae <HAL_PWREx_ConfigPVM+0x27e>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d002      	beq.n	8003e62 <HAL_PWREx_ConfigPVM+0x32>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d04a      	beq.n	8003ef6 <HAL_PWREx_ConfigPVM+0xc6>
 8003e60:	e125      	b.n	80040ae <HAL_PWREx_ConfigPVM+0x27e>
  {
#if defined(PWR_CR2_PVME1)
    case PWR_PVM_1:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 8003e62:	4b97      	ldr	r3, [pc, #604]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	4a96      	ldr	r2, [pc, #600]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e68:	f023 0308 	bic.w	r3, r3, #8
 8003e6c:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 8003e6e:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a93      	ldr	r2, [pc, #588]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e74:	f023 0308 	bic.w	r3, r3, #8
 8003e78:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 8003e7a:	4b91      	ldr	r3, [pc, #580]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	4a90      	ldr	r2, [pc, #576]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e80:	f023 0308 	bic.w	r3, r3, #8
 8003e84:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 8003e86:	4b8e      	ldr	r3, [pc, #568]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	4a8d      	ldr	r2, [pc, #564]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003e8c:	f023 0308 	bic.w	r3, r3, #8
 8003e90:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_PWREx_ConfigPVM+0x7a>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 8003e9e:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4a87      	ldr	r2, [pc, #540]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ea4:	f043 0308 	orr.w	r3, r3, #8
 8003ea8:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_PWREx_ConfigPVM+0x92>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 8003eb6:	4b82      	ldr	r3, [pc, #520]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	4a81      	ldr	r2, [pc, #516]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_PWREx_ConfigPVM+0xaa>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8003ece:	4b7c      	ldr	r3, [pc, #496]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	4a7b      	ldr	r2, [pc, #492]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ed4:	f043 0308 	orr.w	r3, r3, #8
 8003ed8:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80e6 	beq.w	80040b4 <HAL_PWREx_ConfigPVM+0x284>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 8003ee8:	4b75      	ldr	r3, [pc, #468]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a74      	ldr	r2, [pc, #464]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 8003ef4:	e0de      	b.n	80040b4 <HAL_PWREx_ConfigPVM+0x284>
#endif /* PWR_CR2_PVME1 */

#if defined(PWR_CR2_PVME2)
    case PWR_PVM_2:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 8003ef6:	4b72      	ldr	r3, [pc, #456]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	4a71      	ldr	r2, [pc, #452]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003efc:	f023 0310 	bic.w	r3, r3, #16
 8003f00:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 8003f02:	4b6f      	ldr	r3, [pc, #444]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4a6e      	ldr	r2, [pc, #440]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f08:	f023 0310 	bic.w	r3, r3, #16
 8003f0c:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 8003f0e:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a6b      	ldr	r2, [pc, #428]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f14:	f023 0310 	bic.w	r3, r3, #16
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 8003f1a:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	4a68      	ldr	r2, [pc, #416]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f20:	f023 0310 	bic.w	r3, r3, #16
 8003f24:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_PWREx_ConfigPVM+0x10e>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a62      	ldr	r2, [pc, #392]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f38:	f043 0310 	orr.w	r3, r3, #16
 8003f3c:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_PWREx_ConfigPVM+0x126>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_PWREx_ConfigPVM+0x13e>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8003f62:	4b57      	ldr	r3, [pc, #348]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	4a56      	ldr	r2, [pc, #344]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f68:	f043 0310 	orr.w	r3, r3, #16
 8003f6c:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 809e 	beq.w	80040b8 <HAL_PWREx_ConfigPVM+0x288>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4a4f      	ldr	r2, [pc, #316]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f82:	f043 0310 	orr.w	r3, r3, #16
 8003f86:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 8003f88:	e096      	b.n	80040b8 <HAL_PWREx_ConfigPVM+0x288>
#endif /* PWR_CR2_PVME2 */

    case PWR_PVM_3:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8003f8a:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	4a4c      	ldr	r2, [pc, #304]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f90:	f023 0320 	bic.w	r3, r3, #32
 8003f94:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 8003f96:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003f9c:	f023 0320 	bic.w	r3, r3, #32
 8003fa0:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fa8:	f023 0320 	bic.w	r3, r3, #32
 8003fac:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fb4:	f023 0320 	bic.w	r3, r3, #32
 8003fb8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_PWREx_ConfigPVM+0x1a2>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fcc:	f043 0320 	orr.w	r3, r3, #32
 8003fd0:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_PWREx_ConfigPVM+0x1ba>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 8003fde:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_PWREx_ConfigPVM+0x1d2>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 8003ff6:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8003ffc:	f043 0320 	orr.w	r3, r3, #32
 8004000:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d056      	beq.n	80040bc <HAL_PWREx_ConfigPVM+0x28c>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004014:	f043 0320 	orr.w	r3, r3, #32
 8004018:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800401a:	e04f      	b.n	80040bc <HAL_PWREx_ConfigPVM+0x28c>

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800403a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_PWREx_ConfigPVM+0x234>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800405e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004062:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_PWREx_ConfigPVM+0x24c>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_PWREx_ConfigPVM+0x264>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 800408e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004092:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d011      	beq.n	80040c4 <HAL_PWREx_ConfigPVM+0x294>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_PWREx_ConfigPVM+0x290>)
 80040a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 80040ac:	e00a      	b.n	80040c4 <HAL_PWREx_ConfigPVM+0x294>

    default:
      status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      break;
 80040b2:	e008      	b.n	80040c6 <HAL_PWREx_ConfigPVM+0x296>
      break;
 80040b4:	bf00      	nop
 80040b6:	e006      	b.n	80040c6 <HAL_PWREx_ConfigPVM+0x296>
      break;
 80040b8:	bf00      	nop
 80040ba:	e004      	b.n	80040c6 <HAL_PWREx_ConfigPVM+0x296>
      break;
 80040bc:	bf00      	nop
 80040be:	e002      	b.n	80040c6 <HAL_PWREx_ConfigPVM+0x296>
 80040c0:	40010400 	.word	0x40010400
      break;
 80040c4:	bf00      	nop
  }

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80040de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004104:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2232      	movs	r2, #50	; 0x32
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0c9b      	lsrs	r3, r3, #18
 8004118:	3301      	adds	r3, #1
 800411a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800411c:	e002      	b.n	8004124 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3b01      	subs	r3, #1
 8004122:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004130:	d102      	bne.n	8004138 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f2      	bne.n	800411e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d101      	bne.n	800414a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e000      	b.n	800414c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	40007000 	.word	0x40007000
 800415c:	2000006c 	.word	0x2000006c
 8004160:	431bde83 	.word	0x431bde83

08004164 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004174:	f023 0307 	bic.w	r3, r3, #7
 8004178:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800418c:	bf30      	wfi
 800418e:	e002      	b.n	8004196 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004190:	bf40      	sev
    __WFE();
 8004192:	bf20      	wfe
    __WFE();
 8004194:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	6113      	str	r3, [r2, #16]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	4a0f      	ldr	r2, [pc, #60]	; (8004208 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80041e4:	bf30      	wfi
 80041e6:	e002      	b.n	80041ee <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041e8:	bf40      	sev
    __WFE();
 80041ea:	bf20      	wfe
    __WFE();
 80041ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	4a06      	ldr	r2, [pc, #24]	; (800420c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6113      	str	r3, [r2, #16]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800423c:	bf30      	wfi
 800423e:	e002      	b.n	8004246 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004240:	bf40      	sev
    __WFE();
 8004242:	bf20      	wfe
    __WFE();
 8004244:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a06      	ldr	r2, [pc, #24]	; (8004264 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	6113      	str	r3, [r2, #16]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40007000 	.word	0x40007000
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	4a05      	ldr	r2, [pc, #20]	; (8004298 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004288:	bf30      	wfi
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40007000 	.word	0x40007000
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80042ac:	f7ff f8f4 	bl	8003498 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042b6:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80042c4:	f000 f828 	bl	8004318 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042ca:	2208      	movs	r2, #8
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 80042da:	f000 f824 	bl	8004326 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042e0:	2210      	movs	r2, #16
 80042e2:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80042f0:	f000 f820 	bl	8004334 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042f6:	2220      	movs	r2, #32
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8004306:	f000 f81c 	bl	8004342 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800430a:	4b02      	ldr	r3, [pc, #8]	; (8004314 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010400 	.word	0x40010400

08004318 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004356:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004362:	f7fd f937 	bl	80015d4 <HAL_GetTick>
 8004366:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800436a:	f7fd f933 	bl	80015d4 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e07c      	b.n	8004476 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8004388:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_DeInit+0x134>)
 80043a0:	4a39      	ldr	r2, [pc, #228]	; (8004488 <HAL_RCC_DeInit+0x138>)
 80043a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80043a4:	4b39      	ldr	r3, [pc, #228]	; (800448c <HAL_RCC_DeInit+0x13c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd f8c3 	bl	8001534 <HAL_InitTick>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e05e      	b.n	8004476 <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80043b8:	f7fd f90c 	bl	80015d4 <HAL_GetTick>
 80043bc:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fd f908 	bl	80015d4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e04f      	b.n	8004476 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_DeInit+0x130>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1ee      	bne.n	80043c0 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_DeInit+0x130>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4926      	ldr	r1, [pc, #152]	; (8004480 <HAL_RCC_DeInit+0x130>)
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCC_DeInit+0x140>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80043ee:	f7fd f8f1 	bl	80015d4 <HAL_GetTick>
 80043f2:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd f8ed 	bl	80015d4 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e036      	b.n	8004476 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8004414:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004424:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004436:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800443a:	2200      	movs	r2, #0
 800443c:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004448:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_DeInit+0x130>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_RCC_DeInit+0x130>)
 800446c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	2000006c 	.word	0x2000006c
 8004488:	003d0900 	.word	0x003d0900
 800448c:	20000070 	.word	0x20000070
 8004490:	eafef4ff 	.word	0xeafef4ff

08004494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f000 bc16 	b.w	8004cd4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a8:	4b96      	ldr	r3, [pc, #600]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b2:	4b94      	ldr	r3, [pc, #592]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80e4 	beq.w	8004692 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4c>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	f040 808b 	bne.w	80045ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	f040 8087 	bne.w	80045ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e0:	4b88      	ldr	r3, [pc, #544]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_OscConfig+0x64>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e3ed      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4b81      	ldr	r3, [pc, #516]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <HAL_RCC_OscConfig+0x7e>
 8004508:	4b7e      	ldr	r3, [pc, #504]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	e005      	b.n	800451e <HAL_RCC_OscConfig+0x8a>
 8004512:	4b7c      	ldr	r3, [pc, #496]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451e:	4293      	cmp	r3, r2
 8004520:	d223      	bcs.n	800456a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ff40 	bl	80053ac <RCC_SetFlashLatencyFromMSIRange>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e3ce      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004536:	4b73      	ldr	r3, [pc, #460]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a72      	ldr	r2, [pc, #456]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	496d      	ldr	r1, [pc, #436]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004554:	4b6b      	ldr	r3, [pc, #428]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4968      	ldr	r1, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	e025      	b.n	80045b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456a:	4b66      	ldr	r3, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a65      	ldr	r2, [pc, #404]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4960      	ldr	r1, [pc, #384]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	495b      	ldr	r1, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ff00 	bl	80053ac <RCC_SetFlashLatencyFromMSIRange>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e38e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b6:	f000 fcf3 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b51      	ldr	r3, [pc, #324]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	4950      	ldr	r1, [pc, #320]	; (8004708 <HAL_RCC_OscConfig+0x274>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a4e      	ldr	r2, [pc, #312]	; (800470c <HAL_RCC_OscConfig+0x278>)
 80045d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045d6:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc ffaa 	bl	8001534 <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d052      	beq.n	8004690 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	e372      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d032      	beq.n	800465c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045f6:	4b43      	ldr	r3, [pc, #268]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a42      	ldr	r2, [pc, #264]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004602:	f7fc ffe7 	bl	80015d4 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800460a:	f7fc ffe3 	bl	80015d4 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e35b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800461c:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a35      	ldr	r2, [pc, #212]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800462e:	f043 0308 	orr.w	r3, r3, #8
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4930      	ldr	r1, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004646:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	492b      	ldr	r1, [pc, #172]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
 800465a:	e01a      	b.n	8004692 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800465c:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a28      	ldr	r2, [pc, #160]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004668:	f7fc ffb4 	bl	80015d4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004670:	f7fc ffb0 	bl	80015d4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e328      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1dc>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d073      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_OscConfig+0x21c>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d10e      	bne.n	80046c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d063      	beq.n	8004784 <HAL_RCC_OscConfig+0x2f0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15f      	bne.n	8004784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e305      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x24c>
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e025      	b.n	800472c <HAL_RCC_OscConfig+0x298>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d114      	bne.n	8004714 <HAL_RCC_OscConfig+0x280>
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a02      	ldr	r2, [pc, #8]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e013      	b.n	800472c <HAL_RCC_OscConfig+0x298>
 8004704:	40021000 	.word	0x40021000
 8004708:	0800f674 	.word	0x0800f674
 800470c:	2000006c 	.word	0x2000006c
 8004710:	20000070 	.word	0x20000070
 8004714:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a9f      	ldr	r2, [pc, #636]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800471a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a9c      	ldr	r2, [pc, #624]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d013      	beq.n	800475c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fc ff4e 	bl	80015d4 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473c:	f7fc ff4a 	bl	80015d4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e2c2      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474e:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x2a8>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fc ff3a 	bl	80015d4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fc ff36 	bl	80015d4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e2ae      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x2d0>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d060      	beq.n	8004854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x310>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d119      	bne.n	80047d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d116      	bne.n	80047d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a4:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_OscConfig+0x328>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e28b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047bc:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	4973      	ldr	r1, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d0:	e040      	b.n	8004854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d023      	beq.n	8004822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fc fef5 	bl	80015d4 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fc fef1 	bl	80015d4 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e269      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004800:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	495f      	ldr	r1, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
 8004820:	e018      	b.n	8004854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5c      	ldr	r2, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fc fed1 	bl	80015d4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fc fecd 	bl	80015d4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e245      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004848:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800486a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486e:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fc feac 	bl	80015d4 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004880:	f7fc fea8 	bl	80015d4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e220      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCC_OscConfig+0x3ec>
 80048a0:	e01b      	b.n	80048da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a8:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fc fe8f 	bl	80015d4 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fc fe8b 	bl	80015d4 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e203      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a6 	beq.w	8004a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	; 0x58
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d118      	bne.n	8004952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492c:	f7fc fe52 	bl	80015d4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fc fe4e 	bl	80015d4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1c6      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <HAL_RCC_OscConfig+0x4d8>
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496a:	e029      	b.n	80049c0 <HAL_RCC_OscConfig+0x52c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b05      	cmp	r3, #5
 8004972:	d115      	bne.n	80049a0 <HAL_RCC_OscConfig+0x50c>
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004994:	e014      	b.n	80049c0 <HAL_RCC_OscConfig+0x52c>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
 80049a0:	4b9d      	ldr	r3, [pc, #628]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a9c      	ldr	r2, [pc, #624]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b0:	4b99      	ldr	r3, [pc, #612]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a98      	ldr	r2, [pc, #608]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fc fe04 	bl	80015d4 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fc fe00 	bl	80015d4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e176      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e6:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ed      	beq.n	80049d0 <HAL_RCC_OscConfig+0x53c>
 80049f4:	e015      	b.n	8004a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fc fded 	bl	80015d4 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc fde9 	bl	80015d4 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e15f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a14:	4b80      	ldr	r3, [pc, #512]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ed      	bne.n	80049fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a22:	7ffb      	ldrb	r3, [r7, #31]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b7b      	ldr	r3, [pc, #492]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	4a7a      	ldr	r2, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d03c      	beq.n	8004aba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01c      	beq.n	8004a82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a48:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a4e:	4a72      	ldr	r2, [pc, #456]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fc fdbc 	bl	80015d4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a60:	f7fc fdb8 	bl	80015d4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e130      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a72:	4b69      	ldr	r3, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ef      	beq.n	8004a60 <HAL_RCC_OscConfig+0x5cc>
 8004a80:	e01b      	b.n	8004aba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a88:	4a63      	ldr	r2, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fc fd9f 	bl	80015d4 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a9a:	f7fc fd9b 	bl	80015d4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e113      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aac:	4b5a      	ldr	r3, [pc, #360]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ef      	bne.n	8004a9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8107 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f040 80cf 	bne.w	8004c6c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0203 	and.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d12c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	3b01      	subs	r3, #1
 8004aee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d123      	bne.n	8004b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d11b      	bne.n	8004b3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d113      	bne.n	8004b3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d109      	bne.n	8004b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d071      	beq.n	8004c20 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d068      	beq.n	8004c14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b4e:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0ba      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2d      	ldr	r2, [pc, #180]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b6a:	f7fc fd33 	bl	80015d4 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fc fd2f 	bl	80015d4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0a7      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b90:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_RCC_OscConfig+0x788>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004baa:	0212      	lsls	r2, r2, #8
 8004bac:	4311      	orrs	r1, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bb2:	0852      	lsrs	r2, r2, #1
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	0552      	lsls	r2, r2, #21
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bbe:	0852      	lsrs	r2, r2, #1
 8004bc0:	3a01      	subs	r2, #1
 8004bc2:	0652      	lsls	r2, r2, #25
 8004bc4:	4311      	orrs	r1, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bca:	06d2      	lsls	r2, r2, #27
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4912      	ldr	r1, [pc, #72]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bec:	f7fc fcf2 	bl	80015d4 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fc fcee 	bl	80015d4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e066      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c12:	e05e      	b.n	8004cd2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e05d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d152      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c44:	f7fc fcc6 	bl	80015d4 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc fcc2 	bl	80015d4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e03a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x7b8>
 8004c6a:	e032      	b.n	8004cd2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d02d      	beq.n	8004cce <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004c9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fc fc95 	bl	80015d4 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fc fc91 	bl	80015d4 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x848>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x81a>
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e10f      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b86      	ldr	r3, [pc, #536]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 020f 	bic.w	r2, r3, #15
 8004d0e:	4984      	ldr	r1, [pc, #528]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0f7      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8089 	beq.w	8004e48 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d133      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b79      	ldr	r3, [pc, #484]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0e4      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d4e:	f000 fb87 	bl	8005460 <RCC_GetSysClockFreqFromPLLSource>
 8004d52:	4603      	mov	r3, r0
 8004d54:	4a74      	ldr	r2, [pc, #464]	; (8004f28 <HAL_RCC_ClockConfig+0x248>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d955      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d5a:	4b72      	ldr	r3, [pc, #456]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d66:	4b6f      	ldr	r3, [pc, #444]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6e:	4a6d      	ldr	r2, [pc, #436]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e044      	b.n	8004e06 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03e      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x126>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d13a      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d90:	4b64      	ldr	r3, [pc, #400]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d98:	4a62      	ldr	r2, [pc, #392]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e02f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dae:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d115      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0ac      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dc6:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0a0      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e098      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004de6:	f000 f8db 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4a4e      	ldr	r2, [pc, #312]	; (8004f28 <HAL_RCC_ClockConfig+0x248>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d909      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004df2:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfa:	4a4a      	ldr	r2, [pc, #296]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 0203 	bic.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4944      	ldr	r1, [pc, #272]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e18:	f7fc fbdc 	bl	80015d4 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e20:	f7fc fbd8 	bl	80015d4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e070      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 020c 	and.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1eb      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4930      	ldr	r1, [pc, #192]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a2c      	ldr	r2, [pc, #176]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e78:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d210      	bcs.n	8004eaa <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 020f 	bic.w	r2, r3, #15
 8004e90:	4923      	ldr	r1, [pc, #140]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <HAL_RCC_ClockConfig+0x240>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e036      	b.n	8004f18 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4918      	ldr	r1, [pc, #96]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4910      	ldr	r1, [pc, #64]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee8:	f000 f85a 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	490c      	ldr	r1, [pc, #48]	; (8004f2c <HAL_RCC_ClockConfig+0x24c>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x250>)
 8004f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <HAL_RCC_ClockConfig+0x254>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fc fb11 	bl	8001534 <HAL_InitTick>
 8004f12:	4603      	mov	r3, r0
 8004f14:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40021000 	.word	0x40021000
 8004f28:	04c4b400 	.word	0x04c4b400
 8004f2c:	0800f674 	.word	0x0800f674
 8004f30:	2000006c 	.word	0x2000006c
 8004f34:	20000070 	.word	0x20000070

08004f38 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <HAL_RCC_MCOConfig+0x64>)
 8004f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f48:	4a14      	ldr	r2, [pc, #80]	; (8004f9c <HAL_RCC_MCOConfig+0x64>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCC_MCOConfig+0x64>)
 8004f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f62:	2302      	movs	r3, #2
 8004f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f66:	2302      	movs	r3, #2
 8004f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004f72:	f107 0314 	add.w	r3, r7, #20
 8004f76:	4619      	mov	r1, r3
 8004f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f7c:	f7fd fde0 	bl	8002b40 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_MCOConfig+0x64>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	4903      	ldr	r1, [pc, #12]	; (8004f9c <HAL_RCC_MCOConfig+0x64>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fae:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d121      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d11e      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fe0:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e005      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10d      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d102      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e004      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d101      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d134      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d003      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0xa6>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d003      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0xac>
 8005044:	e005      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005046:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005048:	617b      	str	r3, [r7, #20]
      break;
 800504a:	e005      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800504e:	617b      	str	r3, [r7, #20]
      break;
 8005050:	e002      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	617b      	str	r3, [r7, #20]
      break;
 8005056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	fb03 f202 	mul.w	r2, r3, r2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	0e5b      	lsrs	r3, r3, #25
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	3301      	adds	r3, #1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005098:	69bb      	ldr	r3, [r7, #24]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3724      	adds	r7, #36	; 0x24
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800f68c 	.word	0x0800f68c
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000006c 	.word	0x2000006c

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d4:	f7ff fff0 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4904      	ldr	r1, [pc, #16]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	0800f684 	.word	0x0800f684

080050fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005100:	f7ff ffda 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0adb      	lsrs	r3, r3, #11
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	0800f684 	.word	0x0800f684

08005128 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223f      	movs	r2, #63	; 0x3f
 8005134:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8005136:	4b60      	ldr	r3, [pc, #384]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005142:	d104      	bne.n	800514e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	e00e      	b.n	800516c <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 800514e:	4b5a      	ldr	r3, [pc, #360]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d104      	bne.n	8005166 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	e002      	b.n	800516c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 800516c:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d103      	bne.n	8005180 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	619a      	str	r2, [r3, #24]
 800517e:	e002      	b.n	8005186 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8005186:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005192:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 800519e:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051aa:	d104      	bne.n	80051b6 <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e002      	b.n	80051bc <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 80051bc:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80051ca:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d103      	bne.n	80051e0 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2205      	movs	r2, #5
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	e00d      	b.n	80051fc <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d103      	bne.n	80051f6 <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	e002      	b.n	80051fc <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 80051fc:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d103      	bne.n	8005212 <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	615a      	str	r2, [r3, #20]
 8005210:	e002      	b.n	8005218 <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	615a      	str	r2, [r3, #20]
  }
#endif /* RCC_CSR_LSIPREDIV */

#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration ---------------------------------------------*/
  if(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON) == RCC_CRRCR_HSI48ON)
 8005218:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800521a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d103      	bne.n	800522e <HAL_RCC_GetOscConfig+0x106>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
 800522c:	e002      	b.n	8005234 <HAL_RCC_GetOscConfig+0x10c>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	625a      	str	r2, [r3, #36]	; 0x24
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8005234:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005240:	d103      	bne.n	800524a <HAL_RCC_GetOscConfig+0x122>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
 8005248:	e002      	b.n	8005250 <HAL_RCC_GetOscConfig+0x128>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0203 	and.w	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800526c:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	0d5b      	lsrs	r3, r3, #21
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005a      	lsls	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	0e5b      	lsrs	r3, r3, #25
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	3301      	adds	r3, #1
 8005298:	005a      	lsls	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_RCC_GetOscConfig+0x190>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	0edb      	lsrs	r3, r3, #27
 80052a4:	f003 021f 	and.w	r2, r3, #31
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	220f      	movs	r2, #15
 80052ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0203 	and.w	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_RCC_GetClockConfig+0x5c>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	08db      	lsrs	r3, r3, #3
 80052f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <HAL_RCC_GetClockConfig+0x60>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 020f 	and.w	r2, r3, #15
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	40022000 	.word	0x40022000

08005320 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_EnableCSS+0x1c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_RCC_EnableCSS+0x1c>)
 800532a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000

08005340 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005344:	4b07      	ldr	r3, [pc, #28]	; (8005364 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005350:	d105      	bne.n	800535e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005352:	f000 f809 	bl	8005368 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800535c:	621a      	str	r2, [r3, #32]
  }
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_RCC_GetResetSource>:
  * @note   Once reset flags are retrieved, this API is clearing them in order
  *         to isolate next reset reason.
  * @retval can be a combination of @ref RCC_Reset_Flag
  */
uint32_t HAL_RCC_GetResetSource(void)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
  uint32_t reset;

  /* Get all reset flags */
  reset = RCC->CSR & RCC_RESET_FLAG_ALL;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <HAL_RCC_GetResetSource+0x32>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005382:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 8005386:	607b      	str	r3, [r7, #4]

  /* Clear Reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_RCC_GetResetSource+0x32>)
 800538a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538e:	4a06      	ldr	r2, [pc, #24]	; (80053a8 <HAL_RCC_GetResetSource+0x32>)
 8005390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return reset;
 8005398:	687b      	ldr	r3, [r7, #4]
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40021000 	.word	0x40021000

080053ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053b8:	4b27      	ldr	r3, [pc, #156]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053c4:	f7fe f870 	bl	80034a8 <HAL_PWREx_GetVoltageRange>
 80053c8:	6178      	str	r0, [r7, #20]
 80053ca:	e014      	b.n	80053f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d6:	6593      	str	r3, [r2, #88]	; 0x58
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053e4:	f7fe f860 	bl	80034a8 <HAL_PWREx_GetVoltageRange>
 80053e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fc:	d10b      	bne.n	8005416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d913      	bls.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2ba0      	cmp	r3, #160	; 0xa0
 8005408:	d902      	bls.n	8005410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800540a:	2302      	movs	r3, #2
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e00d      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005410:	2301      	movs	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	e00a      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d902      	bls.n	8005422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800541c:	2302      	movs	r3, #2
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e004      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d101      	bne.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 020f 	bic.w	r2, r3, #15
 8005434:	4909      	ldr	r1, [pc, #36]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000
 800545c:	40022000 	.word	0x40022000

08005460 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800546a:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d118      	bne.n	80054a8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005476:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d107      	bne.n	8005492 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e005      	b.n	800549e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d003      	beq.n	80054c0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d003      	beq.n	80054c6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80054be:	e005      	b.n	80054cc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054c2:	613b      	str	r3, [r7, #16]
    break;
 80054c4:	e005      	b.n	80054d2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80054c8:	613b      	str	r3, [r7, #16]
    break;
 80054ca:	e002      	b.n	80054d2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]
    break;
 80054d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	3301      	adds	r3, #1
 80054de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	0e5b      	lsrs	r3, r3, #25
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	3301      	adds	r3, #1
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005512:	683b      	ldr	r3, [r7, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40021000 	.word	0x40021000
 8005524:	0800f68c 	.word	0x0800f68c
 8005528:	00f42400 	.word	0x00f42400
 800552c:	007a1200 	.word	0x007a1200

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005538:	2300      	movs	r3, #0
 800553a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800553c:	2300      	movs	r3, #0
 800553e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005548:	2b00      	cmp	r3, #0
 800554a:	d040      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005550:	2b80      	cmp	r3, #128	; 0x80
 8005552:	d02a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d825      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005558:	2b60      	cmp	r3, #96	; 0x60
 800555a:	d026      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800555c:	2b60      	cmp	r3, #96	; 0x60
 800555e:	d821      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d006      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d81d      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d010      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005570:	e018      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005572:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	4a88      	ldr	r2, [pc, #544]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800557e:	e015      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f001 ff7b 	bl	8007482 <RCCEx_PLLSAI1_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005590:	e00c      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3320      	adds	r3, #32
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f002 f865 	bl	8007668 <RCCEx_PLLSAI2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	74fb      	strb	r3, [r7, #19]
      break;
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80055aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b2:	4b79      	ldr	r3, [pc, #484]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c0:	4975      	ldr	r1, [pc, #468]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d047      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e2:	d030      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e8:	d82a      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	d02a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d824      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d008      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005600:	d81e      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560a:	d010      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800560c:	e018      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800560e:	4b62      	ldr	r3, [pc, #392]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a61      	ldr	r2, [pc, #388]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005618:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800561a:	e015      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 ff2d 	bl	8007482 <RCCEx_PLLSAI1_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800562c:	e00c      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3320      	adds	r3, #32
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f002 f817 	bl	8007668 <RCCEx_PLLSAI2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	74fb      	strb	r3, [r7, #19]
      break;
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800564e:	4b52      	ldr	r3, [pc, #328]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	494e      	ldr	r1, [pc, #312]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005664:	e001      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 809f 	beq.w	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800567c:	4b46      	ldr	r3, [pc, #280]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	4a40      	ldr	r2, [pc, #256]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6593      	str	r3, [r2, #88]	; 0x58
 800569e:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ae:	4b3b      	ldr	r3, [pc, #236]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3a      	ldr	r2, [pc, #232]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ba:	f7fb ff8b 	bl	80015d4 <HAL_GetTick>
 80056be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056c0:	e009      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c2:	f7fb ff87 	bl	80015d4 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d902      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	74fb      	strb	r3, [r7, #19]
        break;
 80056d4:	e005      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d6:	4b31      	ldr	r3, [pc, #196]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80056e2:	7cfb      	ldrb	r3, [r7, #19]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d15b      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01f      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d019      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005710:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005712:	4b21      	ldr	r3, [pc, #132]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800571a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005732:	4a19      	ldr	r2, [pc, #100]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d016      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7fb ff46 	bl	80015d4 <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574a:	e00b      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fb ff42 	bl	80015d4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d902      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	74fb      	strb	r3, [r7, #19]
            break;
 8005762:	e006      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ec      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005772:	7cfb      	ldrb	r3, [r7, #19]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	4903      	ldr	r1, [pc, #12]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005790:	e008      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	74bb      	strb	r3, [r7, #18]
 8005796:	e005      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005798:	40021000 	.word	0x40021000
 800579c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a4:	7c7b      	ldrb	r3, [r7, #17]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057aa:	4ba0      	ldr	r3, [pc, #640]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	4a9f      	ldr	r2, [pc, #636]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c2:	4b9a      	ldr	r3, [pc, #616]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f023 0203 	bic.w	r2, r3, #3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	4996      	ldr	r1, [pc, #600]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057e4:	4b91      	ldr	r3, [pc, #580]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	f023 020c 	bic.w	r2, r3, #12
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	498e      	ldr	r1, [pc, #568]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005806:	4b89      	ldr	r3, [pc, #548]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	4985      	ldr	r1, [pc, #532]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005828:	4b80      	ldr	r3, [pc, #512]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005836:	497d      	ldr	r1, [pc, #500]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800584a:	4b78      	ldr	r3, [pc, #480]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	4974      	ldr	r1, [pc, #464]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800586c:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005872:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	496c      	ldr	r1, [pc, #432]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588e:	4b67      	ldr	r3, [pc, #412]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589c:	4963      	ldr	r1, [pc, #396]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058b0:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058be:	495b      	ldr	r1, [pc, #364]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d2:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	4952      	ldr	r1, [pc, #328]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058f4:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005902:	494a      	ldr	r1, [pc, #296]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005916:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	4941      	ldr	r1, [pc, #260]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005938:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005946:	4939      	ldr	r1, [pc, #228]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d028      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595a:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	4930      	ldr	r1, [pc, #192]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d106      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597a:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005984:	60d3      	str	r3, [r2, #12]
 8005986:	e011      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005990:	d10c      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fd72 	bl	8007482 <RCCEx_PLLSAI1_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d04d      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d108      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059c2:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059d2:	e012      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80059d4:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059da:	4a14      	ldr	r2, [pc, #80]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f2:	490e      	ldr	r1, [pc, #56]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a02:	d106      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0e:	60d3      	str	r3, [r2, #12]
 8005a10:	e020      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a1a:	d109      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a02      	ldr	r2, [pc, #8]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a26:	60d3      	str	r3, [r2, #12]
 8005a28:	e014      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fd1e 	bl	8007482 <RCCEx_PLLSAI1_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d028      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a60:	4b4a      	ldr	r3, [pc, #296]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6e:	4947      	ldr	r1, [pc, #284]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a41      	ldr	r2, [pc, #260]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a8a:	60d3      	str	r3, [r2, #12]
 8005a8c:	e011      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a96:	d10c      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fcef 	bl	8007482 <RCCEx_PLLSAI1_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01e      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005abe:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ace:	492f      	ldr	r1, [pc, #188]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fcca 	bl	8007482 <RCCEx_PLLSAI1_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b0e:	f023 0204 	bic.w	r2, r3, #4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b18:	491c      	ldr	r1, [pc, #112]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b2c:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b32:	f023 0218 	bic.w	r2, r3, #24
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	4913      	ldr	r1, [pc, #76]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d017      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b60:	490a      	ldr	r1, [pc, #40]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b72:	d105      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000

08005b90 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L4R5xx) || defined(STM32L4S5xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a87      	ldr	r2, [pc, #540]	; (8005db8 <HAL_RCCEx_GetPeriphCLKConfig+0x228>)
 8005b9c:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8005b9e:	4b87      	ldr	r3, [pc, #540]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0203 	and.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
 8005baa:	4b84      	ldr	r3, [pc, #528]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005bba:	4b80      	ldr	r3, [pc, #512]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8005bc8:	4b7c      	ldr	r3, [pc, #496]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	0c5b      	lsrs	r3, r3, #17
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	1dda      	adds	r2, r3, #7
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8005bda:	4b78      	ldr	r3, [pc, #480]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	0d5b      	lsrs	r3, r3, #21
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	3301      	adds	r3, #1
 8005be6:	005a      	lsls	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8005bec:	4b73      	ldr	r3, [pc, #460]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	0e5b      	lsrs	r3, r3, #25
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	005a      	lsls	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
 8005c06:	4b6d      	ldr	r3, [pc, #436]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005c16:	4b69      	ldr	r3, [pc, #420]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8005c24:	4b65      	ldr	r3, [pc, #404]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	0c5b      	lsrs	r3, r3, #17
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	1dda      	adds	r2, r3, #7
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	0d5b      	lsrs	r3, r3, #21
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	3301      	adds	r3, #1
 8005c42:	005a      	lsls	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8005c48:	4b5c      	ldr	r3, [pc, #368]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	0e5b      	lsrs	r3, r3, #25
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	3301      	adds	r3, #1
 8005c54:	005a      	lsls	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	635a      	str	r2, [r3, #52]	; 0x34

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8005c5a:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f003 0203 	and.w	r2, r3, #3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8005c68:	4b54      	ldr	r3, [pc, #336]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8005c76:	4b51      	ldr	r3, [pc, #324]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8005c92:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8005ca0:	4b46      	ldr	r3, [pc, #280]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8005cae:	4b43      	ldr	r3, [pc, #268]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8005cbc:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	659a      	str	r2, [r3, #88]	; 0x58
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8005cca:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 8005cd8:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cde:	f003 0203 	and.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ce6:	4b35      	ldr	r3, [pc, #212]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	669a      	str	r2, [r3, #104]	; 0x68

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d08:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8005d10:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8005d1e:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d24:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8005d2e:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKConfig+0x1c6>
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005d54:	e001      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKConfig+0x1ca>
 8005d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6793      	str	r3, [r2, #120]	; 0x78
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8005d5e:	4b17      	ldr	r3, [pc, #92]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d82:	f003 0204 	and.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Get the DFSDM1 audio clock source ---------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection  = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d92:	f003 0218 	and.w	r2, r3, #24
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  PeriphClkInit->DsiClockSelection = __HAL_RCC_GET_DSI_SOURCE();
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
 8005d9c:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <HAL_RCCEx_GetPeriphCLKConfig+0x22c>)
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	013f7fff 	.word	0x013f7fff
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd2:	d13e      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005dd4:	4bb6      	ldr	r3, [pc, #728]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de6:	d028      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dee:	f200 86f4 	bhi.w	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d005      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d00e      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005e02:	f000 beea 	b.w	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e06:	4baa      	ldr	r3, [pc, #680]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f040 86e4 	bne.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	61fb      	str	r3, [r7, #28]
      break;
 8005e1c:	f000 bedf 	b.w	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e20:	4ba3      	ldr	r3, [pc, #652]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	f040 86d9 	bne.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005e30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e34:	61fb      	str	r3, [r7, #28]
      break;
 8005e36:	f000 bed4 	b.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e3a:	4b9d      	ldr	r3, [pc, #628]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e46:	f040 86ce 	bne.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005e4a:	4b9a      	ldr	r3, [pc, #616]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e4c:	61fb      	str	r3, [r7, #28]
      break;
 8005e4e:	f000 beca 	b.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e52:	4b97      	ldr	r3, [pc, #604]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d036      	beq.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d840      	bhi.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d020      	beq.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005e74:	e039      	b.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e76:	4b8e      	ldr	r3, [pc, #568]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d116      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e82:	4b8b      	ldr	r3, [pc, #556]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e8e:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	e005      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e9a:	4b85      	ldr	r3, [pc, #532]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	4a84      	ldr	r2, [pc, #528]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005eae:	e01f      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
      break;
 8005eb4:	e01c      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eb6:	4b7e      	ldr	r3, [pc, #504]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec2:	d102      	bne.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005ec4:	4b7d      	ldr	r3, [pc, #500]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005ec6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005ec8:	e012      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
      break;
 8005ece:	e00f      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ed0:	4b77      	ldr	r3, [pc, #476]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005edc:	d102      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005ede:	4b78      	ldr	r3, [pc, #480]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005ee0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005ee2:	e005      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
      break;
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
      break;
 8005eee:	bf00      	nop
    }

    switch(PeriphClk)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ef6:	f000 8606 	beq.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f00:	f200 8673 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f0a:	f000 8469 	beq.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f14:	f200 8669 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1e:	f000 8531 	beq.w	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f28:	f200 865f 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f32:	f000 8187 	beq.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f3c:	f200 8655 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f46:	f000 80cd 	beq.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f50:	f200 864b 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	f000 8430 	beq.w	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	f200 8641 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6e:	f000 83e4 	beq.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f78:	f200 8637 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	f000 80af 	beq.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	f200 862d 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	f000 809d 	beq.w	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	f200 8623 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005faa:	f000 808b 	beq.w	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb4:	f200 8619 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbe:	f000 8554 	beq.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	f200 860f 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd2:	f000 8500 	beq.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	f200 8605 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe6:	f000 84a1 	beq.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff0:	f200 85fb 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	f000 846c 	beq.w	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	f200 85f3 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b20      	cmp	r3, #32
 8006008:	d84c      	bhi.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 85ec 	beq.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	2b1f      	cmp	r3, #31
 8006018:	f200 85e7 	bhi.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006439 	.word	0x08006439
 8006028:	080064a7 	.word	0x080064a7
 800602c:	08006beb 	.word	0x08006beb
 8006030:	0800653b 	.word	0x0800653b
 8006034:	08006beb 	.word	0x08006beb
 8006038:	08006beb 	.word	0x08006beb
 800603c:	08006beb 	.word	0x08006beb
 8006040:	080065b3 	.word	0x080065b3
 8006044:	08006beb 	.word	0x08006beb
 8006048:	08006beb 	.word	0x08006beb
 800604c:	08006beb 	.word	0x08006beb
 8006050:	08006beb 	.word	0x08006beb
 8006054:	08006beb 	.word	0x08006beb
 8006058:	08006beb 	.word	0x08006beb
 800605c:	08006beb 	.word	0x08006beb
 8006060:	08006637 	.word	0x08006637
 8006064:	08006beb 	.word	0x08006beb
 8006068:	08006beb 	.word	0x08006beb
 800606c:	08006beb 	.word	0x08006beb
 8006070:	08006beb 	.word	0x08006beb
 8006074:	08006beb 	.word	0x08006beb
 8006078:	08006beb 	.word	0x08006beb
 800607c:	08006beb 	.word	0x08006beb
 8006080:	08006beb 	.word	0x08006beb
 8006084:	08006beb 	.word	0x08006beb
 8006088:	08006beb 	.word	0x08006beb
 800608c:	08006beb 	.word	0x08006beb
 8006090:	08006beb 	.word	0x08006beb
 8006094:	08006beb 	.word	0x08006beb
 8006098:	08006beb 	.word	0x08006beb
 800609c:	08006beb 	.word	0x08006beb
 80060a0:	080066b9 	.word	0x080066b9
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	f000 83e8 	beq.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80060ac:	f000 bd9d 	b.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80060b0:	40021000 	.word	0x40021000
 80060b4:	0003d090 	.word	0x0003d090
 80060b8:	0800f68c 	.word	0x0800f68c
 80060bc:	00f42400 	.word	0x00f42400
 80060c0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80060c4:	69b9      	ldr	r1, [r7, #24]
 80060c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80060ca:	f001 fbc1 	bl	8007850 <RCCEx_GetSAIxPeriphCLKFreq>
 80060ce:	61f8      	str	r0, [r7, #28]
      break;
 80060d0:	f000 bd8e 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80060da:	f001 fbb9 	bl	8007850 <RCCEx_GetSAIxPeriphCLKFreq>
 80060de:	61f8      	str	r0, [r7, #28]
      break;
 80060e0:	f000 bd86 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80060e4:	4b9a      	ldr	r3, [pc, #616]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060f6:	d015      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060fe:	f200 8092 	bhi.w	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006108:	d029      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006110:	f200 8089 	bhi.w	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d07b      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006120:	d04a      	beq.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8006122:	e080      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006124:	4b8a      	ldr	r3, [pc, #552]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d17d      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006130:	4b87      	ldr	r3, [pc, #540]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800613c:	4b84      	ldr	r3, [pc, #528]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	e005      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006148:	4b81      	ldr	r3, [pc, #516]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	4a7f      	ldr	r2, [pc, #508]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615a:	61fb      	str	r3, [r7, #28]
          break;
 800615c:	e066      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800615e:	4b7c      	ldr	r3, [pc, #496]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800616a:	d162      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800616c:	4b78      	ldr	r3, [pc, #480]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006178:	d15b      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800617a:	4b75      	ldr	r3, [pc, #468]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	fb03 f202 	mul.w	r2, r3, r2
 800618e:	4b70      	ldr	r3, [pc, #448]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	3301      	adds	r3, #1
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80061a0:	4b6b      	ldr	r3, [pc, #428]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	0d5b      	lsrs	r3, r3, #21
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	3301      	adds	r3, #1
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	61fb      	str	r3, [r7, #28]
          break;
 80061b6:	e03c      	b.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80061b8:	4b65      	ldr	r3, [pc, #404]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c4:	d138      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80061c6:	4b62      	ldr	r3, [pc, #392]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d2:	d131      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061d4:	4b5e      	ldr	r3, [pc, #376]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	0a1b      	lsrs	r3, r3, #8
 80061da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061de:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	fb03 f202 	mul.w	r2, r3, r2
 80061e8:	4b59      	ldr	r3, [pc, #356]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3301      	adds	r3, #1
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80061fa:	4b55      	ldr	r3, [pc, #340]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	0d5b      	lsrs	r3, r3, #21
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	3301      	adds	r3, #1
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	61fb      	str	r3, [r7, #28]
          break;
 8006210:	e012      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006212:	4b4f      	ldr	r3, [pc, #316]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d10e      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006220:	4b4d      	ldr	r3, [pc, #308]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006222:	61fb      	str	r3, [r7, #28]
          break;
 8006224:	e00b      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006226:	bf00      	nop
 8006228:	f000 bce2 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800622c:	bf00      	nop
 800622e:	f000 bcdf 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006232:	bf00      	nop
 8006234:	f000 bcdc 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006238:	bf00      	nop
 800623a:	f000 bcd9 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800623e:	bf00      	nop
        break;
 8006240:	f000 bcd6 	b.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800624e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006252:	d13d      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006254:	4b3e      	ldr	r3, [pc, #248]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006260:	f040 84c5 	bne.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	f040 84bd 	bne.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	fb03 f202 	mul.w	r2, r3, r2
 8006288:	4b31      	ldr	r3, [pc, #196]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	3301      	adds	r3, #1
 8006294:	fbb2 f3f3 	udiv	r3, r2, r3
 8006298:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800629a:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	0edb      	lsrs	r3, r3, #27
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80062ac:	4b28      	ldr	r3, [pc, #160]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80062b8:	2311      	movs	r3, #17
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80062be:	2307      	movs	r3, #7
 80062c0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	61fb      	str	r3, [r7, #28]
      break;
 80062cc:	f000 bc8f 	b.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80062d0:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062e2:	d016      	beq.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062ea:	f200 809b 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f4:	d032      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fc:	f200 8092 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8084 	beq.w	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800630e:	d052      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006310:	e088      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b02      	cmp	r3, #2
 800631c:	f040 8084 	bne.w	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	e005      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800633a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	4a03      	ldr	r2, [pc, #12]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	61fb      	str	r3, [r7, #28]
          break;
 800634c:	e06c      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	0800f68c 	.word	0x0800f68c
 8006358:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800635c:	4ba5      	ldr	r3, [pc, #660]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006368:	d160      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800636a:	4ba2      	ldr	r3, [pc, #648]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006376:	d159      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006378:	4b9e      	ldr	r3, [pc, #632]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006382:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	fb03 f202 	mul.w	r2, r3, r2
 800638c:	4b99      	ldr	r3, [pc, #612]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	3301      	adds	r3, #1
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800639e:	4b95      	ldr	r3, [pc, #596]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	0d5b      	lsrs	r3, r3, #21
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	3301      	adds	r3, #1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	61fb      	str	r3, [r7, #28]
          break;
 80063b4:	e03a      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80063b6:	4b8f      	ldr	r3, [pc, #572]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c2:	d135      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80063c4:	4b8b      	ldr	r3, [pc, #556]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d0:	d12e      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	fb03 f202 	mul.w	r2, r3, r2
 80063e6:	4b83      	ldr	r3, [pc, #524]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	3301      	adds	r3, #1
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	0d5b      	lsrs	r3, r3, #21
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	3301      	adds	r3, #1
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	61fb      	str	r3, [r7, #28]
          break;
 800640e:	e00f      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006410:	4b78      	ldr	r3, [pc, #480]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b02      	cmp	r3, #2
 800641c:	d10a      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800641e:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006420:	61fb      	str	r3, [r7, #28]
          break;
 8006422:	e007      	b.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006424:	bf00      	nop
 8006426:	e3e2      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006428:	bf00      	nop
 800642a:	e3e0      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800642c:	bf00      	nop
 800642e:	e3de      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006430:	bf00      	nop
 8006432:	e3dc      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006434:	bf00      	nop
      break;
 8006436:	e3da      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006438:	4b6e      	ldr	r3, [pc, #440]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d827      	bhi.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006461 	.word	0x08006461
 8006454:	08006469 	.word	0x08006469
 8006458:	08006471 	.word	0x08006471
 800645c:	08006485 	.word	0x08006485
          frequency = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fe fe4c 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 8006464:	61f8      	str	r0, [r7, #28]
          break;
 8006466:	e01d      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006468:	f7fe fd9a 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800646c:	61f8      	str	r0, [r7, #28]
          break;
 800646e:	e019      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006470:	4b60      	ldr	r3, [pc, #384]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647c:	d10f      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800647e:	4b5f      	ldr	r3, [pc, #380]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006480:	61fb      	str	r3, [r7, #28]
          break;
 8006482:	e00c      	b.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006484:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d107      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006496:	61fb      	str	r3, [r7, #28]
          break;
 8006498:	e003      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800649a:	bf00      	nop
 800649c:	e3a8      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800649e:	bf00      	nop
 80064a0:	e3a6      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064a2:	bf00      	nop
        break;
 80064a4:	e3a4      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064a6:	4b53      	ldr	r3, [pc, #332]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f003 030c 	and.w	r3, r3, #12
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d83a      	bhi.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	0800652f 	.word	0x0800652f
 80064c8:	0800652f 	.word	0x0800652f
 80064cc:	0800652f 	.word	0x0800652f
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	0800652f 	.word	0x0800652f
 80064d8:	0800652f 	.word	0x0800652f
 80064dc:	0800652f 	.word	0x0800652f
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800652f 	.word	0x0800652f
 80064e8:	0800652f 	.word	0x0800652f
 80064ec:	0800652f 	.word	0x0800652f
 80064f0:	08006519 	.word	0x08006519
          frequency = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe fdec 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
          break;
 80064fa:	e01d      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80064fc:	f7fe fd50 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8006500:	61f8      	str	r0, [r7, #28]
          break;
 8006502:	e019      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006504:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d10f      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006512:	4b3a      	ldr	r3, [pc, #232]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006514:	61fb      	str	r3, [r7, #28]
          break;
 8006516:	e00c      	b.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006518:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d107      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652a:	61fb      	str	r3, [r7, #28]
          break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800652e:	bf00      	nop
 8006530:	e35e      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006532:	bf00      	nop
 8006534:	e35c      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006536:	bf00      	nop
        break;
 8006538:	e35a      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800653a:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d021      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b30      	cmp	r3, #48	; 0x30
 8006550:	d829      	bhi.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b20      	cmp	r3, #32
 8006556:	d011      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b20      	cmp	r3, #32
 800655c:	d823      	bhi.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b10      	cmp	r3, #16
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800656a:	e01c      	b.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fe fdb0 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006570:	61f8      	str	r0, [r7, #28]
          break;
 8006572:	e01d      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006574:	f7fe fd14 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8006578:	61f8      	str	r0, [r7, #28]
          break;
 800657a:	e019      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800657c:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006588:	d10f      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800658a:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800658c:	61fb      	str	r3, [r7, #28]
          break;
 800658e:	e00c      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006590:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	61fb      	str	r3, [r7, #28]
          break;
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80065a6:	bf00      	nop
 80065a8:	e322      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065aa:	bf00      	nop
 80065ac:	e320      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ae:	bf00      	nop
        break;
 80065b0:	e31e      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2bc0      	cmp	r3, #192	; 0xc0
 80065c2:	d027      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2bc0      	cmp	r3, #192	; 0xc0
 80065c8:	d82f      	bhi.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d017      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b80      	cmp	r3, #128	; 0x80
 80065d4:	d829      	bhi.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d004      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80065e2:	e022      	b.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e4:	f7fe fd74 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80065e8:	61f8      	str	r0, [r7, #28]
          break;
 80065ea:	e023      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80065ec:	f7fe fcd8 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80065f0:	61f8      	str	r0, [r7, #28]
          break;
 80065f2:	e01f      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80065f4:	40021000 	.word	0x40021000
 80065f8:	02dc6c00 	.word	0x02dc6c00
 80065fc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b9b      	ldr	r3, [pc, #620]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d10f      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800660e:	4b99      	ldr	r3, [pc, #612]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006610:	61fb      	str	r3, [r7, #28]
          break;
 8006612:	e00c      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006614:	4b96      	ldr	r3, [pc, #600]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	61fb      	str	r3, [r7, #28]
          break;
 8006628:	e003      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800662a:	bf00      	nop
 800662c:	e2e0      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800662e:	bf00      	nop
 8006630:	e2de      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006632:	bf00      	nop
        break;
 8006634:	e2dc      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006636:	4b8e      	ldr	r3, [pc, #568]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006648:	d025      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d82c      	bhi.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d013      	beq.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006660:	d824      	bhi.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d004      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006670:	e01c      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006672:	f7fe fd2d 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006676:	61f8      	str	r0, [r7, #28]
          break;
 8006678:	e01d      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800667a:	f7fe fc91 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800667e:	61f8      	str	r0, [r7, #28]
          break;
 8006680:	e019      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006682:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d10f      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006690:	4b78      	ldr	r3, [pc, #480]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006692:	61fb      	str	r3, [r7, #28]
          break;
 8006694:	e00c      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006696:	4b76      	ldr	r3, [pc, #472]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d107      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80066a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a8:	61fb      	str	r3, [r7, #28]
          break;
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80066ac:	bf00      	nop
 80066ae:	e29f      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066b0:	bf00      	nop
 80066b2:	e29d      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066b4:	bf00      	nop
        break;
 80066b6:	e29b      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066b8:	4b6d      	ldr	r3, [pc, #436]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066ca:	d025      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d2:	d82c      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066da:	d013      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e2:	d824      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d004      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80066f2:	e01c      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe fcec 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80066f8:	61f8      	str	r0, [r7, #28]
          break;
 80066fa:	e01d      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80066fc:	f7fe fc50 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8006700:	61f8      	str	r0, [r7, #28]
          break;
 8006702:	e019      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006704:	4b5a      	ldr	r3, [pc, #360]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d10f      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006712:	4b58      	ldr	r3, [pc, #352]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006714:	61fb      	str	r3, [r7, #28]
          break;
 8006716:	e00c      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006718:	4b55      	ldr	r3, [pc, #340]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d107      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672a:	61fb      	str	r3, [r7, #28]
          break;
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800672e:	bf00      	nop
 8006730:	e25e      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006732:	bf00      	nop
 8006734:	e25c      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006736:	bf00      	nop
        break;
 8006738:	e25a      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800673a:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800674c:	d007      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006754:	d12f      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006756:	f7fe fc23 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800675a:	61f8      	str	r0, [r7, #28]
          break;
 800675c:	e02e      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800675e:	4b44      	ldr	r3, [pc, #272]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800676a:	d126      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800676c:	4b40      	ldr	r3, [pc, #256]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006778:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	fb03 f202 	mul.w	r2, r3, r2
 800678c:	4b38      	ldr	r3, [pc, #224]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	091b      	lsrs	r3, r3, #4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	3301      	adds	r3, #1
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	0e5b      	lsrs	r3, r3, #25
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	3301      	adds	r3, #1
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	61fb      	str	r3, [r7, #28]
          break;
 80067b4:	e001      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80067b6:	bf00      	nop
 80067b8:	e21a      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067ba:	bf00      	nop
        break;
 80067bc:	e218      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80067be:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fe fc94 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 80067d4:	61f8      	str	r0, [r7, #28]
        break;
 80067d6:	e20b      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80067d8:	f7fe fbe2 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80067dc:	61f8      	str	r0, [r7, #28]
        break;
 80067de:	e207      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80067e0:	4b23      	ldr	r3, [pc, #140]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e6:	f003 0318 	and.w	r3, r3, #24
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d010      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d834      	bhi.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d024      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006804:	e02d      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006806:	69b9      	ldr	r1, [r7, #24]
 8006808:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800680c:	f001 f820 	bl	8007850 <RCCEx_GetSAIxPeriphCLKFreq>
 8006810:	61f8      	str	r0, [r7, #28]
          break;
 8006812:	e02b      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006814:	4b16      	ldr	r3, [pc, #88]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	d122      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006820:	4b13      	ldr	r3, [pc, #76]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	e005      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006838:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800683a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	61fb      	str	r3, [r7, #28]
          break;
 800684c:	e00b      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685a:	d106      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800685e:	61fb      	str	r3, [r7, #28]
          break;
 8006860:	e003      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006862:	bf00      	nop
 8006864:	e1c4      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006866:	bf00      	nop
 8006868:	e1c2      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800686a:	bf00      	nop
        break;
 800686c:	e1c0      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000
 8006874:	00f42400 	.word	0x00f42400
 8006878:	0800f68c 	.word	0x0800f68c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800687c:	4b96      	ldr	r3, [pc, #600]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688e:	d013      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006896:	d819      	bhi.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a4:	d004      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80068a6:	e011      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fe fc12 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80068ac:	61f8      	str	r0, [r7, #28]
          break;
 80068ae:	e010      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80068b0:	f7fe fb76 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80068b4:	61f8      	str	r0, [r7, #28]
          break;
 80068b6:	e00c      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b8:	4b87      	ldr	r3, [pc, #540]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d104      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80068c6:	4b85      	ldr	r3, [pc, #532]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068c8:	61fb      	str	r3, [r7, #28]
          break;
 80068ca:	e001      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80068cc:	bf00      	nop
 80068ce:	e18f      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068d0:	bf00      	nop
        break;
 80068d2:	e18d      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068d4:	4b80      	ldr	r3, [pc, #512]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e6:	d013      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ee:	d819      	bhi.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fc:	d004      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80068fe:	e011      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fe fbe6 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006904:	61f8      	str	r0, [r7, #28]
          break;
 8006906:	e010      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006908:	f7fe fb4a 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800690c:	61f8      	str	r0, [r7, #28]
          break;
 800690e:	e00c      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006910:	4b71      	ldr	r3, [pc, #452]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691c:	d104      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800691e:	4b6f      	ldr	r3, [pc, #444]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006920:	61fb      	str	r3, [r7, #28]
          break;
 8006922:	e001      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006924:	bf00      	nop
 8006926:	e163      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006928:	bf00      	nop
        break;
 800692a:	e161      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800692c:	4b6a      	ldr	r3, [pc, #424]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800693e:	d013      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006946:	d819      	bhi.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006954:	d004      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006956:	e011      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fbba 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
          break;
 800695e:	e010      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006960:	f7fe fb1e 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8006964:	61f8      	str	r0, [r7, #28]
          break;
 8006966:	e00c      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006968:	4b5b      	ldr	r3, [pc, #364]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d104      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006976:	4b59      	ldr	r3, [pc, #356]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006978:	61fb      	str	r3, [r7, #28]
          break;
 800697a:	e001      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800697c:	bf00      	nop
 800697e:	e137      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006980:	bf00      	nop
        break;
 8006982:	e135      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006984:	4b54      	ldr	r3, [pc, #336]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d011      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d818      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80069a8:	e011      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069aa:	f7fe fb91 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80069ae:	61f8      	str	r0, [r7, #28]
          break;
 80069b0:	e010      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80069b2:	f7fe faf5 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80069b6:	61f8      	str	r0, [r7, #28]
          break;
 80069b8:	e00c      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ba:	4b47      	ldr	r3, [pc, #284]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d104      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80069c8:	4b44      	ldr	r3, [pc, #272]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069ca:	61fb      	str	r3, [r7, #28]
          break;
 80069cc:	e001      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80069ce:	bf00      	nop
 80069d0:	e10e      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069d2:	bf00      	nop
        break;
 80069d4:	e10c      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069d6:	4b40      	ldr	r3, [pc, #256]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069e8:	d02c      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069f0:	d833      	bhi.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069f8:	d01a      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a00:	d82b      	bhi.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a0e:	d004      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006a10:	e023      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fe fb5d 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006a16:	61f8      	str	r0, [r7, #28]
          break;
 8006a18:	e026      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d11a      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006a28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a2c:	61fb      	str	r3, [r7, #28]
          break;
 8006a2e:	e016      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a30:	4b29      	ldr	r3, [pc, #164]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3c:	d111      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006a3e:	4b27      	ldr	r3, [pc, #156]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a40:	61fb      	str	r3, [r7, #28]
          break;
 8006a42:	e00e      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a44:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d109      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a56:	61fb      	str	r3, [r7, #28]
          break;
 8006a58:	e005      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006a5a:	bf00      	nop
 8006a5c:	e0c8      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a5e:	bf00      	nop
 8006a60:	e0c6      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a62:	bf00      	nop
 8006a64:	e0c4      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a66:	bf00      	nop
        break;
 8006a68:	e0c2      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a7c:	d030      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a84:	d837      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a8c:	d01a      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a94:	d82f      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa2:	d004      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006aa4:	e027      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aa6:	f7fe fb13 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006aaa:	61f8      	str	r0, [r7, #28]
          break;
 8006aac:	e02a      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d11e      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006abc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ac0:	61fb      	str	r3, [r7, #28]
          break;
 8006ac2:	e01a      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad0:	d115      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006ad2:	4b02      	ldr	r3, [pc, #8]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006ad4:	61fb      	str	r3, [r7, #28]
          break;
 8006ad6:	e012      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ae0:	4b46      	ldr	r3, [pc, #280]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d109      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af2:	61fb      	str	r3, [r7, #28]
          break;
 8006af4:	e005      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006af6:	bf00      	nop
 8006af8:	e07a      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006afa:	bf00      	nop
 8006afc:	e078      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006afe:	bf00      	nop
 8006b00:	e076      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b02:	bf00      	nop
        break;
 8006b04:	e074      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006b06:	4b3d      	ldr	r3, [pc, #244]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b18:	d02c      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b20:	d855      	bhi.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2e:	d004      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006b30:	e04d      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fe fa35 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8006b36:	61f8      	str	r0, [r7, #28]
          break;
 8006b38:	e04e      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b3a:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d145      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b46:	4b2d      	ldr	r3, [pc, #180]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b52:	4b2a      	ldr	r3, [pc, #168]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	091b      	lsrs	r3, r3, #4
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	e005      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006b5e:	4b27      	ldr	r3, [pc, #156]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	4a25      	ldr	r2, [pc, #148]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	61fb      	str	r3, [r7, #28]
          break;
 8006b72:	e02e      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b74:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d129      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006b82:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8e:	d122      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	0a1b      	lsrs	r3, r3, #8
 8006b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	fb03 f202 	mul.w	r2, r3, r2
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	3301      	adds	r3, #1
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	0d5b      	lsrs	r3, r3, #21
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bca:	61fb      	str	r3, [r7, #28]
          break;
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006bce:	bf00      	nop
 8006bd0:	e00e      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bd2:	bf00      	nop
 8006bd4:	e00c      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bd6:	bf00      	nop
        break;
 8006bd8:	e00a      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bde:	bf00      	nop
 8006be0:	e006      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bee:	bf00      	nop
    }
  }

  return(frequency);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	0800f68c 	.word	0x0800f68c

08006c04 <HAL_RCCEx_EnablePLLSAI1>:
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1Q_VALUE(PLLSAI1Init->PLLSAI1Q));
  assert_param(IS_RCC_PLLSAI1R_VALUE(PLLSAI1Init->PLLSAI1R));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1Init->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c10:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c1c:	f7fa fcda 	bl	80015d4 <HAL_GetTick>
 8006c20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c22:	e009      	b.n	8006c38 <HAL_RCCEx_EnablePLLSAI1+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c24:	f7fa fcd6 	bl	80015d4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d902      	bls.n	8006c38 <HAL_RCCEx_EnablePLLSAI1+0x34>
    {
      status = HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	73fb      	strb	r3, [r7, #15]
      break;
 8006c36:	e005      	b.n	8006c44 <HAL_RCCEx_EnablePLLSAI1+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c38:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1ef      	bne.n	8006c24 <HAL_RCCEx_EnablePLLSAI1+0x20>
    }
  }

  if(status == HAL_OK)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d13f      	bne.n	8006cca <HAL_RCCEx_EnablePLLSAI1+0xc6>
  {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors M, P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1M, PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 8006c4a:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <HAL_RCCEx_EnablePLLSAI1+0xd4>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6852      	ldr	r2, [r2, #4]
 8006c56:	3a01      	subs	r2, #1
 8006c58:	0111      	lsls	r1, r2, #4
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6892      	ldr	r2, [r2, #8]
 8006c5e:	0212      	lsls	r2, r2, #8
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6912      	ldr	r2, [r2, #16]
 8006c66:	0852      	lsrs	r2, r2, #1
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	0552      	lsls	r2, r2, #21
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6952      	ldr	r2, [r2, #20]
 8006c72:	0852      	lsrs	r2, r2, #1
 8006c74:	3a01      	subs	r2, #1
 8006c76:	0652      	lsls	r2, r2, #25
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68d2      	ldr	r2, [r2, #12]
 8006c7e:	06d2      	lsls	r2, r2, #27
 8006c80:	430a      	orrs	r2, r1
 8006c82:	4914      	ldr	r1, [pc, #80]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
    /* Configure the PLLSAI1 Clock output(s) */
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	4910      	ldr	r1, [pc, #64]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c96:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca2:	f7fa fc97 	bl	80015d4 <HAL_GetTick>
 8006ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ca8:	e009      	b.n	8006cbe <HAL_RCCEx_EnablePLLSAI1+0xba>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006caa:	f7fa fc93 	bl	80015d4 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d902      	bls.n	8006cbe <HAL_RCCEx_EnablePLLSAI1+0xba>
      {
        status = HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	73fb      	strb	r3, [r7, #15]
        break;
 8006cbc:	e005      	b.n	8006cca <HAL_RCCEx_EnablePLLSAI1+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <HAL_RCCEx_EnablePLLSAI1+0xd0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ef      	beq.n	8006caa <HAL_RCCEx_EnablePLLSAI1+0xa6>
      }
    }
  }

  return status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	019d800f 	.word	0x019d800f

08006cdc <HAL_RCCEx_DisablePLLSAI1>:
/**
  * @brief  Disable PLLSAI1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006ce6:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cf2:	f7fa fc6f 	bl	80015d4 <HAL_GetTick>
 8006cf6:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI1 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cf8:	e009      	b.n	8006d0e <HAL_RCCEx_DisablePLLSAI1+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cfa:	f7fa fc6b 	bl	80015d4 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d902      	bls.n	8006d0e <HAL_RCCEx_DisablePLLSAI1+0x32>
    {
      status = HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	71fb      	strb	r3, [r7, #7]
      break;
 8006d0c:	e005      	b.n	8006d1a <HAL_RCCEx_DisablePLLSAI1+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d0e:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ef      	bne.n	8006cfa <HAL_RCCEx_DisablePLLSAI1+0x1e>
    }
  }

  /* Disable the PLLSAI1 Clock outputs */
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d28:	6113      	str	r3, [r2, #16]

  /* Reset PLL source to save power if no PLLs on */
#if defined(RCC_PLLSAI2_SUPPORT)
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 5308 	and.w	r3, r3, #570425344	; 0x22000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <HAL_RCCEx_DisablePLLSAI1+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	4a04      	ldr	r2, [pc, #16]	; (8006d4c <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8006d3c:	f023 0303 	bic.w	r3, r3, #3
 8006d40:	60d3      	str	r3, [r2, #12]
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
  }
#endif /* RCC_PLLSAI2_SUPPORT */

  return status;
 8006d42:	79fb      	ldrb	r3, [r7, #7]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40021000 	.word	0x40021000

08006d50 <HAL_RCCEx_EnablePLLSAI2>:
  * @param  PLLSAI2Init  pointer to an RCC_PLLSAI2InitTypeDef structure that
  *         contains the configuration information for the PLLSAI2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI2(RCC_PLLSAI2InitTypeDef  *PLLSAI2Init)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  assert_param(IS_RCC_PLLSAI2R_VALUE(PLLSAI2Init->PLLSAI2R));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PLLSAI2Init->PLLSAI2ClockOut));

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8006d5c:	4b30      	ldr	r3, [pc, #192]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2f      	ldr	r2, [pc, #188]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d68:	f7fa fc34 	bl	80015d4 <HAL_GetTick>
 8006d6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI2 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d6e:	e009      	b.n	8006d84 <HAL_RCCEx_EnablePLLSAI2+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d70:	f7fa fc30 	bl	80015d4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d902      	bls.n	8006d84 <HAL_RCCEx_EnablePLLSAI2+0x34>
    {
      status = HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	73fb      	strb	r3, [r7, #15]
      break;
 8006d82:	e005      	b.n	8006d90 <HAL_RCCEx_EnablePLLSAI2+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d84:	4b26      	ldr	r3, [pc, #152]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ef      	bne.n	8006d70 <HAL_RCCEx_EnablePLLSAI2+0x20>
    }
  }

  if(status == HAL_OK)
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d13f      	bne.n	8006e16 <HAL_RCCEx_EnablePLLSAI2+0xc6>
  {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT) && defined(RCC_PLLSAI2Q_DIV_SUPPORT)
    /* Configure the PLLSAI2 Multiplication factor N */
    /* Configure the PLLSAI2 Division factors M, P, Q and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2M, PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2Q, PLLSAI2Init->PLLSAI2R);
 8006d96:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	4b22      	ldr	r3, [pc, #136]	; (8006e24 <HAL_RCCEx_EnablePLLSAI2+0xd4>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6852      	ldr	r2, [r2, #4]
 8006da2:	3a01      	subs	r2, #1
 8006da4:	0111      	lsls	r1, r2, #4
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6892      	ldr	r2, [r2, #8]
 8006daa:	0212      	lsls	r2, r2, #8
 8006dac:	4311      	orrs	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6912      	ldr	r2, [r2, #16]
 8006db2:	0852      	lsrs	r2, r2, #1
 8006db4:	3a01      	subs	r2, #1
 8006db6:	0552      	lsls	r2, r2, #21
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6952      	ldr	r2, [r2, #20]
 8006dbe:	0852      	lsrs	r2, r2, #1
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0652      	lsls	r2, r2, #25
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68d2      	ldr	r2, [r2, #12]
 8006dca:	06d2      	lsls	r2, r2, #27
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	4914      	ldr	r1, [pc, #80]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	614b      	str	r3, [r1, #20]
    /* Configure the PLLSAI2 Multiplication factor N */
    /* Configure the PLLSAI2 Division factors P and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */
    /* Configure the PLLSAI2 Clock output(s) */
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	614b      	str	r3, [r1, #20]

    /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
    __HAL_RCC_PLLSAI2_ENABLE();
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dee:	f7fa fbf1 	bl	80015d4 <HAL_GetTick>
 8006df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006df4:	e009      	b.n	8006e0a <HAL_RCCEx_EnablePLLSAI2+0xba>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006df6:	f7fa fbed 	bl	80015d4 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d902      	bls.n	8006e0a <HAL_RCCEx_EnablePLLSAI2+0xba>
      {
        status = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	73fb      	strb	r3, [r7, #15]
        break;
 8006e08:	e005      	b.n	8006e16 <HAL_RCCEx_EnablePLLSAI2+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCCEx_EnablePLLSAI2+0xd0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0ef      	beq.n	8006df6 <HAL_RCCEx_EnablePLLSAI2+0xa6>
      }
    }
  }

  return status;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	019d800f 	.word	0x019d800f

08006e28 <HAL_RCCEx_DisablePLLSAI2>:
/**
  * @brief  Disable PLLISAI2.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI2(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8006e32:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e3e:	f7fa fbc9 	bl	80015d4 <HAL_GetTick>
 8006e42:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI2 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e44:	e009      	b.n	8006e5a <HAL_RCCEx_DisablePLLSAI2+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e46:	f7fa fbc5 	bl	80015d4 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d902      	bls.n	8006e5a <HAL_RCCEx_DisablePLLSAI2+0x32>
    {
      status = HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	71fb      	strb	r3, [r7, #7]
      break;
 8006e58:	e005      	b.n	8006e66 <HAL_RCCEx_DisablePLLSAI2+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ef      	bne.n	8006e46 <HAL_RCCEx_DisablePLLSAI2+0x1e>
    }
  }

  /* Disable the PLLSAI2 Clock outputs */
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2QEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e74:	6153      	str	r3, [r2, #20]
#else
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */

  /* Reset PLL source to save power if no PLLs on */
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <HAL_RCCEx_DisablePLLSAI2+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8006e88:	f023 0303 	bic.w	r3, r3, #3
 8006e8c:	60d3      	str	r3, [r2, #12]
  }

  return status;
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40021000 	.word	0x40021000

08006e9c <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006eac:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	608b      	str	r3, [r1, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_RCCEx_StandbyMSIRangeConfig>:
  *            @arg @ref RCC_MSIRANGE_6  Range 6 around 4 MHz (reset value)
  *            @arg @ref RCC_MSIRANGE_7  Range 7 around 8 MHz
  * @retval None
  */
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_MSI_STANDBY_CLOCK_RANGE(MSIRange));

  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 8006ecc:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8006ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	4905      	ldr	r1, [pc, #20]	; (8006ef0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000

08006ef4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_RCCEx_EnableLSECSS+0x20>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	4a05      	ldr	r2, [pc, #20]	; (8006f14 <HAL_RCCEx_EnableLSECSS+0x20>)
 8006f00:	f043 0320 	orr.w	r3, r3, #32
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40021000 	.word	0x40021000

08006f18 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	4a08      	ldr	r2, [pc, #32]	; (8006f44 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8006f24:	f023 0320 	bic.w	r3, r3, #32
 8006f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	4a04      	ldr	r2, [pc, #16]	; (8006f44 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8006f32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f36:	6193      	str	r3, [r2, #24]
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40021000 	.word	0x40021000

08006f48 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on RTC EXTI line 19
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8006f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f66:	6193      	str	r3, [r2, #24]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8006f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f72:	6013      	str	r3, [r2, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8006f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f7e:	6093      	str	r3, [r2, #8]
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	40010400 	.word	0x40010400

08006f94 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d105      	bne.n	8006fb2 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 8006fa6:	f000 f809 	bl	8006fbc <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 8006faa:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 8006fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb0:	621a      	str	r2, [r3, #32]
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08a      	sub	sp, #40	; 0x28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8006fde:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fea:	4b2a      	ldr	r3, [pc, #168]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8006ff6:	2304      	movs	r3, #4
 8006ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ffe:	2302      	movs	r3, #2
 8007000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8007006:	f107 0310 	add.w	r3, r7, #16
 800700a:	4619      	mov	r1, r3
 800700c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007010:	f7fb fd96 	bl	8002b40 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007014:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10e      	bne.n	800703e <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007020:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702a:	6593      	str	r3, [r2, #88]	; 0x58
 800702c:	4b19      	ldr	r3, [pc, #100]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 800702e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800703e:	4b16      	ldr	r3, [pc, #88]	; (8007098 <HAL_RCCEx_EnableLSCO+0xce>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 800704a:	f7fc f8a9 	bl	80031a0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4313      	orrs	r3, r2
 8007062:	4a0c      	ldr	r2, [pc, #48]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  if(backupchanged == SET)
 800706c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8007074:	f7fc f8a4 	bl	80031c0 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707c:	2b01      	cmp	r3, #1
 800707e:	d105      	bne.n	800708c <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	4a03      	ldr	r2, [pc, #12]	; (8007094 <HAL_RCCEx_EnableLSCO+0xca>)
 8007086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708a:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 800708c:	bf00      	nop
 800708e:	3728      	adds	r7, #40	; 0x28
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000
 8007098:	40007000 	.word	0x40007000

0800709c <HAL_RCCEx_DisableLSCO>:
/**
  * @brief  Disable the Low Speed clock output.
  * @retval None
  */
void HAL_RCCEx_DisableLSCO(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  FlagStatus       pwrclkchanged = RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	71fb      	strb	r3, [r7, #7]
  FlagStatus       backupchanged = RESET;
 80070a6:	2300      	movs	r3, #0
 80070a8:	71bb      	strb	r3, [r7, #6]

  /* Update LSCOEN bit in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070aa:	4b1c      	ldr	r3, [pc, #112]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10d      	bne.n	80070d2 <HAL_RCCEx_DisableLSCO+0x36>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80070b6:	4b19      	ldr	r3, [pc, #100]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	4a18      	ldr	r2, [pc, #96]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6593      	str	r3, [r2, #88]	; 0x58
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
    pwrclkchanged = SET;
 80070ce:	2301      	movs	r3, #1
 80070d0:	71fb      	strb	r3, [r7, #7]
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d2:	4b13      	ldr	r3, [pc, #76]	; (8007120 <HAL_RCCEx_DisableLSCO+0x84>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <HAL_RCCEx_DisableLSCO+0x4a>
  {
    /* Enable access to the backup domain */
    HAL_PWR_EnableBkUpAccess();
 80070de:	f7fc f85f 	bl	80031a0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80070e2:	2301      	movs	r3, #1
 80070e4:	71bb      	strb	r3, [r7, #6]
  }

  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	4a0b      	ldr	r2, [pc, #44]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 80070ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Restore previous configuration */
  if(backupchanged == SET)
 80070f6:	79bb      	ldrb	r3, [r7, #6]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_RCCEx_DisableLSCO+0x64>
  {
    /* Disable access to the backup domain */
    HAL_PWR_DisableBkUpAccess();
 80070fc:	f7fc f860 	bl	80031c0 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d105      	bne.n	8007112 <HAL_RCCEx_DisableLSCO+0x76>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 8007108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710a:	4a04      	ldr	r2, [pc, #16]	; (800711c <HAL_RCCEx_DisableLSCO+0x80>)
 800710c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007110:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40021000 	.word	0x40021000
 8007120:	40007000 	.word	0x40007000

08007124 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	6013      	str	r3, [r2, #0]
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000

08007144 <HAL_RCCEx_DisableMSIPLLMode>:
  * @brief  Disable the PLL-mode of the MSI.
  * @note   PLL-mode of the MSI is automatically reset when LSE oscillator is disabled.
  * @retval None
  */
void HAL_RCCEx_DisableMSIPLLMode(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800714e:	f023 0304 	bic.w	r3, r3, #4
 8007152:	6013      	str	r3, [r2, #0]
}
 8007154:	bf00      	nop
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000

08007164 <HAL_RCCEx_OCTOSPIDelayConfig>:
  * @param  Delay2  OCTOSPI2 DQS delay
  * @note   Delay parameters stand for unitary delays from 0 to 15. Actual delay is Delay1 or Delay2 + 1.
  * @retval None
  */
void HAL_RCCEx_OCTOSPIDelayConfig(uint32_t Delay1, uint32_t Delay2)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RCC_OCTOSPIDELAY(Delay1));
  assert_param(IS_RCC_OCTOSPIDELAY(Delay2));

  MODIFY_REG(RCC->DLYCFGR, RCC_DLYCFGR_OCTOSPI1_DLY|RCC_DLYCFGR_OCTOSPI2_DLY, (Delay1 | (Delay2 << RCC_DLYCFGR_OCTOSPI2_DLY_Pos))) ;
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_RCCEx_OCTOSPIDelayConfig+0x30>)
 8007170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007174:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	0119      	lsls	r1, r3, #4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	430b      	orrs	r3, r1
 8007180:	4904      	ldr	r1, [pc, #16]	; (8007194 <HAL_RCCEx_OCTOSPIDelayConfig+0x30>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40021000 	.word	0x40021000

08007198 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <HAL_RCCEx_CRSConfig+0x7c>)
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <HAL_RCCEx_CRSConfig+0x7c>)
 80071a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071aa:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCCEx_CRSConfig+0x7c>)
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_RCCEx_CRSConfig+0x7c>)
 80071b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b6:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80071e0:	4a0d      	ldr	r2, [pc, #52]	; (8007218 <HAL_RCCEx_CRSConfig+0x80>)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_RCCEx_CRSConfig+0x80>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	4908      	ldr	r1, [pc, #32]	; (8007218 <HAL_RCCEx_CRSConfig+0x80>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <HAL_RCCEx_CRSConfig+0x80>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a06      	ldr	r2, [pc, #24]	; (8007218 <HAL_RCCEx_CRSConfig+0x80>)
 8007200:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007204:	6013      	str	r3, [r2, #0]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40021000 	.word	0x40021000
 8007218:	40006000 	.word	0x40006000

0800721c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
 8007226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722a:	6013      	str	r3, [r2, #0]
}
 800722c:	bf00      	nop
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40006000 	.word	0x40006000

0800723c <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
 8007244:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	60da      	str	r2, [r3, #12]
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	40006000 	.word	0x40006000

08007284 <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007290:	f7fa f9a0 	bl	80015d4 <HAL_GetTick>
 8007294:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or timeout detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d00c      	beq.n	80072b8 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fa f999 	bl	80015d4 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <HAL_RCCEx_CRSWaitSynchronization+0x30>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
 80072b4:	2301      	movs	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 80072b8:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f043 0302 	orr.w	r3, r3, #2
 80072ca:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 80072cc:	4b25      	ldr	r3, [pc, #148]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d106      	bne.n	80072ec <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f043 0304 	orr.w	r3, r3, #4
 80072e4:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
 80072e6:	4b1f      	ldr	r3, [pc, #124]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 80072ec:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f8:	d106      	bne.n	8007308 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f043 0320 	orr.w	r3, r3, #32
 8007300:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 8007304:	2204      	movs	r2, #4
 8007306:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 8007308:	4b16      	ldr	r3, [pc, #88]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007314:	d106      	bne.n	8007324 <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 8007320:	2204      	movs	r2, #4
 8007322:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800732c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007330:	d106      	bne.n	8007340 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f043 0310 	orr.w	r3, r3, #16
 8007338:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
 800733a:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 800733c:	2204      	movs	r2, #4
 800733e:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 8007340:	4b08      	ldr	r3, [pc, #32]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b08      	cmp	r3, #8
 800734a:	d102      	bne.n	8007352 <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
 800734e:	2208      	movs	r2, #8
 8007350:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d09e      	beq.n	8007296 <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40006000 	.word	0x40006000

08007368 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
 8007372:	4b33      	ldr	r3, [pc, #204]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 8007378:	4b31      	ldr	r3, [pc, #196]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <HAL_RCCEx_CRS_IRQHandler+0x36>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 8007392:	4b2b      	ldr	r3, [pc, #172]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 8007394:	2201      	movs	r2, #1
 8007396:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
 8007398:	f000 f854 	bl	8007444 <HAL_RCCEx_CRS_SyncOkCallback>
 800739c:	e04b      	b.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_CRS_IRQHandler+0x56>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 80073b4:	2202      	movs	r2, #2
 80073b6:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
 80073b8:	f000 f84b 	bl	8007452 <HAL_RCCEx_CRS_SyncWarnCallback>
 80073bc:	e03b      	b.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_RCCEx_CRS_IRQHandler+0x76>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 80073d2:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 80073d4:	2208      	movs	r2, #8
 80073d6:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 80073d8:	f000 f842 	bl	8007460 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 80073dc:	e02b      	b.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d026      	beq.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d021      	beq.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f043 0308 	orr.w	r3, r3, #8
 8007402:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f043 0310 	orr.w	r3, r3, #16
 8007414:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f043 0320 	orr.w	r3, r3, #32
 8007426:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
 800742a:	2204      	movs	r2, #4
 800742c:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f81d 	bl	800746e <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
 8007434:	e7ff      	b.n	8007436 <HAL_RCCEx_CRS_IRQHandler+0xce>
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40006000 	.word	0x40006000

08007444 <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
 8007452:	b480      	push	{r7}
 8007454:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007490:	4b71      	ldr	r3, [pc, #452]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00e      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800749c:	4b6e      	ldr	r3, [pc, #440]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0203 	and.w	r2, r3, #3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d103      	bne.n	80074b4 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
       ||
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d142      	bne.n	800753a <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e03f      	b.n	800753a <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d018      	beq.n	80074f4 <RCCEx_PLLSAI1_Config+0x72>
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d825      	bhi.n	8007512 <RCCEx_PLLSAI1_Config+0x90>
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d002      	beq.n	80074d0 <RCCEx_PLLSAI1_Config+0x4e>
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d009      	beq.n	80074e2 <RCCEx_PLLSAI1_Config+0x60>
 80074ce:	e020      	b.n	8007512 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074d0:	4b61      	ldr	r3, [pc, #388]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11d      	bne.n	8007518 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e0:	e01a      	b.n	8007518 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074e2:	4b5d      	ldr	r3, [pc, #372]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d116      	bne.n	800751c <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f2:	e013      	b.n	800751c <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074f4:	4b58      	ldr	r3, [pc, #352]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10f      	bne.n	8007520 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007500:	4b55      	ldr	r3, [pc, #340]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007510:	e006      	b.n	8007520 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
      break;
 8007516:	e004      	b.n	8007522 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007518:	bf00      	nop
 800751a:	e002      	b.n	8007522 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800751c:	bf00      	nop
 800751e:	e000      	b.n	8007522 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007520:	bf00      	nop
    }

    if(status == HAL_OK)
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d108      	bne.n	800753a <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007528:	4b4b      	ldr	r3, [pc, #300]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f023 0203 	bic.w	r2, r3, #3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4948      	ldr	r1, [pc, #288]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007536:	4313      	orrs	r3, r2
 8007538:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 8086 	bne.w	800764e <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007542:	4b45      	ldr	r3, [pc, #276]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a44      	ldr	r2, [pc, #272]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800754c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754e:	f7fa f841 	bl	80015d4 <HAL_GetTick>
 8007552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007554:	e009      	b.n	800756a <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007556:	f7fa f83d 	bl	80015d4 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d902      	bls.n	800756a <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	73fb      	strb	r3, [r7, #15]
        break;
 8007568:	e005      	b.n	8007576 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800756a:	4b3b      	ldr	r3, [pc, #236]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1ef      	bne.n	8007556 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d168      	bne.n	800764e <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d113      	bne.n	80075aa <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007582:	4b35      	ldr	r3, [pc, #212]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	4b35      	ldr	r3, [pc, #212]	; (800765c <RCCEx_PLLSAI1_Config+0x1da>)
 8007588:	4013      	ands	r3, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6892      	ldr	r2, [r2, #8]
 800758e:	0211      	lsls	r1, r2, #8
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68d2      	ldr	r2, [r2, #12]
 8007594:	06d2      	lsls	r2, r2, #27
 8007596:	4311      	orrs	r1, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6852      	ldr	r2, [r2, #4]
 800759c:	3a01      	subs	r2, #1
 800759e:	0112      	lsls	r2, r2, #4
 80075a0:	430a      	orrs	r2, r1
 80075a2:	492d      	ldr	r1, [pc, #180]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	610b      	str	r3, [r1, #16]
 80075a8:	e02d      	b.n	8007606 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d115      	bne.n	80075dc <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075b0:	4b29      	ldr	r3, [pc, #164]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	4b2a      	ldr	r3, [pc, #168]	; (8007660 <RCCEx_PLLSAI1_Config+0x1de>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6892      	ldr	r2, [r2, #8]
 80075bc:	0211      	lsls	r1, r2, #8
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6912      	ldr	r2, [r2, #16]
 80075c2:	0852      	lsrs	r2, r2, #1
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0552      	lsls	r2, r2, #21
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6852      	ldr	r2, [r2, #4]
 80075ce:	3a01      	subs	r2, #1
 80075d0:	0112      	lsls	r2, r2, #4
 80075d2:	430a      	orrs	r2, r1
 80075d4:	4920      	ldr	r1, [pc, #128]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	610b      	str	r3, [r1, #16]
 80075da:	e014      	b.n	8007606 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075dc:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	4b20      	ldr	r3, [pc, #128]	; (8007664 <RCCEx_PLLSAI1_Config+0x1e2>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6892      	ldr	r2, [r2, #8]
 80075e8:	0211      	lsls	r1, r2, #8
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6952      	ldr	r2, [r2, #20]
 80075ee:	0852      	lsrs	r2, r2, #1
 80075f0:	3a01      	subs	r2, #1
 80075f2:	0652      	lsls	r2, r2, #25
 80075f4:	4311      	orrs	r1, r2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6852      	ldr	r2, [r2, #4]
 80075fa:	3a01      	subs	r2, #1
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	430a      	orrs	r2, r1
 8007600:	4915      	ldr	r1, [pc, #84]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007602:	4313      	orrs	r3, r2
 8007604:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a13      	ldr	r2, [pc, #76]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 800760c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007610:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7f9 ffdf 	bl	80015d4 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007618:	e009      	b.n	800762e <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800761a:	f7f9 ffdb 	bl	80015d4 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d902      	bls.n	800762e <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	73fb      	strb	r3, [r7, #15]
          break;
 800762c:	e005      	b.n	800763a <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800762e:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0ef      	beq.n	800761a <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d106      	bne.n	800764e <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	4903      	ldr	r1, [pc, #12]	; (8007658 <RCCEx_PLLSAI1_Config+0x1d6>)
 800764a:	4313      	orrs	r3, r2
 800764c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40021000 	.word	0x40021000
 800765c:	07ff800f 	.word	0x07ff800f
 8007660:	ff9f800f 	.word	0xff9f800f
 8007664:	f9ff800f 	.word	0xf9ff800f

08007668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007676:	4b72      	ldr	r3, [pc, #456]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007682:	4b6f      	ldr	r3, [pc, #444]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0203 	and.w	r2, r3, #3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d103      	bne.n	800769a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
       ||
 8007696:	2b00      	cmp	r3, #0
 8007698:	d142      	bne.n	8007720 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e03f      	b.n	8007720 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d018      	beq.n	80076da <RCCEx_PLLSAI2_Config+0x72>
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d825      	bhi.n	80076f8 <RCCEx_PLLSAI2_Config+0x90>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d002      	beq.n	80076b6 <RCCEx_PLLSAI2_Config+0x4e>
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d009      	beq.n	80076c8 <RCCEx_PLLSAI2_Config+0x60>
 80076b4:	e020      	b.n	80076f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076b6:	4b62      	ldr	r3, [pc, #392]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d11d      	bne.n	80076fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076c6:	e01a      	b.n	80076fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076c8:	4b5d      	ldr	r3, [pc, #372]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d116      	bne.n	8007702 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d8:	e013      	b.n	8007702 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076da:	4b59      	ldr	r3, [pc, #356]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10f      	bne.n	8007706 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076e6:	4b56      	ldr	r3, [pc, #344]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076f6:	e006      	b.n	8007706 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e004      	b.n	8007708 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007706:	bf00      	nop
    }

    if(status == HAL_OK)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800770e:	4b4c      	ldr	r3, [pc, #304]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f023 0203 	bic.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4949      	ldr	r1, [pc, #292]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 800771c:	4313      	orrs	r3, r2
 800771e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 8086 	bne.w	8007834 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007728:	4b45      	ldr	r3, [pc, #276]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a44      	ldr	r2, [pc, #272]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 800772e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007734:	f7f9 ff4e 	bl	80015d4 <HAL_GetTick>
 8007738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800773a:	e009      	b.n	8007750 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800773c:	f7f9 ff4a 	bl	80015d4 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d902      	bls.n	8007750 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	73fb      	strb	r3, [r7, #15]
        break;
 800774e:	e005      	b.n	800775c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007750:	4b3b      	ldr	r3, [pc, #236]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1ef      	bne.n	800773c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d168      	bne.n	8007834 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d113      	bne.n	8007790 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007768:	4b35      	ldr	r3, [pc, #212]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	4b35      	ldr	r3, [pc, #212]	; (8007844 <RCCEx_PLLSAI2_Config+0x1dc>)
 800776e:	4013      	ands	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6892      	ldr	r2, [r2, #8]
 8007774:	0211      	lsls	r1, r2, #8
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	68d2      	ldr	r2, [r2, #12]
 800777a:	06d2      	lsls	r2, r2, #27
 800777c:	4311      	orrs	r1, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6852      	ldr	r2, [r2, #4]
 8007782:	3a01      	subs	r2, #1
 8007784:	0112      	lsls	r2, r2, #4
 8007786:	430a      	orrs	r2, r1
 8007788:	492d      	ldr	r1, [pc, #180]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 800778a:	4313      	orrs	r3, r2
 800778c:	614b      	str	r3, [r1, #20]
 800778e:	e02d      	b.n	80077ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d115      	bne.n	80077c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <RCCEx_PLLSAI2_Config+0x1e0>)
 800779c:	4013      	ands	r3, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6892      	ldr	r2, [r2, #8]
 80077a2:	0211      	lsls	r1, r2, #8
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6912      	ldr	r2, [r2, #16]
 80077a8:	0852      	lsrs	r2, r2, #1
 80077aa:	3a01      	subs	r2, #1
 80077ac:	0552      	lsls	r2, r2, #21
 80077ae:	4311      	orrs	r1, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6852      	ldr	r2, [r2, #4]
 80077b4:	3a01      	subs	r2, #1
 80077b6:	0112      	lsls	r2, r2, #4
 80077b8:	430a      	orrs	r2, r1
 80077ba:	4921      	ldr	r1, [pc, #132]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	614b      	str	r3, [r1, #20]
 80077c0:	e014      	b.n	80077ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077c2:	4b1f      	ldr	r3, [pc, #124]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077c4:	695a      	ldr	r2, [r3, #20]
 80077c6:	4b21      	ldr	r3, [pc, #132]	; (800784c <RCCEx_PLLSAI2_Config+0x1e4>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6892      	ldr	r2, [r2, #8]
 80077ce:	0211      	lsls	r1, r2, #8
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6952      	ldr	r2, [r2, #20]
 80077d4:	0852      	lsrs	r2, r2, #1
 80077d6:	3a01      	subs	r2, #1
 80077d8:	0652      	lsls	r2, r2, #25
 80077da:	4311      	orrs	r1, r2
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6852      	ldr	r2, [r2, #4]
 80077e0:	3a01      	subs	r2, #1
 80077e2:	0112      	lsls	r2, r2, #4
 80077e4:	430a      	orrs	r2, r1
 80077e6:	4916      	ldr	r1, [pc, #88]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80077ec:	4b14      	ldr	r3, [pc, #80]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a13      	ldr	r2, [pc, #76]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f8:	f7f9 feec 	bl	80015d4 <HAL_GetTick>
 80077fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077fe:	e009      	b.n	8007814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007800:	f7f9 fee8 	bl	80015d4 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d902      	bls.n	8007814 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	73fb      	strb	r3, [r7, #15]
          break;
 8007812:	e005      	b.n	8007820 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007814:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0ef      	beq.n	8007800 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	4904      	ldr	r1, [pc, #16]	; (8007840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007830:	4313      	orrs	r3, r2
 8007832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40021000 	.word	0x40021000
 8007844:	07ff800f 	.word	0x07ff800f
 8007848:	ff9f800f 	.word	0xff9f800f
 800784c:	f9ff800f 	.word	0xf9ff800f

08007850 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786c:	d10b      	bne.n	8007886 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800786e:	4b7e      	ldr	r3, [pc, #504]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007870:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007874:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007878:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b60      	cmp	r3, #96	; 0x60
 800787e:	d112      	bne.n	80078a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007880:	4b7a      	ldr	r3, [pc, #488]	; (8007a6c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e00f      	b.n	80078a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d10b      	bne.n	80078a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800788e:	4b76      	ldr	r3, [pc, #472]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007898:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078a0:	d101      	bne.n	80078a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80078a2:	4b72      	ldr	r3, [pc, #456]	; (8007a6c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80078a4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f040 80d6 	bne.w	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d003      	beq.n	80078c0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078be:	d13b      	bne.n	8007938 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80078c0:	4b69      	ldr	r3, [pc, #420]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078cc:	f040 80c4 	bne.w	8007a58 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80078d0:	4b65      	ldr	r3, [pc, #404]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80bd 	beq.w	8007a58 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078de:	4b62      	ldr	r3, [pc, #392]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	3301      	adds	r3, #1
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078f2:	4b5d      	ldr	r3, [pc, #372]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80078fe:	4b5a      	ldr	r3, [pc, #360]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	0edb      	lsrs	r3, r3, #27
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007910:	4b55      	ldr	r3, [pc, #340]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800791c:	2311      	movs	r3, #17
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e001      	b.n	8007926 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007922:	2307      	movs	r3, #7
 8007924:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	fb03 f202 	mul.w	r2, r3, r2
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007936:	e08f      	b.n	8007a58 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d13a      	bne.n	80079b4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800793e:	4b4a      	ldr	r3, [pc, #296]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800794a:	f040 8086 	bne.w	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800794e:	4b46      	ldr	r3, [pc, #280]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d07f      	beq.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800795a:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	3301      	adds	r3, #1
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800796e:	4b3e      	ldr	r3, [pc, #248]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007978:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800797a:	4b3b      	ldr	r3, [pc, #236]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	0edb      	lsrs	r3, r3, #27
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007998:	2311      	movs	r3, #17
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e001      	b.n	80079a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800799e:	2307      	movs	r3, #7
 80079a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	fb03 f202 	mul.w	r2, r3, r2
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	e052      	b.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d003      	beq.n	80079c2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d109      	bne.n	80079d6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ce:	d144      	bne.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80079d0:	4b27      	ldr	r3, [pc, #156]	; (8007a70 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80079d2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079d4:	e041      	b.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d003      	beq.n	80079e4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e2:	d13a      	bne.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80079e4:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f0:	d133      	bne.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80079f2:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02d      	beq.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	091b      	lsrs	r3, r3, #4
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	3301      	adds	r3, #1
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a10:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	0a1b      	lsrs	r3, r3, #8
 8007a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	0edb      	lsrs	r3, r3, #27
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007a3c:	2311      	movs	r3, #17
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e001      	b.n	8007a46 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007a42:	2307      	movs	r3, #7
 8007a44:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	fb03 f202 	mul.w	r2, r3, r2
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e000      	b.n	8007a5a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007a58:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3724      	adds	r7, #36	; 0x24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	001fff68 	.word	0x001fff68
 8007a70:	00f42400 	.word	0x00f42400

08007a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e095      	b.n	8007bb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d108      	bne.n	8007aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a96:	d009      	beq.n	8007aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	61da      	str	r2, [r3, #28]
 8007a9e:	e005      	b.n	8007aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7f9 fa96 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007aec:	d902      	bls.n	8007af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e002      	b.n	8007afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b02:	d007      	beq.n	8007b14 <HAL_SPI_Init+0xa0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b56:	ea42 0103 	orr.w	r1, r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	f003 0204 	and.w	r2, r3, #4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b82:	f003 0308 	and.w	r3, r3, #8
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b90:	ea42 0103 	orr.w	r1, r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e01a      	b.n	8007c02 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7f9 fa49 	bl	800107c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b088      	sub	sp, #32
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_SPI_Transmit+0x22>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e158      	b.n	8007f06 <HAL_SPI_Transmit+0x2d4>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c5c:	f7f9 fcba 	bl	80015d4 <HAL_GetTick>
 8007c60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d002      	beq.n	8007c78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
 8007c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c76:	e13d      	b.n	8007ef4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_SPI_Transmit+0x52>
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c88:	e134      	b.n	8007ef4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	88fa      	ldrh	r2, [r7, #6]
 8007ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd4:	d10f      	bne.n	8007cf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b40      	cmp	r3, #64	; 0x40
 8007d02:	d007      	beq.n	8007d14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d1c:	d94b      	bls.n	8007db6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Transmit+0xfa>
 8007d26:	8afb      	ldrh	r3, [r7, #22]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d13e      	bne.n	8007daa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d50:	e02b      	b.n	8007daa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d112      	bne.n	8007d86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d84:	e011      	b.n	8007daa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d86:	f7f9 fc25 	bl	80015d4 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d803      	bhi.n	8007d9e <HAL_SPI_Transmit+0x16c>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d102      	bne.n	8007da4 <HAL_SPI_Transmit+0x172>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007da8:	e0a4      	b.n	8007ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1ce      	bne.n	8007d52 <HAL_SPI_Transmit+0x120>
 8007db4:	e07c      	b.n	8007eb0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_SPI_Transmit+0x192>
 8007dbe:	8afb      	ldrh	r3, [r7, #22]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d170      	bne.n	8007ea6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d912      	bls.n	8007df4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	881a      	ldrh	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	1c9a      	adds	r2, r3, #2
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b02      	subs	r3, #2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007df2:	e058      	b.n	8007ea6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	7812      	ldrb	r2, [r2, #0]
 8007e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e1a:	e044      	b.n	8007ea6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d12b      	bne.n	8007e82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d912      	bls.n	8007e5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	881a      	ldrh	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b02      	subs	r3, #2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e58:	e025      	b.n	8007ea6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e80:	e011      	b.n	8007ea6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e82:	f7f9 fba7 	bl	80015d4 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d803      	bhi.n	8007e9a <HAL_SPI_Transmit+0x268>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d102      	bne.n	8007ea0 <HAL_SPI_Transmit+0x26e>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ea4:	e026      	b.n	8007ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1b5      	bne.n	8007e1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f002 fa47 	bl	800a348 <SPI_EndRxTxTransaction>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e000      	b.n	8007ef4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007ef2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af02      	add	r7, sp, #8
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2a:	d112      	bne.n	8007f52 <HAL_SPI_Receive+0x44>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10e      	bne.n	8007f52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2204      	movs	r2, #4
 8007f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f910 	bl	800816e <HAL_SPI_TransmitReceive>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e109      	b.n	8008166 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_SPI_Receive+0x52>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e102      	b.n	8008166 <HAL_SPI_Receive+0x258>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f68:	f7f9 fb34 	bl	80015d4 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d002      	beq.n	8007f80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f7e:	e0e9      	b.n	8008154 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_SPI_Receive+0x7e>
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f90:	e0e0      	b.n	8008154 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2204      	movs	r2, #4
 8007f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	88fa      	ldrh	r2, [r7, #6]
 8007faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fdc:	d908      	bls.n	8007ff0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	e007      	b.n	8008000 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ffe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008008:	d10f      	bne.n	800802a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008028:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d007      	beq.n	8008048 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008046:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008050:	d867      	bhi.n	8008122 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008052:	e030      	b.n	80080b6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d117      	bne.n	8008092 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f103 020c 	add.w	r2, r3, #12
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008090:	e011      	b.n	80080b6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008092:	f7f9 fa9f 	bl	80015d4 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d803      	bhi.n	80080aa <HAL_SPI_Receive+0x19c>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d102      	bne.n	80080b0 <HAL_SPI_Receive+0x1a2>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080b4:	e04e      	b.n	8008154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1c8      	bne.n	8008054 <HAL_SPI_Receive+0x146>
 80080c2:	e034      	b.n	800812e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d115      	bne.n	80080fe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	b292      	uxth	r2, r2
 80080de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	1c9a      	adds	r2, r3, #2
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80080fc:	e011      	b.n	8008122 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080fe:	f7f9 fa69 	bl	80015d4 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d803      	bhi.n	8008116 <HAL_SPI_Receive+0x208>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d102      	bne.n	800811c <HAL_SPI_Receive+0x20e>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008120:	e018      	b.n	8008154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1ca      	bne.n	80080c4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f002 f8b0 	bl	800a298 <SPI_EndRxTransaction>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	75fb      	strb	r3, [r7, #23]
 8008150:	e000      	b.n	8008154 <HAL_SPI_Receive+0x246>
  }

error :
 8008152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08a      	sub	sp, #40	; 0x28
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800817c:	2301      	movs	r3, #1
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_SPI_TransmitReceive+0x26>
 8008190:	2302      	movs	r3, #2
 8008192:	e1fb      	b.n	800858c <HAL_SPI_TransmitReceive+0x41e>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800819c:	f7f9 fa1a 	bl	80015d4 <HAL_GetTick>
 80081a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80081b4:	887b      	ldrh	r3, [r7, #2]
 80081b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081b8:	7efb      	ldrb	r3, [r7, #27]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d00e      	beq.n	80081dc <HAL_SPI_TransmitReceive+0x6e>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c4:	d106      	bne.n	80081d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <HAL_SPI_TransmitReceive+0x66>
 80081ce:	7efb      	ldrb	r3, [r7, #27]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d003      	beq.n	80081dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
 80081d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081da:	e1cd      	b.n	8008578 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x80>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x80>
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081f4:	e1c0      	b.n	8008578 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d003      	beq.n	800820a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2205      	movs	r2, #5
 8008206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	887a      	ldrh	r2, [r7, #2]
 800821a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	887a      	ldrh	r2, [r7, #2]
 8008222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	887a      	ldrh	r2, [r7, #2]
 8008230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	887a      	ldrh	r2, [r7, #2]
 8008236:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800824c:	d802      	bhi.n	8008254 <HAL_SPI_TransmitReceive+0xe6>
 800824e:	8a3b      	ldrh	r3, [r7, #16]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d908      	bls.n	8008266 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	e007      	b.n	8008276 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008274:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	d007      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800829c:	d97c      	bls.n	8008398 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_SPI_TransmitReceive+0x13e>
 80082a6:	8a7b      	ldrh	r3, [r7, #18]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d169      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	881a      	ldrh	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	1c9a      	adds	r2, r3, #2
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d0:	e056      	b.n	8008380 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d11b      	bne.n	8008318 <HAL_SPI_TransmitReceive+0x1aa>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d016      	beq.n	8008318 <HAL_SPI_TransmitReceive+0x1aa>
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d113      	bne.n	8008318 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	881a      	ldrh	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	1c9a      	adds	r2, r3, #2
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b01      	cmp	r3, #1
 8008324:	d11c      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x1f2>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	b292      	uxth	r2, r2
 800833e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	1c9a      	adds	r2, r3, #2
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835c:	2301      	movs	r3, #1
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008360:	f7f9 f938 	bl	80015d4 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836c:	429a      	cmp	r2, r3
 800836e:	d807      	bhi.n	8008380 <HAL_SPI_TransmitReceive+0x212>
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008376:	d003      	beq.n	8008380 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800837e:	e0fb      	b.n	8008578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008384:	b29b      	uxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1a3      	bne.n	80082d2 <HAL_SPI_TransmitReceive+0x164>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008390:	b29b      	uxth	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d19d      	bne.n	80082d2 <HAL_SPI_TransmitReceive+0x164>
 8008396:	e0df      	b.n	8008558 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x23a>
 80083a0:	8a7b      	ldrh	r3, [r7, #18]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	f040 80cb 	bne.w	800853e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d912      	bls.n	80083d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	881a      	ldrh	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b02      	subs	r3, #2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083d6:	e0b2      	b.n	800853e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083fe:	e09e      	b.n	800853e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b02      	cmp	r3, #2
 800840c:	d134      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x30a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d02f      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x30a>
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2b01      	cmp	r3, #1
 800841c:	d12c      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d912      	bls.n	800844e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b02      	subs	r3, #2
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800844c:	e012      	b.n	8008474 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b01      	cmp	r3, #1
 8008484:	d148      	bne.n	8008518 <HAL_SPI_TransmitReceive+0x3aa>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d042      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b01      	cmp	r3, #1
 800849c:	d923      	bls.n	80084e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	b292      	uxth	r2, r2
 80084aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	1c9a      	adds	r2, r3, #2
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b02      	subs	r3, #2
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d81f      	bhi.n	8008514 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e2:	605a      	str	r2, [r3, #4]
 80084e4:	e016      	b.n	8008514 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f103 020c 	add.w	r2, r3, #12
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	7812      	ldrb	r2, [r2, #0]
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008514:	2301      	movs	r3, #1
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008518:	f7f9 f85c 	bl	80015d4 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008524:	429a      	cmp	r2, r3
 8008526:	d803      	bhi.n	8008530 <HAL_SPI_TransmitReceive+0x3c2>
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852e:	d102      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x3c8>
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800853c:	e01c      	b.n	8008578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f af5b 	bne.w	8008400 <HAL_SPI_TransmitReceive+0x292>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f47f af54 	bne.w	8008400 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f001 fef3 	bl	800a348 <SPI_EndRxTxTransaction>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	661a      	str	r2, [r3, #96]	; 0x60
 8008574:	e000      	b.n	8008578 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800858c:	4618      	mov	r0, r3
 800858e:	3728      	adds	r7, #40	; 0x28
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_SPI_Transmit_IT+0x20>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e072      	b.n	800869a <HAL_SPI_Transmit_IT+0x106>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <HAL_SPI_Transmit_IT+0x34>
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d102      	bne.n	80085ce <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085cc:	e060      	b.n	8008690 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d002      	beq.n	80085e0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80085da:	2302      	movs	r3, #2
 80085dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085de:	e057      	b.n	8008690 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2203      	movs	r2, #3
 80085e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	88fa      	ldrh	r2, [r7, #6]
 80085f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	88fa      	ldrh	r2, [r7, #6]
 80085fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008624:	d903      	bls.n	800862e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4a1f      	ldr	r2, [pc, #124]	; (80086a8 <HAL_SPI_Transmit_IT+0x114>)
 800862a:	651a      	str	r2, [r3, #80]	; 0x50
 800862c:	e002      	b.n	8008634 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <HAL_SPI_Transmit_IT+0x118>)
 8008632:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863c:	d10f      	bne.n	800865e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800864c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800865c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800866c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b40      	cmp	r3, #64	; 0x40
 800867a:	d008      	beq.n	800868e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e000      	b.n	8008690 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800868e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	0800a019 	.word	0x0800a019
 80086ac:	08009fd3 	.word	0x08009fd3

080086b0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d110      	bne.n	80086ec <HAL_SPI_Receive_IT+0x3c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086d2:	d10b      	bne.n	80086ec <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2204      	movs	r2, #4
 80086d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 f894 	bl	8008810 <HAL_SPI_TransmitReceive_IT>
 80086e8:	4603      	mov	r3, r0
 80086ea:	e089      	b.n	8008800 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <HAL_SPI_Receive_IT+0x4a>
 80086f6:	2302      	movs	r3, #2
 80086f8:	e082      	b.n	8008800 <HAL_SPI_Receive_IT+0x150>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b01      	cmp	r3, #1
 800870c:	d002      	beq.n	8008714 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800870e:	2302      	movs	r3, #2
 8008710:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008712:	e070      	b.n	80087f6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_SPI_Receive_IT+0x70>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008724:	e067      	b.n	80087f6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2204      	movs	r2, #4
 800872a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800876a:	d90b      	bls.n	8008784 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800877a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a22      	ldr	r2, [pc, #136]	; (8008808 <HAL_SPI_Receive_IT+0x158>)
 8008780:	64da      	str	r2, [r3, #76]	; 0x4c
 8008782:	e00a      	b.n	800879a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008792:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4a1d      	ldr	r2, [pc, #116]	; (800880c <HAL_SPI_Receive_IT+0x15c>)
 8008798:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a2:	d10f      	bne.n	80087c4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087c2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80087d2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087de:	2b40      	cmp	r3, #64	; 0x40
 80087e0:	d008      	beq.n	80087f4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	e000      	b.n	80087f6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80087f4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	08009f87 	.word	0x08009f87
 800880c:	08009f37 	.word	0x08009f37

08008810 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_SPI_TransmitReceive_IT+0x20>
 800882c:	2302      	movs	r3, #2
 800882e:	e091      	b.n	8008954 <HAL_SPI_TransmitReceive_IT+0x144>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800883e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008846:	7dbb      	ldrb	r3, [r7, #22]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d00d      	beq.n	8008868 <HAL_SPI_TransmitReceive_IT+0x58>
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008852:	d106      	bne.n	8008862 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <HAL_SPI_TransmitReceive_IT+0x52>
 800885c:	7dbb      	ldrb	r3, [r7, #22]
 800885e:	2b04      	cmp	r3, #4
 8008860:	d002      	beq.n	8008868 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008862:	2302      	movs	r3, #2
 8008864:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008866:	e070      	b.n	800894a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_SPI_TransmitReceive_IT+0x6a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <HAL_SPI_TransmitReceive_IT+0x6a>
 8008874:	887b      	ldrh	r3, [r7, #2]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800887e:	e064      	b.n	800894a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b04      	cmp	r3, #4
 800888a:	d003      	beq.n	8008894 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2205      	movs	r2, #5
 8008890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	887a      	ldrh	r2, [r7, #2]
 80088a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	887a      	ldrh	r2, [r7, #2]
 80088aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	887a      	ldrh	r2, [r7, #2]
 80088b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	887a      	ldrh	r2, [r7, #2]
 80088be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ca:	d906      	bls.n	80088da <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4a24      	ldr	r2, [pc, #144]	; (8008960 <HAL_SPI_TransmitReceive_IT+0x150>)
 80088d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4a23      	ldr	r2, [pc, #140]	; (8008964 <HAL_SPI_TransmitReceive_IT+0x154>)
 80088d6:	651a      	str	r2, [r3, #80]	; 0x50
 80088d8:	e005      	b.n	80088e6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a22      	ldr	r2, [pc, #136]	; (8008968 <HAL_SPI_TransmitReceive_IT+0x158>)
 80088de:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a22      	ldr	r2, [pc, #136]	; (800896c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80088e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ee:	d802      	bhi.n	80088f6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80088f0:	887b      	ldrh	r3, [r7, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d908      	bls.n	8008908 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	e007      	b.n	8008918 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008916:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008926:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d008      	beq.n	8008948 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e000      	b.n	800894a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008948:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
}
 8008954:	4618      	mov	r0, r3
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	08009e71 	.word	0x08009e71
 8008964:	08009ed7 	.word	0x08009ed7
 8008968:	08009d21 	.word	0x08009d21
 800896c:	08009ddf 	.word	0x08009ddf

08008970 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_SPI_Transmit_DMA+0x20>
 800898c:	2302      	movs	r3, #2
 800898e:	e0d8      	b.n	8008b42 <HAL_SPI_Transmit_DMA+0x1d2>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d002      	beq.n	80089aa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80089a4:	2302      	movs	r3, #2
 80089a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089a8:	e0c6      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_SPI_Transmit_DMA+0x46>
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089ba:	e0bd      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2203      	movs	r2, #3
 80089c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a06:	d10f      	bne.n	8008a28 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2c:	4a47      	ldr	r2, [pc, #284]	; (8008b4c <HAL_SPI_Transmit_DMA+0x1dc>)
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	4a46      	ldr	r2, [pc, #280]	; (8008b50 <HAL_SPI_Transmit_DMA+0x1e0>)
 8008a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	4a45      	ldr	r2, [pc, #276]	; (8008b54 <HAL_SPI_Transmit_DMA+0x1e4>)
 8008a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a44:	2200      	movs	r2, #0
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a56:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a60:	d82d      	bhi.n	8008abe <HAL_SPI_Transmit_DMA+0x14e>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6c:	d127      	bne.n	8008abe <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10f      	bne.n	8008a9c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a9a:	e010      	b.n	8008abe <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aaa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	085b      	lsrs	r3, r3, #1
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ad6:	f7f9 fc1a 	bl	800230e <HAL_DMA_Start_IT>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae4:	f043 0210 	orr.w	r2, r3, #16
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008af8:	e01e      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b40      	cmp	r3, #64	; 0x40
 8008b06:	d007      	beq.n	8008b18 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0220 	orr.w	r2, r2, #32
 8008b26:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0202 	orr.w	r2, r2, #2
 8008b36:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08009aa3 	.word	0x08009aa3
 8008b50:	080098c5 	.word	0x080098c5
 8008b54:	08009af7 	.word	0x08009af7

08008b58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d110      	bne.n	8008b94 <HAL_SPI_Receive_DMA+0x3c>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b7a:	d10b      	bne.n	8008b94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 f908 	bl	8008da0 <HAL_SPI_TransmitReceive_DMA>
 8008b90:	4603      	mov	r3, r0
 8008b92:	e0fb      	b.n	8008d8c <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_SPI_Receive_DMA+0x4a>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e0f4      	b.n	8008d8c <HAL_SPI_Receive_DMA+0x234>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bba:	e0e2      	b.n	8008d82 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_SPI_Receive_DMA+0x70>
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bcc:	e0d9      	b.n	8008d82 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c12:	d10f      	bne.n	8008c34 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c42:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c4c:	d908      	bls.n	8008c60 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c5c:	605a      	str	r2, [r3, #4]
 8008c5e:	e042      	b.n	8008ce6 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c6e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7a:	d134      	bne.n	8008ce6 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c8a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d111      	bne.n	8008cc0 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008caa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008cbe:	e012      	b.n	8008ce6 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3301      	adds	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <HAL_SPI_Receive_DMA+0x23c>)
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf2:	4a29      	ldr	r2, [pc, #164]	; (8008d98 <HAL_SPI_Receive_DMA+0x240>)
 8008cf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	4a28      	ldr	r2, [pc, #160]	; (8008d9c <HAL_SPI_Receive_DMA+0x244>)
 8008cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d02:	2200      	movs	r2, #0
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	4619      	mov	r1, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d20:	f7f9 faf5 	bl	800230e <HAL_DMA_Start_IT>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2e:	f043 0210 	orr.w	r2, r3, #16
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008d42:	e01e      	b.n	8008d82 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	d007      	beq.n	8008d62 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d60:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0220 	orr.w	r2, r2, #32
 8008d70:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0201 	orr.w	r2, r2, #1
 8008d80:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	08009abf 	.word	0x08009abf
 8008d98:	0800996b 	.word	0x0800996b
 8008d9c:	08009af7 	.word	0x08009af7

08008da0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e16c      	b.n	800909a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008dd6:	7dbb      	ldrb	r3, [r7, #22]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d00d      	beq.n	8008df8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de2:	d106      	bne.n	8008df2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008dec:	7dbb      	ldrb	r3, [r7, #22]
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d002      	beq.n	8008df8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008df2:	2302      	movs	r3, #2
 8008df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008df6:	e14b      	b.n	8009090 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008e04:	887b      	ldrh	r3, [r7, #2]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e0e:	e13f      	b.n	8009090 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d003      	beq.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2205      	movs	r2, #5
 8008e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	887a      	ldrh	r2, [r7, #2]
 8008e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	887a      	ldrh	r2, [r7, #2]
 8008e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	887a      	ldrh	r2, [r7, #2]
 8008e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	887a      	ldrh	r2, [r7, #2]
 8008e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008e6c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e76:	d908      	bls.n	8008e8a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	e06f      	b.n	8008f6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e98:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	d126      	bne.n	8008ef4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10f      	bne.n	8008ed2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ec0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ed0:	e010      	b.n	8008ef4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ee0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3301      	adds	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008efe:	d134      	bne.n	8008f6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f0e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d111      	bne.n	8008f44 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008f42:	e012      	b.n	8008f6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3301      	adds	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d108      	bne.n	8008f88 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	4a4a      	ldr	r2, [pc, #296]	; (80090a4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	4a49      	ldr	r2, [pc, #292]	; (80090a8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f86:	e007      	b.n	8008f98 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8c:	4a47      	ldr	r2, [pc, #284]	; (80090ac <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f94:	4a46      	ldr	r2, [pc, #280]	; (80090b0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8008f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9c:	4a45      	ldr	r2, [pc, #276]	; (80090b4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008fc2:	f7f9 f9a4 	bl	800230e <HAL_DMA_Start_IT>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00c      	beq.n	8008fe6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd0:	f043 0210 	orr.w	r2, r3, #16
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008fe4:	e054      	b.n	8009090 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0201 	orr.w	r2, r2, #1
 8008ff4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009002:	2200      	movs	r2, #0
 8009004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900a:	2200      	movs	r2, #0
 800900c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	2200      	movs	r2, #0
 8009014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	4619      	mov	r1, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	330c      	adds	r3, #12
 8009026:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800902c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800902e:	f7f9 f96e 	bl	800230e <HAL_DMA_Start_IT>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903c:	f043 0210 	orr.w	r2, r3, #16
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009050:	e01e      	b.n	8009090 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d007      	beq.n	8009070 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0220 	orr.w	r2, r2, #32
 800907e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0202 	orr.w	r2, r2, #2
 800908e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	08009abf 	.word	0x08009abf
 80090a8:	0800996b 	.word	0x0800996b
 80090ac:	08009adb 	.word	0x08009adb
 80090b0:	08009a13 	.word	0x08009a13
 80090b4:	08009af7 	.word	0x08009af7

080090b8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	; 0x28
 80090bc:	af02      	add	r7, sp, #8
 80090be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80090c4:	4b88      	ldr	r3, [pc, #544]	; (80092e8 <HAL_SPI_Abort+0x230>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a88      	ldr	r2, [pc, #544]	; (80092ec <HAL_SPI_Abort+0x234>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	0a5b      	lsrs	r3, r3, #9
 80090d0:	2264      	movs	r2, #100	; 0x64
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	617b      	str	r3, [r7, #20]
  count = resetcount;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0220 	bic.w	r2, r2, #32
 80090ea:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f6:	2b80      	cmp	r3, #128	; 0x80
 80090f8:	d117      	bne.n	800912a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a7c      	ldr	r2, [pc, #496]	; (80092f0 <HAL_SPI_Abort+0x238>)
 80090fe:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009112:	e008      	b.n	8009126 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	3b01      	subs	r3, #1
 8009118:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b07      	cmp	r3, #7
 8009124:	d1ec      	bne.n	8009100 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d117      	bne.n	8009168 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a6e      	ldr	r2, [pc, #440]	; (80092f4 <HAL_SPI_Abort+0x23c>)
 800913c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009150:	e008      	b.n	8009164 <HAL_SPI_Abort+0xac>
      }
      count--;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3b01      	subs	r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b07      	cmp	r3, #7
 8009162:	d1ec      	bne.n	800913e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b02      	cmp	r3, #2
 8009174:	d141      	bne.n	80091fa <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	2b00      	cmp	r3, #0
 800917c:	d03d      	beq.n	80091fa <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	2200      	movs	r2, #0
 8009184:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918a:	4618      	mov	r0, r3
 800918c:	f7f9 f93a 	bl	8002404 <HAL_DMA_Abort>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2240      	movs	r2, #64	; 0x40
 800919a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0202 	bic.w	r2, r2, #2
 80091aa:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80091ac:	f7f8 fa12 	bl	80015d4 <HAL_GetTick>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	2164      	movs	r1, #100	; 0x64
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 f8c6 	bl	800a348 <SPI_EndRxTxTransaction>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2240      	movs	r2, #64	; 0x40
 80091c6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091d6:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80091d8:	f7f8 f9fc 	bl	80015d4 <HAL_GetTick>
 80091dc:	4603      	mov	r3, r0
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	2364      	movs	r3, #100	; 0x64
 80091e2:	2200      	movs	r2, #0
 80091e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 ffbf 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <HAL_SPI_Abort+0x142>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2240      	movs	r2, #64	; 0x40
 80091f8:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b01      	cmp	r3, #1
 8009206:	d143      	bne.n	8009290 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920c:	2b00      	cmp	r3, #0
 800920e:	d03f      	beq.n	8009290 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009214:	2200      	movs	r2, #0
 8009216:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 f8f1 	bl	8002404 <HAL_DMA_Abort>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2240      	movs	r2, #64	; 0x40
 800922c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923c:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800923e:	f7f8 f9c9 	bl	80015d4 <HAL_GetTick>
 8009242:	4603      	mov	r3, r0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	2364      	movs	r3, #100	; 0x64
 8009248:	2200      	movs	r2, #0
 800924a:	2180      	movs	r1, #128	; 0x80
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 ff05 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2240      	movs	r2, #64	; 0x40
 800925c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800925e:	f7f8 f9b9 	bl	80015d4 <HAL_GetTick>
 8009262:	4603      	mov	r3, r0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2364      	movs	r3, #100	; 0x64
 8009268:	2200      	movs	r2, #0
 800926a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 ff7c 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <HAL_SPI_Abort+0x1c8>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2240      	movs	r2, #64	; 0x40
 800927e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d102      	bne.n	80092ac <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	77fb      	strb	r3, [r7, #31]
 80092aa:	e002      	b.n	80092b2 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return errorcode;
 80092de:	7ffb      	ldrb	r3, [r7, #31]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	2000006c 	.word	0x2000006c
 80092ec:	057619f1 	.word	0x057619f1
 80092f0:	0800a5f5 	.word	0x0800a5f5
 80092f4:	0800a537 	.word	0x0800a537

080092f8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8009304:	2301      	movs	r3, #1
 8009306:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009308:	4b72      	ldr	r3, [pc, #456]	; (80094d4 <HAL_SPI_Abort_IT+0x1dc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a72      	ldr	r2, [pc, #456]	; (80094d8 <HAL_SPI_Abort_IT+0x1e0>)
 800930e:	fba2 2303 	umull	r2, r3, r2, r3
 8009312:	0a5b      	lsrs	r3, r3, #9
 8009314:	2264      	movs	r2, #100	; 0x64
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0220 	bic.w	r2, r2, #32
 800932e:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933a:	2b80      	cmp	r3, #128	; 0x80
 800933c:	d117      	bne.n	800936e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a66      	ldr	r2, [pc, #408]	; (80094dc <HAL_SPI_Abort_IT+0x1e4>)
 8009342:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800934e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009356:	e008      	b.n	800936a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3b01      	subs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b07      	cmp	r3, #7
 8009368:	d1ec      	bne.n	8009344 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b40      	cmp	r3, #64	; 0x40
 800937a:	d117      	bne.n	80093ac <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a58      	ldr	r2, [pc, #352]	; (80094e0 <HAL_SPI_Abort_IT+0x1e8>)
 8009380:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d106      	bne.n	8009396 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800938c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009394:	e008      	b.n	80093a8 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	3b01      	subs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b07      	cmp	r3, #7
 80093a6:	d1ec      	bne.n	8009382 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d104      	bne.n	80093cc <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	4a47      	ldr	r2, [pc, #284]	; (80094e4 <HAL_SPI_Abort_IT+0x1ec>)
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
 80093ca:	e003      	b.n	80093d4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d0:	2200      	movs	r2, #0
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00f      	beq.n	80093fc <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d104      	bne.n	80093f4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ee:	4a3e      	ldr	r2, [pc, #248]	; (80094e8 <HAL_SPI_Abort_IT+0x1f0>)
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
 80093f2:	e003      	b.n	80093fc <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f8:	2200      	movs	r2, #0
 80093fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b02      	cmp	r3, #2
 8009408:	d115      	bne.n	8009436 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	2b00      	cmp	r3, #0
 8009410:	d011      	beq.n	8009436 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	4618      	mov	r0, r3
 8009418:	f7f9 f850 	bl	80024bc <HAL_DMA_Abort_IT>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	2200      	movs	r2, #0
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2240      	movs	r2, #64	; 0x40
 800942e:	661a      	str	r2, [r3, #96]	; 0x60
 8009430:	e001      	b.n	8009436 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b01      	cmp	r3, #1
 8009442:	d115      	bne.n	8009470 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	2b00      	cmp	r3, #0
 800944a:	d011      	beq.n	8009470 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 f833 	bl	80024bc <HAL_DMA_Abort_IT>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009460:	2200      	movs	r2, #0
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2240      	movs	r2, #64	; 0x40
 8009468:	661a      	str	r2, [r3, #96]	; 0x60
 800946a:	e001      	b.n	8009470 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d129      	bne.n	80094ca <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d102      	bne.n	8009492 <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	77fb      	strb	r3, [r7, #31]
 8009490:	e002      	b.n	8009498 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094ae:	2300      	movs	r3, #0
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f9d9 	bl	800987c <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 80094ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000006c 	.word	0x2000006c
 80094d8:	057619f1 	.word	0x057619f1
 80094dc:	0800a5f5 	.word	0x0800a5f5
 80094e0:	0800a537 	.word	0x0800a537
 80094e4:	08009b61 	.word	0x08009b61
 80094e8:	08009c3f 	.word	0x08009c3f

080094ec <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_SPI_DMAPause+0x16>
 80094fe:	2302      	movs	r3, #2
 8009500:	e010      	b.n	8009524 <HAL_SPI_DMAPause+0x38>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0203 	bic.w	r2, r2, #3
 8009518:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <HAL_SPI_DMAResume+0x16>
 8009542:	2302      	movs	r3, #2
 8009544:	e010      	b.n	8009568 <HAL_SPI_DMAResume+0x38>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0203 	orr.w	r2, r2, #3
 800955c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00f      	beq.n	80095a8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958c:	4618      	mov	r0, r3
 800958e:	f7f8 ff39 	bl	8002404 <HAL_DMA_Abort>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d007      	beq.n	80095a8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800959c:	f043 0210 	orr.w	r2, r3, #16
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00f      	beq.n	80095d0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f8 ff25 	bl	8002404 <HAL_DMA_Abort>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c4:	f043 0210 	orr.w	r2, r3, #16
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0203 	bic.w	r2, r2, #3
 80095de:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	099b      	lsrs	r3, r3, #6
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10f      	bne.n	8009636 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	099b      	lsrs	r3, r3, #6
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
    return;
 8009634:	e0d7      	b.n	80097e6 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <HAL_SPI_IRQHandler+0x66>
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	09db      	lsrs	r3, r3, #7
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
    return;
 8009656:	e0c6      	b.n	80097e6 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10c      	bne.n	800967e <HAL_SPI_IRQHandler+0x8c>
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	099b      	lsrs	r3, r3, #6
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80b4 	beq.w	80097e6 <HAL_SPI_IRQHandler+0x1f4>
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	095b      	lsrs	r3, r3, #5
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80ad 	beq.w	80097e6 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	099b      	lsrs	r3, r3, #6
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d023      	beq.n	80096e0 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d011      	beq.n	80096c8 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a8:	f043 0204 	orr.w	r2, r3, #4
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	e00b      	b.n	80096e0 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c8:	2300      	movs	r3, #0
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	693b      	ldr	r3, [r7, #16]
        return;
 80096de:	e082      	b.n	80097e6 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	095b      	lsrs	r3, r3, #5
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d014      	beq.n	8009716 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f0:	f043 0201 	orr.w	r2, r3, #1
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	0a1b      	lsrs	r3, r3, #8
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00c      	beq.n	800973c <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009726:	f043 0208 	orr.w	r2, r3, #8
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800972e:	2300      	movs	r3, #0
 8009730:	60bb      	str	r3, [r7, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	60bb      	str	r3, [r7, #8]
 800973a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009740:	2b00      	cmp	r3, #0
 8009742:	d04f      	beq.n	80097e4 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009752:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <HAL_SPI_IRQHandler+0x17e>
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d034      	beq.n	80097da <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0203 	bic.w	r2, r2, #3
 800977e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009784:	2b00      	cmp	r3, #0
 8009786:	d011      	beq.n	80097ac <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978c:	4a17      	ldr	r2, [pc, #92]	; (80097ec <HAL_SPI_IRQHandler+0x1fa>)
 800978e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009794:	4618      	mov	r0, r3
 8009796:	f7f8 fe91 	bl	80024bc <HAL_DMA_Abort_IT>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d016      	beq.n	80097e2 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <HAL_SPI_IRQHandler+0x1fa>)
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f8 fe7b 	bl	80024bc <HAL_DMA_Abort_IT>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80097d8:	e003      	b.n	80097e2 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f844 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80097e0:	e000      	b.n	80097e4 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80097e2:	bf00      	nop
    return;
 80097e4:	bf00      	nop
  }
}
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	08009b37 	.word	0x08009b37

080097f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800989e:	b2db      	uxtb	r3, r3
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098d2:	f7f7 fe7f 	bl	80015d4 <HAL_GetTick>
 80098d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d03b      	beq.n	800995e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0220 	bic.w	r2, r2, #32
 80098f4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0202 	bic.w	r2, r2, #2
 8009904:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	2164      	movs	r1, #100	; 0x64
 800990a:	6978      	ldr	r0, [r7, #20]
 800990c:	f000 fd1c 	bl	800a348 <SPI_EndRxTxTransaction>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10a      	bne.n	8009940 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2200      	movs	r2, #0
 8009944:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009956:	6978      	ldr	r0, [r7, #20]
 8009958:	f7ff ff86 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800995c:	e002      	b.n	8009964 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800995e:	6978      	ldr	r0, [r7, #20]
 8009960:	f7ff ff46 	bl	80097f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009978:	f7f7 fe2c 	bl	80015d4 <HAL_GetTick>
 800997c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b20      	cmp	r3, #32
 800998a:	d03c      	beq.n	8009a06 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0220 	bic.w	r2, r2, #32
 800999a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10d      	bne.n	80099c0 <SPI_DMAReceiveCplt+0x56>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d108      	bne.n	80099c0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0203 	bic.w	r2, r2, #3
 80099bc:	605a      	str	r2, [r3, #4]
 80099be:	e007      	b.n	80099d0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0201 	bic.w	r2, r2, #1
 80099ce:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	2164      	movs	r1, #100	; 0x64
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fc5f 	bl	800a298 <SPI_EndRxTransaction>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff ff32 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009a04:	e002      	b.n	8009a0c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7ff fefc 	bl	8009804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a20:	f7f7 fdd8 	bl	80015d4 <HAL_GetTick>
 8009a24:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d030      	beq.n	8009a96 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 0220 	bic.w	r2, r2, #32
 8009a42:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	2164      	movs	r1, #100	; 0x64
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fc7d 	bl	800a348 <SPI_EndRxTxTransaction>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a58:	f043 0220 	orr.w	r2, r3, #32
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0203 	bic.w	r2, r2, #3
 8009a6e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff feea 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009a94:	e002      	b.n	8009a9c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff febe 	bl	8009818 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff febb 	bl	800982c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff feb7 	bl	8009840 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f7ff feb3 	bl	8009854 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0203 	bic.w	r2, r2, #3
 8009b12:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b18:	f043 0210 	orr.w	r2, r3, #16
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff fe9d 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff fe88 	bl	8009868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b72:	2200      	movs	r2, #0
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0202 	bic.w	r2, r2, #2
 8009b84:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b86:	f7f7 fd25 	bl	80015d4 <HAL_GetTick>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2164      	movs	r1, #100	; 0x64
 8009b90:	6978      	ldr	r0, [r7, #20]
 8009b92:	f000 fbd9 	bl	800a348 <SPI_EndRxTxTransaction>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2240      	movs	r2, #64	; 0x40
 8009ba0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb0:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009bb2:	f7f7 fd0f 	bl	80015d4 <HAL_GetTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	2364      	movs	r3, #100	; 0x64
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f000 fad2 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <SPI_DMATxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2240      	movs	r2, #64	; 0x40
 8009bd2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d004      	beq.n	8009be6 <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d127      	bne.n	8009c36 <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf8:	2b40      	cmp	r3, #64	; 0x40
 8009bfa:	d002      	beq.n	8009c02 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c02:	2300      	movs	r3, #0
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009c2e:	6978      	ldr	r0, [r7, #20]
 8009c30:	f7ff fe24 	bl	800987c <HAL_SPI_AbortCpltCallback>
 8009c34:	e000      	b.n	8009c38 <SPI_DMATxAbortCallback+0xd8>
      return;
 8009c36:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b088      	sub	sp, #32
 8009c42:	af02      	add	r7, sp, #8
 8009c44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c5a:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c60:	2200      	movs	r2, #0
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0201 	bic.w	r2, r2, #1
 8009c72:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009c74:	f7f7 fcae 	bl	80015d4 <HAL_GetTick>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	2364      	movs	r3, #100	; 0x64
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	6978      	ldr	r0, [r7, #20]
 8009c84:	f000 f9ea 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2240      	movs	r2, #64	; 0x40
 8009c92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009c94:	f7f7 fc9e 	bl	80015d4 <HAL_GetTick>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	2364      	movs	r3, #100	; 0x64
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	f000 fa61 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <SPI_DMARxAbortCallback+0x78>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2240      	movs	r2, #64	; 0x40
 8009cb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d127      	bne.n	8009d18 <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d002      	beq.n	8009ce4 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	613b      	str	r3, [r7, #16]
 8009cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	60fb      	str	r3, [r7, #12]
 8009d06:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009d10:	6978      	ldr	r0, [r7, #20]
 8009d12:	f7ff fdb3 	bl	800987c <HAL_SPI_AbortCpltCallback>
 8009d16:	e000      	b.n	8009d1a <SPI_DMARxAbortCallback+0xdc>
      return;
 8009d18:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d923      	bls.n	8009d7c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	1c9a      	adds	r2, r3, #2
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b02      	subs	r3, #2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d11f      	bne.n	8009daa <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d78:	605a      	str	r2, [r3, #4]
 8009d7a:	e016      	b.n	8009daa <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f103 020c 	add.w	r2, r3, #12
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	7812      	ldrb	r2, [r2, #0]
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3b01      	subs	r3, #1
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10f      	bne.n	8009dd6 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009dc4:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 faff 	bl	800a3d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d912      	bls.n	8009e16 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	881a      	ldrh	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	1c9a      	adds	r2, r3, #2
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b02      	subs	r3, #2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e14:	e012      	b.n	8009e3c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d110      	bne.n	8009e68 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e54:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fab6 	bl	800a3d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	b292      	uxth	r2, r2
 8009e84:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	1c9a      	adds	r2, r3, #2
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10f      	bne.n	8009ece <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ebc:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fa83 	bl	800a3d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	881a      	ldrh	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	1c9a      	adds	r2, r3, #2
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d110      	bne.n	8009f2e <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f1a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fa53 	bl	800a3d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f103 020c 	add.w	r2, r3, #12
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	7812      	ldrb	r2, [r2, #0]
 8009f4c:	b2d2      	uxtb	r2, r2
 8009f4e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fa6d 	bl	800a458 <SPI_CloseRx_ISR>
  }
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	1c9a      	adds	r2, r3, #2
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fa47 	bl	800a458 <SPI_CloseRx_ISR>
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	7812      	ldrb	r2, [r2, #0]
 8009fe6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a004:	b29b      	uxth	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa54 	bl	800a4b8 <SPI_CloseTx_ISR>
  }
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	881a      	ldrh	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	1c9a      	adds	r2, r3, #2
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a048:	b29b      	uxth	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d102      	bne.n	800a054 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fa32 	bl	800a4b8 <SPI_CloseTx_ISR>
  }
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a06c:	f7f7 fab2 	bl	80015d4 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	1a9b      	subs	r3, r3, r2
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4413      	add	r3, r2
 800a07a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a07c:	f7f7 faaa 	bl	80015d4 <HAL_GetTick>
 800a080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a082:	4b39      	ldr	r3, [pc, #228]	; (800a168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	015b      	lsls	r3, r3, #5
 800a088:	0d1b      	lsrs	r3, r3, #20
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a092:	e054      	b.n	800a13e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09a:	d050      	beq.n	800a13e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a09c:	f7f7 fa9a 	bl	80015d4 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d902      	bls.n	800a0b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d13d      	bne.n	800a12e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0ca:	d111      	bne.n	800a0f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d4:	d004      	beq.n	800a0e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0de:	d107      	bne.n	800a0f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f8:	d10f      	bne.n	800a11a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e017      	b.n	800a15e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4013      	ands	r3, r2
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	bf0c      	ite	eq
 800a14e:	2301      	moveq	r3, #1
 800a150:	2300      	movne	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	461a      	mov	r2, r3
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d19b      	bne.n	800a094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3720      	adds	r7, #32
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	2000006c 	.word	0x2000006c

0800a16c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08a      	sub	sp, #40	; 0x28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a17e:	f7f7 fa29 	bl	80015d4 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	4413      	add	r3, r2
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a18e:	f7f7 fa21 	bl	80015d4 <HAL_GetTick>
 800a192:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	330c      	adds	r3, #12
 800a19a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a19c:	4b3d      	ldr	r3, [pc, #244]	; (800a294 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00da      	lsls	r2, r3, #3
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	0d1b      	lsrs	r3, r3, #20
 800a1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a1b4:	e060      	b.n	800a278 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a1bc:	d107      	bne.n	800a1ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d4:	d050      	beq.n	800a278 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1d6:	f7f7 f9fd 	bl	80015d4 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d902      	bls.n	800a1ec <SPI_WaitFifoStateUntilTimeout+0x80>
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d13d      	bne.n	800a268 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a204:	d111      	bne.n	800a22a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a20e:	d004      	beq.n	800a21a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a218:	d107      	bne.n	800a22a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a228:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a232:	d10f      	bne.n	800a254 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a252:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e010      	b.n	800a28a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	3b01      	subs	r3, #1
 800a276:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689a      	ldr	r2, [r3, #8]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	429a      	cmp	r2, r3
 800a286:	d196      	bne.n	800a1b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3728      	adds	r7, #40	; 0x28
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	2000006c 	.word	0x2000006c

0800a298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2ac:	d111      	bne.n	800a2d2 <SPI_EndRxTransaction+0x3a>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b6:	d004      	beq.n	800a2c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2c0:	d107      	bne.n	800a2d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2180      	movs	r1, #128	; 0x80
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff febd 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ec:	f043 0220 	orr.w	r2, r3, #32
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e023      	b.n	800a340 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a300:	d11d      	bne.n	800a33e <SPI_EndRxTransaction+0xa6>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30a:	d004      	beq.n	800a316 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a314:	d113      	bne.n	800a33e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff ff22 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	f043 0220 	orr.w	r2, r3, #32
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e000      	b.n	800a340 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff ff03 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a370:	f043 0220 	orr.w	r2, r3, #32
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e027      	b.n	800a3cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fe68 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d007      	beq.n	800a3a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a396:	f043 0220 	orr.w	r2, r3, #32
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e014      	b.n	800a3cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff fedc 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d007      	beq.n	800a3ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3be:	f043 0220 	orr.w	r2, r3, #32
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e000      	b.n	800a3cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3dc:	f7f7 f8fa 	bl	80015d4 <HAL_GetTick>
 800a3e0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0220 	bic.w	r2, r2, #32
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	2164      	movs	r1, #100	; 0x64
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff ffa6 	bl	800a348 <SPI_EndRxTxTransaction>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d005      	beq.n	800a40e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a406:	f043 0220 	orr.w	r2, r3, #32
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a412:	2b00      	cmp	r3, #0
 800a414:	d115      	bne.n	800a442 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d107      	bne.n	800a432 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff f9ea 	bl	8009804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a430:	e00e      	b.n	800a450 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff f9ec 	bl	8009818 <HAL_SPI_TxRxCpltCallback>
}
 800a440:	e006      	b.n	800a450 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fa0c 	bl	8009868 <HAL_SPI_ErrorCallback>
}
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a46e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a470:	f7f7 f8b0 	bl	80015d4 <HAL_GetTick>
 800a474:	4603      	mov	r3, r0
 800a476:	461a      	mov	r2, r3
 800a478:	2164      	movs	r1, #100	; 0x64
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff ff0c 	bl	800a298 <SPI_EndRxTransaction>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a48a:	f043 0220 	orr.w	r2, r3, #32
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff f9ae 	bl	8009804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a4a8:	e002      	b.n	800a4b0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff f9dc 	bl	8009868 <HAL_SPI_ErrorCallback>
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4c0:	f7f7 f888 	bl	80015d4 <HAL_GetTick>
 800a4c4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a4d4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	2164      	movs	r1, #100	; 0x64
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff ff34 	bl	800a348 <SPI_EndRxTxTransaction>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d005      	beq.n	800a4f2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ea:	f043 0220 	orr.w	r2, r3, #32
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60bb      	str	r3, [r7, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	60bb      	str	r3, [r7, #8]
 800a50e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff f9a1 	bl	8009868 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a526:	e002      	b.n	800a52e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff f961 	bl	80097f0 <HAL_SPI_TxCpltCallback>
}
 800a52e:	bf00      	nop
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af02      	add	r7, sp, #8
 800a53c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a54c:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a54e:	4b27      	ldr	r3, [pc, #156]	; (800a5ec <SPI_AbortRx_ISR+0xb6>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a27      	ldr	r2, [pc, #156]	; (800a5f0 <SPI_AbortRx_ISR+0xba>)
 800a554:	fba2 2303 	umull	r2, r3, r2, r3
 800a558:	0a5b      	lsrs	r3, r3, #9
 800a55a:	2264      	movs	r2, #100	; 0x64
 800a55c:	fb02 f303 	mul.w	r3, r2, r3
 800a560:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a570:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a57c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800a584:	e009      	b.n	800a59a <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3b01      	subs	r3, #1
 800a58a:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d0eb      	beq.n	800a572 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a59a:	f7f7 f81b 	bl	80015d4 <HAL_GetTick>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	2364      	movs	r3, #100	; 0x64
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2180      	movs	r1, #128	; 0x80
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff fd57 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2240      	movs	r2, #64	; 0x40
 800a5b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a5ba:	f7f7 f80b 	bl	80015d4 <HAL_GetTick>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	2364      	movs	r3, #100	; 0x64
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff fdce 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <SPI_AbortRx_ISR+0xa6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2240      	movs	r2, #64	; 0x40
 800a5da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2207      	movs	r2, #7
 800a5e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	2000006c 	.word	0x2000006c
 800a5f0:	057619f1 	.word	0x057619f1

0800a5f4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a5fc:	4b4c      	ldr	r3, [pc, #304]	; (800a730 <SPI_AbortTx_ISR+0x13c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a4c      	ldr	r2, [pc, #304]	; (800a734 <SPI_AbortTx_ISR+0x140>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	0a5b      	lsrs	r3, r3, #9
 800a608:	2264      	movs	r2, #100	; 0x64
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a61e:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800a632:	e009      	b.n	800a648 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3b01      	subs	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a644:	2b80      	cmp	r3, #128	; 0x80
 800a646:	d0eb      	beq.n	800a620 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a648:	f7f6 ffc4 	bl	80015d4 <HAL_GetTick>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	2164      	movs	r1, #100	; 0x64
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fe78 	bl	800a348 <SPI_EndRxTxTransaction>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2240      	movs	r2, #64	; 0x40
 800a662:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a672:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a674:	f7f6 ffae 	bl	80015d4 <HAL_GetTick>
 800a678:	4603      	mov	r3, r0
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	2364      	movs	r3, #100	; 0x64
 800a67e:	2200      	movs	r2, #0
 800a680:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff fd71 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <SPI_AbortTx_ISR+0xa2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2240      	movs	r2, #64	; 0x40
 800a694:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d13c      	bne.n	800a71e <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6b2:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a6c6:	e009      	b.n	800a6dc <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	d0eb      	beq.n	800a6b4 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a6dc:	f7f6 ff7a 	bl	80015d4 <HAL_GetTick>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	2364      	movs	r3, #100	; 0x64
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2180      	movs	r1, #128	; 0x80
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff fcb6 	bl	800a05c <SPI_WaitFlagStateUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2240      	movs	r2, #64	; 0x40
 800a6fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a6fc:	f7f6 ff6a 	bl	80015d4 <HAL_GetTick>
 800a700:	4603      	mov	r3, r0
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2364      	movs	r3, #100	; 0x64
 800a706:	2200      	movs	r2, #0
 800a708:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fd2d 	bl	800a16c <SPI_WaitFifoStateUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <SPI_AbortTx_ISR+0x12a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2240      	movs	r2, #64	; 0x40
 800a71c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2207      	movs	r2, #7
 800a722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2000006c 	.word	0x2000006c
 800a734:	057619f1 	.word	0x057619f1

0800a738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e042      	b.n	800a7d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7f6 fca9 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2224      	movs	r2, #36	; 0x24
 800a766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0201 	bic.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f002 f940 	bl	800ca00 <UART_SetConfig>
 800a780:	4603      	mov	r3, r0
 800a782:	2b01      	cmp	r3, #1
 800a784:	d101      	bne.n	800a78a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e022      	b.n	800a7d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f002 fc30 	bl	800cff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0201 	orr.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f002 fcb7 	bl	800d13c <UART_CheckIdleState>
 800a7ce:	4603      	mov	r3, r0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e04a      	b.n	800a880 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d106      	bne.n	800a802 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7f6 fc59 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2224      	movs	r2, #36	; 0x24
 800a806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0201 	bic.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f002 f8f0 	bl	800ca00 <UART_SetConfig>
 800a820:	4603      	mov	r3, r0
 800a822:	2b01      	cmp	r3, #1
 800a824:	d101      	bne.n	800a82a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e02a      	b.n	800a880 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f002 fbe0 	bl	800cff8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a856:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0208 	orr.w	r2, r2, #8
 800a866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 fc5f 	bl	800d13c <UART_CheckIdleState>
 800a87e:	4603      	mov	r3, r0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e061      	b.n	800a960 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a4:	d101      	bne.n	800a8aa <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e05a      	b.n	800a960 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e054      	b.n	800a960 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d106      	bne.n	800a8ce <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7f6 fbf3 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2224      	movs	r2, #36	; 0x24
 800a8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0201 	bic.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f002 f88a 	bl	800ca00 <UART_SetConfig>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <HAL_LIN_Init+0x6e>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e034      	b.n	800a960 <HAL_LIN_Init+0xd8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <HAL_LIN_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f002 fb7a 	bl	800cff8 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a922:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a932:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f023 0120 	bic.w	r1, r3, #32
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f002 fbef 	bl	800d13c <UART_CheckIdleState>
 800a95e:	4603      	mov	r3, r0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	460b      	mov	r3, r1
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e05b      	b.n	800aa38 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7f6 fb8e 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2224      	movs	r2, #36	; 0x24
 800a99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0201 	bic.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f002 f825 	bl	800ca00 <UART_SetConfig>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d101      	bne.n	800a9c0 <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e03b      	b.n	800aa38 <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f002 fb15 	bl	800cff8 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9ec:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9f4:	d10a      	bne.n	800aa0c <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	061a      	lsls	r2, r3, #24
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0201 	orr.w	r2, r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f002 fb83 	bl	800d13c <UART_CheckIdleState>
 800aa36:	4603      	mov	r3, r0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e02e      	b.n	800aab0 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	; 0x24
 800aa56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7f6 fbc8 	bl	8001218 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	f040 8084 	bne.w	800ac04 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <HAL_UART_Transmit+0x28>
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e07c      	b.n	800ac06 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <HAL_UART_Transmit+0x3a>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e075      	b.n	800ac06 <HAL_UART_Transmit+0x126>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2221      	movs	r2, #33	; 0x21
 800ab2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab32:	f7f6 fd4f 	bl	80015d4 <HAL_GetTick>
 800ab36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	88fa      	ldrh	r2, [r7, #6]
 800ab3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	88fa      	ldrh	r2, [r7, #6]
 800ab44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab50:	d108      	bne.n	800ab64 <HAL_UART_Transmit+0x84>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d104      	bne.n	800ab64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	61bb      	str	r3, [r7, #24]
 800ab62:	e003      	b.n	800ab6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ab74:	e02d      	b.n	800abd2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2180      	movs	r1, #128	; 0x80
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f002 fb26 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e03a      	b.n	800ac06 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	881a      	ldrh	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aba2:	b292      	uxth	r2, r2
 800aba4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	3302      	adds	r3, #2
 800abaa:	61bb      	str	r3, [r7, #24]
 800abac:	e008      	b.n	800abc0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	b292      	uxth	r2, r2
 800abb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	3301      	adds	r3, #1
 800abbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	3b01      	subs	r3, #1
 800abca:	b29a      	uxth	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1cb      	bne.n	800ab76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2200      	movs	r2, #0
 800abe6:	2140      	movs	r1, #64	; 0x40
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f002 faf2 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e006      	b.n	800ac06 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	e000      	b.n	800ac06 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ac04:	2302      	movs	r3, #2
  }
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b08a      	sub	sp, #40	; 0x28
 800ac12:	af02      	add	r7, sp, #8
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	603b      	str	r3, [r7, #0]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	2b20      	cmp	r3, #32
 800ac26:	f040 80c1 	bne.w	800adac <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <HAL_UART_Receive+0x28>
 800ac30:	88fb      	ldrh	r3, [r7, #6]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e0b9      	b.n	800adae <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d101      	bne.n	800ac48 <HAL_UART_Receive+0x3a>
 800ac44:	2302      	movs	r3, #2
 800ac46:	e0b2      	b.n	800adae <HAL_UART_Receive+0x1a0>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2222      	movs	r2, #34	; 0x22
 800ac5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac66:	f7f6 fcb5 	bl	80015d4 <HAL_GetTick>
 800ac6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	88fa      	ldrh	r2, [r7, #6]
 800ac70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	88fa      	ldrh	r2, [r7, #6]
 800ac78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac84:	d10e      	bne.n	800aca4 <HAL_UART_Receive+0x96>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <HAL_UART_Receive+0x8c>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac98:	e02d      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	22ff      	movs	r2, #255	; 0xff
 800ac9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aca2:	e028      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <HAL_UART_Receive+0xba>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d104      	bne.n	800acbe <HAL_UART_Receive+0xb0>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	22ff      	movs	r2, #255	; 0xff
 800acb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800acbc:	e01b      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	227f      	movs	r2, #127	; 0x7f
 800acc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800acc6:	e016      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acd0:	d10d      	bne.n	800acee <HAL_UART_Receive+0xe0>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <HAL_UART_Receive+0xd6>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	227f      	movs	r2, #127	; 0x7f
 800acde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ace2:	e008      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	223f      	movs	r2, #63	; 0x3f
 800ace8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800acec:	e003      	b.n	800acf6 <HAL_UART_Receive+0xe8>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acfc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad06:	d108      	bne.n	800ad1a <HAL_UART_Receive+0x10c>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	61bb      	str	r3, [r7, #24]
 800ad18:	e003      	b.n	800ad22 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ad2a:	e033      	b.n	800ad94 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2200      	movs	r2, #0
 800ad34:	2120      	movs	r1, #32
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f002 fa4b 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e033      	b.n	800adae <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10c      	bne.n	800ad66 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	8a7b      	ldrh	r3, [r7, #18]
 800ad56:	4013      	ands	r3, r2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	3302      	adds	r3, #2
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e00d      	b.n	800ad82 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	8a7b      	ldrh	r3, [r7, #18]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	4013      	ands	r3, r2
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1c5      	bne.n	800ad2c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	e000      	b.n	800adae <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800adac:	2302      	movs	r3, #2
  }
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b091      	sub	sp, #68	; 0x44
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	4613      	mov	r3, r2
 800adc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adca:	2b20      	cmp	r3, #32
 800adcc:	f040 808c 	bne.w	800aee8 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <HAL_UART_Transmit_IT+0x26>
 800add6:	88fb      	ldrh	r3, [r7, #6]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e084      	b.n	800aeea <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_UART_Transmit_IT+0x38>
 800adea:	2302      	movs	r3, #2
 800adec:	e07d      	b.n	800aeea <HAL_UART_Transmit_IT+0x134>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2221      	movs	r2, #33	; 0x21
 800ae1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2a:	d12e      	bne.n	800ae8a <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae34:	d107      	bne.n	800ae46 <HAL_UART_Transmit_IT+0x90>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d103      	bne.n	800ae46 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4a2d      	ldr	r2, [pc, #180]	; (800aef8 <HAL_UART_Transmit_IT+0x142>)
 800ae42:	675a      	str	r2, [r3, #116]	; 0x74
 800ae44:	e002      	b.n	800ae4c <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4a2c      	ldr	r2, [pc, #176]	; (800aefc <HAL_UART_Transmit_IT+0x146>)
 800ae4a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae74:	637a      	str	r2, [r7, #52]	; 0x34
 800ae76:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e5      	bne.n	800ae54 <HAL_UART_Transmit_IT+0x9e>
 800ae88:	e02c      	b.n	800aee4 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae92:	d107      	bne.n	800aea4 <HAL_UART_Transmit_IT+0xee>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4a18      	ldr	r2, [pc, #96]	; (800af00 <HAL_UART_Transmit_IT+0x14a>)
 800aea0:	675a      	str	r2, [r3, #116]	; 0x74
 800aea2:	e002      	b.n	800aeaa <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4a17      	ldr	r2, [pc, #92]	; (800af04 <HAL_UART_Transmit_IT+0x14e>)
 800aea8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	613b      	str	r3, [r7, #16]
   return(result);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	461a      	mov	r2, r3
 800aece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed0:	623b      	str	r3, [r7, #32]
 800aed2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed4:	69f9      	ldr	r1, [r7, #28]
 800aed6:	6a3a      	ldr	r2, [r7, #32]
 800aed8:	e841 2300 	strex	r3, r2, [r1]
 800aedc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e6      	bne.n	800aeb2 <HAL_UART_Transmit_IT+0xfc>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	e000      	b.n	800aeea <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aee8:	2302      	movs	r3, #2
  }
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3744      	adds	r7, #68	; 0x44
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	0800df17 	.word	0x0800df17
 800aefc:	0800de35 	.word	0x0800de35
 800af00:	0800dd73 	.word	0x0800dd73
 800af04:	0800dcb9 	.word	0x0800dcb9

0800af08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d142      	bne.n	800afa6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <HAL_UART_Receive_IT+0x24>
 800af26:	88fb      	ldrh	r3, [r7, #6]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e03b      	b.n	800afa8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af36:	2b01      	cmp	r3, #1
 800af38:	d101      	bne.n	800af3e <HAL_UART_Receive_IT+0x36>
 800af3a:	2302      	movs	r3, #2
 800af3c:	e034      	b.n	800afa8 <HAL_UART_Receive_IT+0xa0>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a17      	ldr	r2, [pc, #92]	; (800afb0 <HAL_UART_Receive_IT+0xa8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d01f      	beq.n	800af96 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d018      	beq.n	800af96 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	613b      	str	r3, [r7, #16]
   return(result);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	623b      	str	r3, [r7, #32]
 800af84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	69f9      	ldr	r1, [r7, #28]
 800af88:	6a3a      	ldr	r2, [r7, #32]
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e6      	bne.n	800af64 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	461a      	mov	r2, r3
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f002 f9e0 	bl	800d362 <UART_Start_Receive_IT>
 800afa2:	4603      	mov	r3, r0
 800afa4:	e000      	b.n	800afa8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800afa6:	2302      	movs	r3, #2
  }
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3728      	adds	r7, #40	; 0x28
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	40008000 	.word	0x40008000

0800afb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	; 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4613      	mov	r3, r2
 800afc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc8:	2b20      	cmp	r3, #32
 800afca:	d17a      	bne.n	800b0c2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <HAL_UART_Transmit_DMA+0x24>
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e073      	b.n	800b0c4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <HAL_UART_Transmit_DMA+0x36>
 800afe6:	2302      	movs	r3, #2
 800afe8:	e06c      	b.n	800b0c4 <HAL_UART_Transmit_DMA+0x110>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2201      	movs	r2, #1
 800afee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	88fa      	ldrh	r2, [r7, #6]
 800affc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	88fa      	ldrh	r2, [r7, #6]
 800b004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2221      	movs	r2, #33	; 0x21
 800b014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d02c      	beq.n	800b07a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b024:	4a29      	ldr	r2, [pc, #164]	; (800b0cc <HAL_UART_Transmit_DMA+0x118>)
 800b026:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b02c:	4a28      	ldr	r2, [pc, #160]	; (800b0d0 <HAL_UART_Transmit_DMA+0x11c>)
 800b02e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b034:	4a27      	ldr	r2, [pc, #156]	; (800b0d4 <HAL_UART_Transmit_DMA+0x120>)
 800b036:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b03c:	2200      	movs	r2, #0
 800b03e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b048:	4619      	mov	r1, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3328      	adds	r3, #40	; 0x28
 800b050:	461a      	mov	r2, r3
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	f7f7 f95b 	bl	800230e <HAL_DMA_Start_IT>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00d      	beq.n	800b07a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2210      	movs	r2, #16
 800b062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2220      	movs	r2, #32
 800b072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e024      	b.n	800b0c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2240      	movs	r2, #64	; 0x40
 800b080:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	613b      	str	r3, [r7, #16]
   return(result);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0aa:	623a      	str	r2, [r7, #32]
 800b0ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	69f9      	ldr	r1, [r7, #28]
 800b0b0:	6a3a      	ldr	r2, [r7, #32]
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e5      	bne.n	800b08a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e000      	b.n	800b0c4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b0c2:	2302      	movs	r3, #2
  }
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3728      	adds	r7, #40	; 0x28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	0800d853 	.word	0x0800d853
 800b0d0:	0800d8ed 	.word	0x0800d8ed
 800b0d4:	0800da67 	.word	0x0800da67

0800b0d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	; 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d142      	bne.n	800b176 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_UART_Receive_DMA+0x24>
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e03b      	b.n	800b178 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b106:	2b01      	cmp	r3, #1
 800b108:	d101      	bne.n	800b10e <HAL_UART_Receive_DMA+0x36>
 800b10a:	2302      	movs	r3, #2
 800b10c:	e034      	b.n	800b178 <HAL_UART_Receive_DMA+0xa0>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a17      	ldr	r2, [pc, #92]	; (800b180 <HAL_UART_Receive_DMA+0xa8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d01f      	beq.n	800b166 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d018      	beq.n	800b166 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	613b      	str	r3, [r7, #16]
   return(result);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	623b      	str	r3, [r7, #32]
 800b154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	69f9      	ldr	r1, [r7, #28]
 800b158:	6a3a      	ldr	r2, [r7, #32]
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e6      	bne.n	800b134 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	461a      	mov	r2, r3
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f002 fa21 	bl	800d5b4 <UART_Start_Receive_DMA>
 800b172:	4603      	mov	r3, r0
 800b174:	e000      	b.n	800b178 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b176:	2302      	movs	r3, #2
  }
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	; 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40008000 	.word	0x40008000

0800b184 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800b184:	b480      	push	{r7}
 800b186:	b09d      	sub	sp, #116	; 0x74
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b192:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d101      	bne.n	800b1aa <HAL_UART_DMAPause+0x26>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e083      	b.n	800b2b2 <HAL_UART_DMAPause+0x12e>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1bc:	2b80      	cmp	r3, #128	; 0x80
 800b1be:	d11c      	bne.n	800b1fa <HAL_UART_DMAPause+0x76>
 800b1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c2:	2b21      	cmp	r3, #33	; 0x21
 800b1c4:	d119      	bne.n	800b1fa <HAL_UART_DMAPause+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b1e6:	657a      	str	r2, [r7, #84]	; 0x54
 800b1e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e5      	bne.n	800b1c6 <HAL_UART_DMAPause+0x42>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	d14f      	bne.n	800b2a8 <HAL_UART_DMAPause+0x124>
 800b208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b20a:	2b22      	cmp	r3, #34	; 0x22
 800b20c:	d14c      	bne.n	800b2a8 <HAL_UART_DMAPause+0x124>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b216:	e853 3f00 	ldrex	r3, [r3]
 800b21a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b222:	663b      	str	r3, [r7, #96]	; 0x60
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b22c:	643b      	str	r3, [r7, #64]	; 0x40
 800b22e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b234:	e841 2300 	strex	r3, r2, [r1]
 800b238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1e6      	bne.n	800b20e <HAL_UART_DMAPause+0x8a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3308      	adds	r3, #8
 800b246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f023 0301 	bic.w	r3, r3, #1
 800b256:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3308      	adds	r3, #8
 800b25e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b260:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b268:	e841 2300 	strex	r3, r2, [r1]
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e5      	bne.n	800b240 <HAL_UART_DMAPause+0xbc>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	e853 3f00 	ldrex	r3, [r3]
 800b282:	60bb      	str	r3, [r7, #8]
   return(result);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b28a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b294:	61ba      	str	r2, [r7, #24]
 800b296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6979      	ldr	r1, [r7, #20]
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e5      	bne.n	800b274 <HAL_UART_DMAPause+0xf0>
  }

  __HAL_UNLOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3774      	adds	r7, #116	; 0x74
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b09b      	sub	sp, #108	; 0x6c
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d101      	bne.n	800b2d4 <HAL_UART_DMAResume+0x16>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e081      	b.n	800b3d8 <HAL_UART_DMAResume+0x11a>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2e2:	2b21      	cmp	r3, #33	; 0x21
 800b2e4:	d119      	bne.n	800b31a <HAL_UART_DMAResume+0x5c>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b306:	657a      	str	r2, [r7, #84]	; 0x54
 800b308:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b30c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e5      	bne.n	800b2e6 <HAL_UART_DMAResume+0x28>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b320:	2b22      	cmp	r3, #34	; 0x22
 800b322:	d154      	bne.n	800b3ce <HAL_UART_DMAResume+0x110>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2208      	movs	r2, #8
 800b32a:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <HAL_UART_DMAResume+0xa8>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b348:	663b      	str	r3, [r7, #96]	; 0x60
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b352:	643b      	str	r3, [r7, #64]	; 0x40
 800b354:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e6      	bne.n	800b334 <HAL_UART_DMAResume+0x76>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3308      	adds	r3, #8
 800b36c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	61fb      	str	r3, [r7, #28]
   return(result);
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	f043 0301 	orr.w	r3, r3, #1
 800b37c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3308      	adds	r3, #8
 800b384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b386:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e5      	bne.n	800b366 <HAL_UART_DMAResume+0xa8>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3ba:	61ba      	str	r2, [r7, #24]
 800b3bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6979      	ldr	r1, [r7, #20]
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e5      	bne.n	800b39a <HAL_UART_DMAResume+0xdc>
  }

  __HAL_UNLOCK(huart);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	376c      	adds	r7, #108	; 0x6c
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b090      	sub	sp, #64	; 0x40
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b406:	2b80      	cmp	r3, #128	; 0x80
 800b408:	d139      	bne.n	800b47e <HAL_UART_DMAStop+0x9a>
 800b40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40c:	2b21      	cmp	r3, #33	; 0x21
 800b40e:	d136      	bne.n	800b47e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b426:	637b      	str	r3, [r7, #52]	; 0x34
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b430:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e5      	bne.n	800b410 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d015      	beq.n	800b478 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b450:	4618      	mov	r0, r3
 800b452:	f7f6 ffd7 	bl	8002404 <HAL_DMA_Abort>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00d      	beq.n	800b478 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b460:	4618      	mov	r0, r3
 800b462:	f7f7 fac0 	bl	80029e6 <HAL_DMA_GetError>
 800b466:	4603      	mov	r3, r0
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d105      	bne.n	800b478 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2210      	movs	r2, #16
 800b470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e044      	b.n	800b502 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f002 f943 	bl	800d704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d139      	bne.n	800b500 <HAL_UART_DMAStop+0x11c>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	2b22      	cmp	r3, #34	; 0x22
 800b490:	d136      	bne.n	800b500 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a8:	633b      	str	r3, [r7, #48]	; 0x30
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b2:	61ba      	str	r2, [r7, #24]
 800b4b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e5      	bne.n	800b492 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d015      	beq.n	800b4fa <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f6 ff96 	bl	8002404 <HAL_DMA_Abort>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f7 fa7f 	bl	80029e6 <HAL_DMA_GetError>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	d105      	bne.n	800b4fa <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2210      	movs	r2, #16
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e003      	b.n	800b502 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f002 f943 	bl	800d786 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3740      	adds	r7, #64	; 0x40
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b0a0      	sub	sp, #128	; 0x80
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b51a:	e853 3f00 	ldrex	r3, [r3]
 800b51e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b522:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800b526:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b530:	66bb      	str	r3, [r7, #104]	; 0x68
 800b532:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b534:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b538:	e841 2300 	strex	r3, r2, [r1]
 800b53c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b53e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e6      	bne.n	800b512 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b556:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b568:	657a      	str	r2, [r7, #84]	; 0x54
 800b56a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e3      	bne.n	800b544 <HAL_UART_Abort+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	2b01      	cmp	r3, #1
 800b582:	d118      	bne.n	800b5b6 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	f023 0310 	bic.w	r3, r3, #16
 800b598:	677b      	str	r3, [r7, #116]	; 0x74
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b5a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e6      	bne.n	800b584 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c0:	2b80      	cmp	r3, #128	; 0x80
 800b5c2:	d137      	bne.n	800b634 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5da:	673b      	str	r3, [r7, #112]	; 0x70
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b5e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ec:	e841 2300 	strex	r3, r2, [r1]
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e5      	bne.n	800b5c4 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d019      	beq.n	800b634 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b604:	2200      	movs	r2, #0
 800b606:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f6 fef9 	bl	8002404 <HAL_DMA_Abort>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00d      	beq.n	800b634 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f7 f9e2 	bl	80029e6 <HAL_DMA_GetError>
 800b622:	4603      	mov	r3, r0
 800b624:	2b20      	cmp	r3, #32
 800b626:	d105      	bne.n	800b634 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2210      	movs	r2, #16
 800b62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e073      	b.n	800b71c <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63e:	2b40      	cmp	r3, #64	; 0x40
 800b640:	d137      	bne.n	800b6b2 <HAL_UART_Abort+0x1a8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	60bb      	str	r3, [r7, #8]
   return(result);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b662:	61ba      	str	r2, [r7, #24]
 800b664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6979      	ldr	r1, [r7, #20]
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	613b      	str	r3, [r7, #16]
   return(result);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e5      	bne.n	800b642 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d019      	beq.n	800b6b2 <HAL_UART_Abort+0x1a8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b682:	2200      	movs	r2, #0
 800b684:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f6 feba 	bl	8002404 <HAL_DMA_Abort>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00d      	beq.n	800b6b2 <HAL_UART_Abort+0x1a8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7f7 f9a3 	bl	80029e6 <HAL_DMA_GetError>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	d105      	bne.n	800b6b2 <HAL_UART_Abort+0x1a8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e034      	b.n	800b71c <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	220f      	movs	r2, #15
 800b6c8:	621a      	str	r2, [r3, #32]

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d2:	d109      	bne.n	800b6e8 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	8b1b      	ldrh	r3, [r3, #24]
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f042 0210 	orr.w	r2, r2, #16
 800b6e4:	b292      	uxth	r2, r2
 800b6e6:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	8b1b      	ldrh	r3, [r3, #24]
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f042 0208 	orr.w	r2, r2, #8
 800b6f8:	b292      	uxth	r2, r2
 800b6fa:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2220      	movs	r2, #32
 800b700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2220      	movs	r2, #32
 800b708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3780      	adds	r7, #128	; 0x80
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b094      	sub	sp, #80	; 0x50
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b734:	e853 3f00 	ldrex	r3, [r3]
 800b738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74a:	643b      	str	r3, [r7, #64]	; 0x40
 800b74c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e6      	bne.n	800b72c <HAL_UART_AbortTransmit+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3308      	adds	r3, #8
 800b764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b774:	64bb      	str	r3, [r7, #72]	; 0x48
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3308      	adds	r3, #8
 800b77c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b77e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e5      	bne.n	800b75e <HAL_UART_AbortTransmit+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79c:	2b80      	cmp	r3, #128	; 0x80
 800b79e:	d137      	bne.n	800b810 <HAL_UART_AbortTransmit+0xec>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3308      	adds	r3, #8
 800b7be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c0:	61ba      	str	r2, [r7, #24]
 800b7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e5      	bne.n	800b7a0 <HAL_UART_AbortTransmit+0x7c>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d019      	beq.n	800b810 <HAL_UART_AbortTransmit+0xec>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f6 fe0b 	bl	8002404 <HAL_DMA_Abort>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00d      	beq.n	800b810 <HAL_UART_AbortTransmit+0xec>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f7 f8f4 	bl	80029e6 <HAL_DMA_GetError>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b20      	cmp	r3, #32
 800b802:	d105      	bne.n	800b810 <HAL_UART_AbortTransmit+0xec>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2210      	movs	r2, #16
 800b808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e017      	b.n	800b840 <HAL_UART_AbortTransmit+0x11c>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b820:	d109      	bne.n	800b836 <HAL_UART_AbortTransmit+0x112>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	8b1b      	ldrh	r3, [r3, #24]
 800b828:	b29a      	uxth	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f042 0210 	orr.w	r2, r2, #16
 800b832:	b292      	uxth	r2, r2
 800b834:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2220      	movs	r2, #32
 800b83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3750      	adds	r7, #80	; 0x50
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b09a      	sub	sp, #104	; 0x68
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b858:	e853 3f00 	ldrex	r3, [r3]
 800b85c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b864:	667b      	str	r3, [r7, #100]	; 0x64
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b86e:	657b      	str	r3, [r7, #84]	; 0x54
 800b870:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e6      	bne.n	800b850 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3308      	adds	r3, #8
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b898:	f023 0301 	bic.w	r3, r3, #1
 800b89c:	663b      	str	r3, [r7, #96]	; 0x60
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8a6:	643a      	str	r2, [r7, #64]	; 0x40
 800b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e3      	bne.n	800b882 <HAL_UART_AbortReceive+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d118      	bne.n	800b8f4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f023 0310 	bic.w	r3, r3, #16
 800b8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e6      	bne.n	800b8c2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fe:	2b40      	cmp	r3, #64	; 0x40
 800b900:	d137      	bne.n	800b972 <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3308      	adds	r3, #8
 800b908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	e853 3f00 	ldrex	r3, [r3]
 800b910:	60bb      	str	r3, [r7, #8]
   return(result);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b918:	65bb      	str	r3, [r7, #88]	; 0x58
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3308      	adds	r3, #8
 800b920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b922:	61ba      	str	r2, [r7, #24]
 800b924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b926:	6979      	ldr	r1, [r7, #20]
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	e841 2300 	strex	r3, r2, [r1]
 800b92e:	613b      	str	r3, [r7, #16]
   return(result);
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1e5      	bne.n	800b902 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d019      	beq.n	800b972 <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b942:	2200      	movs	r2, #0
 800b944:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f6 fd5a 	bl	8002404 <HAL_DMA_Abort>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7f7 f843 	bl	80029e6 <HAL_DMA_GetError>
 800b960:	4603      	mov	r3, r0
 800b962:	2b20      	cmp	r3, #32
 800b964:	d105      	bne.n	800b972 <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2210      	movs	r2, #16
 800b96a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	e019      	b.n	800b9a6 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	220f      	movs	r2, #15
 800b980:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	8b1b      	ldrh	r3, [r3, #24]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0208 	orr.w	r2, r2, #8
 800b992:	b292      	uxth	r2, r2
 800b994:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3768      	adds	r7, #104	; 0x68
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b0a2      	sub	sp, #136	; 0x88
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9cc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800b9d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9e0:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e4      	bne.n	800b9bc <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba04:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 800ba08:	f023 0301 	bic.w	r3, r3, #1
 800ba0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ba16:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e3      	bne.n	800b9f2 <HAL_UART_Abort_IT+0x44>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d118      	bne.n	800ba64 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba42:	f023 0310 	bic.w	r3, r3, #16
 800ba46:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba50:	647b      	str	r3, [r7, #68]	; 0x44
 800ba52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e6      	bne.n	800ba32 <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00f      	beq.n	800ba8c <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba76:	2b80      	cmp	r3, #128	; 0x80
 800ba78:	d104      	bne.n	800ba84 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba7e:	4a67      	ldr	r2, [pc, #412]	; (800bc1c <HAL_UART_Abort_IT+0x26e>)
 800ba80:	639a      	str	r2, [r3, #56]	; 0x38
 800ba82:	e003      	b.n	800ba8c <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba88:	2200      	movs	r2, #0
 800ba8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00f      	beq.n	800bab4 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9e:	2b40      	cmp	r3, #64	; 0x40
 800baa0:	d104      	bne.n	800baac <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baa6:	4a5e      	ldr	r2, [pc, #376]	; (800bc20 <HAL_UART_Abort_IT+0x272>)
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
 800baaa:	e003      	b.n	800bab4 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bab0:	2200      	movs	r2, #0
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800babe:	2b80      	cmp	r3, #128	; 0x80
 800bac0:	d12d      	bne.n	800bb1e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3308      	adds	r3, #8
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	623b      	str	r3, [r7, #32]
   return(result);
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad8:	677b      	str	r3, [r7, #116]	; 0x74
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3308      	adds	r3, #8
 800bae0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bae2:	633a      	str	r2, [r7, #48]	; 0x30
 800bae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e5      	bne.n	800bac2 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00f      	beq.n	800bb1e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f6 fcda 	bl	80024bc <HAL_DMA_Abort_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb12:	2200      	movs	r2, #0
 800bb14:	639a      	str	r2, [r3, #56]	; 0x38
 800bb16:	e002      	b.n	800bb1e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb28:	2b40      	cmp	r3, #64	; 0x40
 800bb2a:	d130      	bne.n	800bb8e <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3308      	adds	r3, #8
 800bb32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	e853 3f00 	ldrex	r3, [r3]
 800bb3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb42:	673b      	str	r3, [r7, #112]	; 0x70
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3308      	adds	r3, #8
 800bb4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb4c:	61fa      	str	r2, [r7, #28]
 800bb4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb50:	69b9      	ldr	r1, [r7, #24]
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	e841 2300 	strex	r3, r2, [r1]
 800bb58:	617b      	str	r3, [r7, #20]
   return(result);
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1e5      	bne.n	800bb2c <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d012      	beq.n	800bb8e <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7f6 fca5 	bl	80024bc <HAL_DMA_Abort_IT>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d007      	beq.n	800bb88 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb86:	e002      	b.n	800bb8e <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800bb8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d13c      	bne.n	800bc10 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	220f      	movs	r2, #15
 800bbc0:	621a      	str	r2, [r3, #32]

#if defined(USART_CR1_FIFOEN)
    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbca:	d109      	bne.n	800bbe0 <HAL_UART_Abort_IT+0x232>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	8b1b      	ldrh	r3, [r3, #24]
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0210 	orr.w	r2, r2, #16
 800bbdc:	b292      	uxth	r2, r2
 800bbde:	831a      	strh	r2, [r3, #24]
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	8b1b      	ldrh	r3, [r3, #24]
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f042 0208 	orr.w	r2, r2, #8
 800bbf0:	b292      	uxth	r2, r2
 800bbf2:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fcc3 	bl	800c596 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3788      	adds	r7, #136	; 0x88
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	0800db13 	.word	0x0800db13
 800bc20:	0800db9f 	.word	0x0800db9f

0800bc24 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b094      	sub	sp, #80	; 0x50
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc34:	e853 3f00 	ldrex	r3, [r3]
 800bc38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bc40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e6      	bne.n	800bc2c <HAL_UART_AbortTransmit_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3308      	adds	r3, #8
 800bc64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc74:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e5      	bne.n	800bc5e <HAL_UART_AbortTransmit_IT+0x3a>
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9c:	2b80      	cmp	r3, #128	; 0x80
 800bc9e:	d140      	bne.n	800bd22 <HAL_UART_AbortTransmit_IT+0xfe>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3308      	adds	r3, #8
 800bca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	e853 3f00 	ldrex	r3, [r3]
 800bcae:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb6:	647b      	str	r3, [r7, #68]	; 0x44
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcc0:	61ba      	str	r2, [r7, #24]
 800bcc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	6979      	ldr	r1, [r7, #20]
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	613b      	str	r3, [r7, #16]
   return(result);
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e5      	bne.n	800bca0 <HAL_UART_AbortTransmit_IT+0x7c>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d013      	beq.n	800bd04 <HAL_UART_AbortTransmit_IT+0xe0>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bce0:	4a21      	ldr	r2, [pc, #132]	; (800bd68 <HAL_UART_AbortTransmit_IT+0x144>)
 800bce2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f6 fbe7 	bl	80024bc <HAL_DMA_Abort_IT>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d033      	beq.n	800bd5c <HAL_UART_AbortTransmit_IT+0x138>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bcfe:	4610      	mov	r0, r2
 800bd00:	4798      	blx	r3
 800bd02:	e02b      	b.n	800bd5c <HAL_UART_AbortTransmit_IT+0x138>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	675a      	str	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fc45 	bl	800c5aa <HAL_UART_AbortTransmitCpltCallback>
 800bd20:	e01c      	b.n	800bd5c <HAL_UART_AbortTransmit_IT+0x138>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	675a      	str	r2, [r3, #116]	; 0x74

#if defined(USART_CR1_FIFOEN)
    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd38:	d109      	bne.n	800bd4e <HAL_UART_AbortTransmit_IT+0x12a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	8b1b      	ldrh	r3, [r3, #24]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f042 0210 	orr.w	r2, r2, #16
 800bd4a:	b292      	uxth	r2, r2
 800bd4c:	831a      	strh	r2, [r3, #24]
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fc27 	bl	800c5aa <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3750      	adds	r7, #80	; 0x50
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0800dc21 	.word	0x0800dc21

0800bd6c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b09a      	sub	sp, #104	; 0x68
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bd82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd88:	667b      	str	r3, [r7, #100]	; 0x64
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd92:	657b      	str	r3, [r7, #84]	; 0x54
 800bd94:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e6      	bne.n	800bd74 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdbc:	f023 0301 	bic.w	r3, r3, #1
 800bdc0:	663b      	str	r3, [r7, #96]	; 0x60
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdca:	643a      	str	r2, [r7, #64]	; 0x40
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdd2:	e841 2300 	strex	r3, r2, [r1]
 800bdd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e3      	bne.n	800bda6 <HAL_UART_AbortReceive_IT+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d118      	bne.n	800be18 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f023 0310 	bic.w	r3, r3, #16
 800bdfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e6      	bne.n	800bde6 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be22:	2b40      	cmp	r3, #64	; 0x40
 800be24:	d151      	bne.n	800beca <HAL_UART_AbortReceive_IT+0x15e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	e853 3f00 	ldrex	r3, [r3]
 800be34:	60bb      	str	r3, [r7, #8]
   return(result);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3308      	adds	r3, #8
 800be44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be46:	61ba      	str	r2, [r7, #24]
 800be48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4a:	6979      	ldr	r1, [r7, #20]
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	e841 2300 	strex	r3, r2, [r1]
 800be52:	613b      	str	r3, [r7, #16]
   return(result);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1e5      	bne.n	800be26 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d013      	beq.n	800be8a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be66:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <HAL_UART_AbortReceive_IT+0x194>)
 800be68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6e:	4618      	mov	r0, r3
 800be70:	f7f6 fb24 	bl	80024bc <HAL_DMA_Abort_IT>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d03c      	beq.n	800bef4 <HAL_UART_AbortReceive_IT+0x188>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	e034      	b.n	800bef4 <HAL_UART_AbortReceive_IT+0x188>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	220f      	movs	r2, #15
 800be9e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	8b1b      	ldrh	r3, [r3, #24]
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f042 0208 	orr.w	r2, r2, #8
 800beb0:	b292      	uxth	r2, r2
 800beb2:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2220      	movs	r2, #32
 800beb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fb7b 	bl	800c5be <HAL_UART_AbortReceiveCpltCallback>
 800bec8:	e014      	b.n	800bef4 <HAL_UART_AbortReceive_IT+0x188>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	220f      	movs	r2, #15
 800bede:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fb65 	bl	800c5be <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3768      	adds	r7, #104	; 0x68
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0800dc6b 	.word	0x0800dc6b

0800bf04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b0ba      	sub	sp, #232	; 0xe8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf32:	4013      	ands	r3, r2
 800bf34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d11b      	bne.n	800bf78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf44:	f003 0320 	and.w	r3, r3, #32
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d015      	beq.n	800bf78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf50:	f003 0320 	and.w	r3, r3, #32
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 82d6 	beq.w	800c51a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
      }
      return;
 800bf76:	e2d0      	b.n	800c51a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800bf78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 811f 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf86:	4b8b      	ldr	r3, [pc, #556]	; (800c1b4 <HAL_UART_IRQHandler+0x2b0>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf92:	4b89      	ldr	r3, [pc, #548]	; (800c1b8 <HAL_UART_IRQHandler+0x2b4>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f000 8112 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d011      	beq.n	800bfcc <HAL_UART_IRQHandler+0xc8>
 800bfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfc2:	f043 0201 	orr.w	r2, r3, #1
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d011      	beq.n	800bffc <HAL_UART_IRQHandler+0xf8>
 800bfd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00b      	beq.n	800bffc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bff2:	f043 0204 	orr.w	r2, r3, #4
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d011      	beq.n	800c02c <HAL_UART_IRQHandler+0x128>
 800c008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2204      	movs	r2, #4
 800c01a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c022:	f043 0202 	orr.w	r2, r3, #2
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	2b00      	cmp	r3, #0
 800c036:	d017      	beq.n	800c068 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03c:	f003 0320 	and.w	r3, r3, #32
 800c040:	2b00      	cmp	r3, #0
 800c042:	d105      	bne.n	800c050 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c048:	4b5a      	ldr	r3, [pc, #360]	; (800c1b4 <HAL_UART_IRQHandler+0x2b0>)
 800c04a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2208      	movs	r2, #8
 800c056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05e:	f043 0208 	orr.w	r2, r3, #8
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c070:	2b00      	cmp	r3, #0
 800c072:	d012      	beq.n	800c09a <HAL_UART_IRQHandler+0x196>
 800c074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00c      	beq.n	800c09a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c090:	f043 0220 	orr.w	r2, r3, #32
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 823c 	beq.w	800c51e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d013      	beq.n	800c0da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d105      	bne.n	800c0ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d007      	beq.n	800c0da <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ee:	2b40      	cmp	r3, #64	; 0x40
 800c0f0:	d005      	beq.n	800c0fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d04f      	beq.n	800c19e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 fb41 	bl	800d786 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10e:	2b40      	cmp	r3, #64	; 0x40
 800c110:	d141      	bne.n	800c196 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c13e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c14a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1d9      	bne.n	800c112 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c162:	2b00      	cmp	r3, #0
 800c164:	d013      	beq.n	800c18e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16a:	4a14      	ldr	r2, [pc, #80]	; (800c1bc <HAL_UART_IRQHandler+0x2b8>)
 800c16c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	4618      	mov	r0, r3
 800c174:	f7f6 f9a2 	bl	80024bc <HAL_DMA_Abort_IT>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d017      	beq.n	800c1ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c188:	4610      	mov	r0, r2
 800c18a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c18c:	e00f      	b.n	800c1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f9f7 	bl	800c582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c194:	e00b      	b.n	800c1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f9f3 	bl	800c582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c19c:	e007      	b.n	800c1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f9ef 	bl	800c582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c1ac:	e1b7      	b.n	800c51e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ae:	bf00      	nop
    return;
 800c1b0:	e1b5      	b.n	800c51e <HAL_UART_IRQHandler+0x61a>
 800c1b2:	bf00      	nop
 800c1b4:	10000001 	.word	0x10000001
 800c1b8:	04000120 	.word	0x04000120
 800c1bc:	0800dae7 	.word	0x0800dae7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	f040 814a 	bne.w	800c45e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ce:	f003 0310 	and.w	r3, r3, #16
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 8143 	beq.w	800c45e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 813c 	beq.w	800c45e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2210      	movs	r2, #16
 800c1ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b40      	cmp	r3, #64	; 0x40
 800c1fa:	f040 80b5 	bne.w	800c368 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c20a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8187 	beq.w	800c522 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c21a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c21e:	429a      	cmp	r2, r3
 800c220:	f080 817f 	bcs.w	800c522 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c22a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0320 	and.w	r3, r3, #32
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 8086 	bne.w	800c34c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c25c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c26a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c26e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c27a:	e841 2300 	strex	r3, r2, [r1]
 800c27e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1da      	bne.n	800c240 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c29a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c29c:	f023 0301 	bic.w	r3, r3, #1
 800c2a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e1      	bne.n	800c28a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c2ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e3      	bne.n	800c2c6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c31c:	f023 0310 	bic.w	r3, r3, #16
 800c320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	461a      	mov	r2, r3
 800c32a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c32e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1e4      	bne.n	800c30c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c346:	4618      	mov	r0, r3
 800c348:	f7f6 f85c 	bl	8002404 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c358:	b29b      	uxth	r3, r3
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 f936 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c366:	e0dc      	b.n	800c522 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c374:	b29b      	uxth	r3, r3
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c382:	b29b      	uxth	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 80ce 	beq.w	800c526 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c38a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80c9 	beq.w	800c526 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800c3b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e4      	bne.n	800c394 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e0:	f023 0301 	bic.w	r3, r3, #1
 800c3e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3f2:	633a      	str	r2, [r7, #48]	; 0x30
 800c3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e1      	bne.n	800c3ca <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2220      	movs	r2, #32
 800c40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	60fb      	str	r3, [r7, #12]
   return(result);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f023 0310 	bic.w	r3, r3, #16
 800c42e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c43c:	61fb      	str	r3, [r7, #28]
 800c43e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	69b9      	ldr	r1, [r7, #24]
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	617b      	str	r3, [r7, #20]
   return(result);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e4      	bne.n	800c41a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f8bb 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c45c:	e063      	b.n	800c526 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00e      	beq.n	800c488 <HAL_UART_IRQHandler+0x584>
 800c46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c472:	2b00      	cmp	r3, #0
 800c474:	d008      	beq.n	800c488 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c47e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f002 fab4 	bl	800e9ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c486:	e051      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c48c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c490:	2b00      	cmp	r3, #0
 800c492:	d014      	beq.n	800c4be <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d105      	bne.n	800c4ac <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c4a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d008      	beq.n	800c4be <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d03a      	beq.n	800c52a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	4798      	blx	r3
    }
    return;
 800c4bc:	e035      	b.n	800c52a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d009      	beq.n	800c4de <HAL_UART_IRQHandler+0x5da>
 800c4ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fd92 	bl	800e000 <UART_EndTransmit_IT>
    return;
 800c4dc:	e026      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <HAL_UART_IRQHandler+0x5fa>
 800c4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f002 fa8d 	bl	800ea16 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4fc:	e016      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d010      	beq.n	800c52c <HAL_UART_IRQHandler+0x628>
 800c50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	da0c      	bge.n	800c52c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f002 fa75 	bl	800ea02 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c518:	e008      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
      return;
 800c51a:	bf00      	nop
 800c51c:	e006      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
    return;
 800c51e:	bf00      	nop
 800c520:	e004      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
      return;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
      return;
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <HAL_UART_IRQHandler+0x628>
    return;
 800c52a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800c52c:	37e8      	adds	r7, #232	; 0xe8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c53a:	bf00      	nop
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c54e:	bf00      	nop
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c562:	bf00      	nop
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c56e:	b480      	push	{r7}
 800c570:	b083      	sub	sp, #12
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c5b2:	bf00      	nop
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a09      	ldr	r2, [pc, #36]	; (800c620 <HAL_UART_ReceiverTimeout_Config+0x36>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d009      	beq.n	800c612 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	615a      	str	r2, [r3, #20]
  }
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	40008000 	.word	0x40008000

0800c624 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a18      	ldr	r2, [pc, #96]	; (800c694 <HAL_UART_EnableReceiverTimeout+0x70>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d027      	beq.n	800c686 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c63c:	2b20      	cmp	r3, #32
 800c63e:	d120      	bne.n	800c682 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c646:	2b01      	cmp	r3, #1
 800c648:	d101      	bne.n	800c64e <HAL_UART_EnableReceiverTimeout+0x2a>
 800c64a:	2302      	movs	r3, #2
 800c64c:	e01c      	b.n	800c688 <HAL_UART_EnableReceiverTimeout+0x64>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      huart->gState = HAL_UART_STATE_BUSY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2224      	movs	r2, #36	; 0x24
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c66c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      return HAL_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	e002      	b.n	800c688 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c682:	2302      	movs	r3, #2
 800c684:	e000      	b.n	800c688 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
  }
}
 800c688:	4618      	mov	r0, r3
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	40008000 	.word	0x40008000

0800c698 <HAL_UART_DisableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a18      	ldr	r2, [pc, #96]	; (800c708 <HAL_UART_DisableReceiverTimeout+0x70>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d027      	beq.n	800c6fa <HAL_UART_DisableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6b0:	2b20      	cmp	r3, #32
 800c6b2:	d120      	bne.n	800c6f6 <HAL_UART_DisableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d101      	bne.n	800c6c2 <HAL_UART_DisableReceiverTimeout+0x2a>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e01c      	b.n	800c6fc <HAL_UART_DisableReceiverTimeout+0x64>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      huart->gState = HAL_UART_STATE_BUSY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2224      	movs	r2, #36	; 0x24
 800c6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear the USART RTOEN bit */
      CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c6e0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e002      	b.n	800c6fc <HAL_UART_DisableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	e000      	b.n	800c6fc <HAL_UART_DisableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
  }
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	40008000 	.word	0x40008000

0800c70c <HAL_MultiProcessor_EnableMuteMode>:
  *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <HAL_MultiProcessor_EnableMuteMode+0x16>
 800c71e:	2302      	movs	r3, #2
 800c720:	e028      	b.n	800c774 <HAL_MultiProcessor_EnableMuteMode+0x68>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2224      	movs	r2, #36	; 0x24
 800c72e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable USART mute mode by setting the MME bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c746:	61fb      	str	r3, [r7, #28]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	61bb      	str	r3, [r7, #24]
 800c752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6979      	ldr	r1, [r7, #20]
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	613b      	str	r3, [r7, #16]
   return(result);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e6      	bne.n	800c732 <HAL_MultiProcessor_EnableMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2220      	movs	r2, #32
 800c768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return (UART_CheckIdleState(huart));
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fce5 	bl	800d13c <UART_CheckIdleState>
 800c772:	4603      	mov	r3, r0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <HAL_MultiProcessor_DisableMuteMode>:
  *         as it may not have been in mute mode at this very moment).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d101      	bne.n	800c792 <HAL_MultiProcessor_DisableMuteMode+0x16>
 800c78e:	2302      	movs	r3, #2
 800c790:	e028      	b.n	800c7e4 <HAL_MultiProcessor_DisableMuteMode+0x68>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2201      	movs	r2, #1
 800c796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2224      	movs	r2, #36	; 0x24
 800c79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable USART mute mode by clearing the MME bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	e853 3f00 	ldrex	r3, [r3]
 800c7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7b6:	61fb      	str	r3, [r7, #28]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	61bb      	str	r3, [r7, #24]
 800c7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	6979      	ldr	r1, [r7, #20]
 800c7c6:	69ba      	ldr	r2, [r7, #24]
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e6      	bne.n	800c7a2 <HAL_MultiProcessor_DisableMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return (UART_CheckIdleState(huart));
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fcad 	bl	800d13c <UART_CheckIdleState>
 800c7e2:	4603      	mov	r3, r0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3720      	adds	r7, #32
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_MultiProcessor_EnterMuteMode>:
  * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
  * @param huart UART handle.
  * @retval None
  */
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	8b1b      	ldrh	r3, [r3, #24]
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f042 0204 	orr.w	r2, r2, #4
 800c804:	b292      	uxth	r2, r2
 800c806:	831a      	strh	r2, [r3, #24]
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b08f      	sub	sp, #60	; 0x3c
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c822:	2b01      	cmp	r3, #1
 800c824:	d101      	bne.n	800c82a <HAL_HalfDuplex_EnableTransmitter+0x16>
 800c826:	2302      	movs	r3, #2
 800c828:	e042      	b.n	800c8b0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2224      	movs	r2, #36	; 0x24
 800c836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	e853 3f00 	ldrex	r3, [r3]
 800c846:	61fb      	str	r3, [r7, #28]
   return(result);
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f023 030c 	bic.w	r3, r3, #12
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	461a      	mov	r2, r3
 800c856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c85a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c860:	e841 2300 	strex	r3, r2, [r1]
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1e6      	bne.n	800c83a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	60bb      	str	r3, [r7, #8]
   return(result);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f043 0308 	orr.w	r3, r3, #8
 800c880:	633b      	str	r3, [r7, #48]	; 0x30
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	61bb      	str	r3, [r7, #24]
 800c88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6979      	ldr	r1, [r7, #20]
 800c890:	69ba      	ldr	r2, [r7, #24]
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	613b      	str	r3, [r7, #16]
   return(result);
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e6      	bne.n	800c86c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	373c      	adds	r7, #60	; 0x3c
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b08f      	sub	sp, #60	; 0x3c
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <HAL_HalfDuplex_EnableReceiver+0x16>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e042      	b.n	800c958 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2224      	movs	r2, #36	; 0x24
 800c8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	f023 030c 	bic.w	r3, r3, #12
 800c8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c902:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c908:	e841 2300 	strex	r3, r2, [r1]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e6      	bne.n	800c8e2 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	60bb      	str	r3, [r7, #8]
   return(result);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	f043 0304 	orr.w	r3, r3, #4
 800c928:	633b      	str	r3, [r7, #48]	; 0x30
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	61bb      	str	r3, [r7, #24]
 800c934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c936:	6979      	ldr	r1, [r7, #20]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	613b      	str	r3, [r7, #16]
   return(result);
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1e6      	bne.n	800c914 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2220      	movs	r2, #32
 800c94a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	373c      	adds	r7, #60	; 0x3c
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c972:	2b01      	cmp	r3, #1
 800c974:	d101      	bne.n	800c97a <HAL_LIN_SendBreak+0x16>
 800c976:	2302      	movs	r3, #2
 800c978:	e01a      	b.n	800c9b0 <HAL_LIN_SendBreak+0x4c>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2224      	movs	r2, #36	; 0x24
 800c986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	8b1b      	ldrh	r3, [r3, #24]
 800c990:	b29a      	uxth	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0202 	orr.w	r2, r2, #2
 800c99a:	b292      	uxth	r2, r2
 800c99c:	831a      	strh	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2220      	movs	r2, #32
 800c9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ca:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	4313      	orrs	r3, r2
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca04:	b08c      	sub	sp, #48	; 0x30
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	431a      	orrs	r2, r3
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	4baa      	ldr	r3, [pc, #680]	; (800ccd8 <UART_SetConfig+0x2d8>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	6812      	ldr	r2, [r2, #0]
 800ca36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	68da      	ldr	r2, [r3, #12]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a9f      	ldr	r2, [pc, #636]	; (800ccdc <UART_SetConfig+0x2dc>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d004      	beq.n	800ca6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ca76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca80:	430b      	orrs	r3, r1
 800ca82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	f023 010f 	bic.w	r1, r3, #15
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a90      	ldr	r2, [pc, #576]	; (800cce0 <UART_SetConfig+0x2e0>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d125      	bne.n	800caf0 <UART_SetConfig+0xf0>
 800caa4:	4b8f      	ldr	r3, [pc, #572]	; (800cce4 <UART_SetConfig+0x2e4>)
 800caa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caaa:	f003 0303 	and.w	r3, r3, #3
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d81a      	bhi.n	800cae8 <UART_SetConfig+0xe8>
 800cab2:	a201      	add	r2, pc, #4	; (adr r2, 800cab8 <UART_SetConfig+0xb8>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cac9 	.word	0x0800cac9
 800cabc:	0800cad9 	.word	0x0800cad9
 800cac0:	0800cad1 	.word	0x0800cad1
 800cac4:	0800cae1 	.word	0x0800cae1
 800cac8:	2301      	movs	r3, #1
 800caca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cace:	e116      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cad0:	2302      	movs	r3, #2
 800cad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad6:	e112      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cade:	e10e      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cae6:	e10a      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caee:	e106      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a7c      	ldr	r2, [pc, #496]	; (800cce8 <UART_SetConfig+0x2e8>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d138      	bne.n	800cb6c <UART_SetConfig+0x16c>
 800cafa:	4b7a      	ldr	r3, [pc, #488]	; (800cce4 <UART_SetConfig+0x2e4>)
 800cafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb00:	f003 030c 	and.w	r3, r3, #12
 800cb04:	2b0c      	cmp	r3, #12
 800cb06:	d82d      	bhi.n	800cb64 <UART_SetConfig+0x164>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <UART_SetConfig+0x110>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb45 	.word	0x0800cb45
 800cb14:	0800cb65 	.word	0x0800cb65
 800cb18:	0800cb65 	.word	0x0800cb65
 800cb1c:	0800cb65 	.word	0x0800cb65
 800cb20:	0800cb55 	.word	0x0800cb55
 800cb24:	0800cb65 	.word	0x0800cb65
 800cb28:	0800cb65 	.word	0x0800cb65
 800cb2c:	0800cb65 	.word	0x0800cb65
 800cb30:	0800cb4d 	.word	0x0800cb4d
 800cb34:	0800cb65 	.word	0x0800cb65
 800cb38:	0800cb65 	.word	0x0800cb65
 800cb3c:	0800cb65 	.word	0x0800cb65
 800cb40:	0800cb5d 	.word	0x0800cb5d
 800cb44:	2300      	movs	r3, #0
 800cb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb4a:	e0d8      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb52:	e0d4      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cb54:	2304      	movs	r3, #4
 800cb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb5a:	e0d0      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb62:	e0cc      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cb64:	2310      	movs	r3, #16
 800cb66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb6a:	e0c8      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a5e      	ldr	r2, [pc, #376]	; (800ccec <UART_SetConfig+0x2ec>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d125      	bne.n	800cbc2 <UART_SetConfig+0x1c2>
 800cb76:	4b5b      	ldr	r3, [pc, #364]	; (800cce4 <UART_SetConfig+0x2e4>)
 800cb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb80:	2b30      	cmp	r3, #48	; 0x30
 800cb82:	d016      	beq.n	800cbb2 <UART_SetConfig+0x1b2>
 800cb84:	2b30      	cmp	r3, #48	; 0x30
 800cb86:	d818      	bhi.n	800cbba <UART_SetConfig+0x1ba>
 800cb88:	2b20      	cmp	r3, #32
 800cb8a:	d00a      	beq.n	800cba2 <UART_SetConfig+0x1a2>
 800cb8c:	2b20      	cmp	r3, #32
 800cb8e:	d814      	bhi.n	800cbba <UART_SetConfig+0x1ba>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <UART_SetConfig+0x19a>
 800cb94:	2b10      	cmp	r3, #16
 800cb96:	d008      	beq.n	800cbaa <UART_SetConfig+0x1aa>
 800cb98:	e00f      	b.n	800cbba <UART_SetConfig+0x1ba>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cba0:	e0ad      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cba2:	2302      	movs	r3, #2
 800cba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cba8:	e0a9      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cbaa:	2304      	movs	r3, #4
 800cbac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbb0:	e0a5      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cbb2:	2308      	movs	r3, #8
 800cbb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbb8:	e0a1      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cbba:	2310      	movs	r3, #16
 800cbbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbc0:	e09d      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a4a      	ldr	r2, [pc, #296]	; (800ccf0 <UART_SetConfig+0x2f0>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d125      	bne.n	800cc18 <UART_SetConfig+0x218>
 800cbcc:	4b45      	ldr	r3, [pc, #276]	; (800cce4 <UART_SetConfig+0x2e4>)
 800cbce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cbd6:	2bc0      	cmp	r3, #192	; 0xc0
 800cbd8:	d016      	beq.n	800cc08 <UART_SetConfig+0x208>
 800cbda:	2bc0      	cmp	r3, #192	; 0xc0
 800cbdc:	d818      	bhi.n	800cc10 <UART_SetConfig+0x210>
 800cbde:	2b80      	cmp	r3, #128	; 0x80
 800cbe0:	d00a      	beq.n	800cbf8 <UART_SetConfig+0x1f8>
 800cbe2:	2b80      	cmp	r3, #128	; 0x80
 800cbe4:	d814      	bhi.n	800cc10 <UART_SetConfig+0x210>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <UART_SetConfig+0x1f0>
 800cbea:	2b40      	cmp	r3, #64	; 0x40
 800cbec:	d008      	beq.n	800cc00 <UART_SetConfig+0x200>
 800cbee:	e00f      	b.n	800cc10 <UART_SetConfig+0x210>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbf6:	e082      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbfe:	e07e      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc00:	2304      	movs	r3, #4
 800cc02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc06:	e07a      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc08:	2308      	movs	r3, #8
 800cc0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc0e:	e076      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc10:	2310      	movs	r3, #16
 800cc12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc16:	e072      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a35      	ldr	r2, [pc, #212]	; (800ccf4 <UART_SetConfig+0x2f4>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d12a      	bne.n	800cc78 <UART_SetConfig+0x278>
 800cc22:	4b30      	ldr	r3, [pc, #192]	; (800cce4 <UART_SetConfig+0x2e4>)
 800cc24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc30:	d01a      	beq.n	800cc68 <UART_SetConfig+0x268>
 800cc32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc36:	d81b      	bhi.n	800cc70 <UART_SetConfig+0x270>
 800cc38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc3c:	d00c      	beq.n	800cc58 <UART_SetConfig+0x258>
 800cc3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc42:	d815      	bhi.n	800cc70 <UART_SetConfig+0x270>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <UART_SetConfig+0x250>
 800cc48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc4c:	d008      	beq.n	800cc60 <UART_SetConfig+0x260>
 800cc4e:	e00f      	b.n	800cc70 <UART_SetConfig+0x270>
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc56:	e052      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc58:	2302      	movs	r3, #2
 800cc5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc5e:	e04e      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc60:	2304      	movs	r3, #4
 800cc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc66:	e04a      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc6e:	e046      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc70:	2310      	movs	r3, #16
 800cc72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc76:	e042      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a17      	ldr	r2, [pc, #92]	; (800ccdc <UART_SetConfig+0x2dc>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d13a      	bne.n	800ccf8 <UART_SetConfig+0x2f8>
 800cc82:	4b18      	ldr	r3, [pc, #96]	; (800cce4 <UART_SetConfig+0x2e4>)
 800cc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cc8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc90:	d01a      	beq.n	800ccc8 <UART_SetConfig+0x2c8>
 800cc92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc96:	d81b      	bhi.n	800ccd0 <UART_SetConfig+0x2d0>
 800cc98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc9c:	d00c      	beq.n	800ccb8 <UART_SetConfig+0x2b8>
 800cc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cca2:	d815      	bhi.n	800ccd0 <UART_SetConfig+0x2d0>
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <UART_SetConfig+0x2b0>
 800cca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccac:	d008      	beq.n	800ccc0 <UART_SetConfig+0x2c0>
 800ccae:	e00f      	b.n	800ccd0 <UART_SetConfig+0x2d0>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccb6:	e022      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccbe:	e01e      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800ccc0:	2304      	movs	r3, #4
 800ccc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccc6:	e01a      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800ccc8:	2308      	movs	r3, #8
 800ccca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccce:	e016      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800ccd0:	2310      	movs	r3, #16
 800ccd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccd6:	e012      	b.n	800ccfe <UART_SetConfig+0x2fe>
 800ccd8:	cfff69f3 	.word	0xcfff69f3
 800ccdc:	40008000 	.word	0x40008000
 800cce0:	40013800 	.word	0x40013800
 800cce4:	40021000 	.word	0x40021000
 800cce8:	40004400 	.word	0x40004400
 800ccec:	40004800 	.word	0x40004800
 800ccf0:	40004c00 	.word	0x40004c00
 800ccf4:	40005000 	.word	0x40005000
 800ccf8:	2310      	movs	r3, #16
 800ccfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4aae      	ldr	r2, [pc, #696]	; (800cfbc <UART_SetConfig+0x5bc>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	f040 8097 	bne.w	800ce38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd0e:	2b08      	cmp	r3, #8
 800cd10:	d823      	bhi.n	800cd5a <UART_SetConfig+0x35a>
 800cd12:	a201      	add	r2, pc, #4	; (adr r2, 800cd18 <UART_SetConfig+0x318>)
 800cd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd18:	0800cd3d 	.word	0x0800cd3d
 800cd1c:	0800cd5b 	.word	0x0800cd5b
 800cd20:	0800cd45 	.word	0x0800cd45
 800cd24:	0800cd5b 	.word	0x0800cd5b
 800cd28:	0800cd4b 	.word	0x0800cd4b
 800cd2c:	0800cd5b 	.word	0x0800cd5b
 800cd30:	0800cd5b 	.word	0x0800cd5b
 800cd34:	0800cd5b 	.word	0x0800cd5b
 800cd38:	0800cd53 	.word	0x0800cd53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd3c:	f7f8 f9c8 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800cd40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd42:	e010      	b.n	800cd66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd44:	4b9e      	ldr	r3, [pc, #632]	; (800cfc0 <UART_SetConfig+0x5c0>)
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd48:	e00d      	b.n	800cd66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd4a:	f7f8 f929 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800cd4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd50:	e009      	b.n	800cd66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd58:	e005      	b.n	800cd66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8130 	beq.w	800cfce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	4a94      	ldr	r2, [pc, #592]	; (800cfc4 <UART_SetConfig+0x5c4>)
 800cd74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	4613      	mov	r3, r2
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4413      	add	r3, r2
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d305      	bcc.n	800cd9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d903      	bls.n	800cda6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cda4:	e113      	b.n	800cfce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	2200      	movs	r2, #0
 800cdaa:	60bb      	str	r3, [r7, #8]
 800cdac:	60fa      	str	r2, [r7, #12]
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	4a84      	ldr	r2, [pc, #528]	; (800cfc4 <UART_SetConfig+0x5c4>)
 800cdb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	2200      	movs	r2, #0
 800cdbc:	603b      	str	r3, [r7, #0]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdc8:	f002 fa44 	bl	800f254 <__aeabi_uldivmod>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	020b      	lsls	r3, r1, #8
 800cdde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cde2:	0202      	lsls	r2, r0, #8
 800cde4:	6979      	ldr	r1, [r7, #20]
 800cde6:	6849      	ldr	r1, [r1, #4]
 800cde8:	0849      	lsrs	r1, r1, #1
 800cdea:	2000      	movs	r0, #0
 800cdec:	460c      	mov	r4, r1
 800cdee:	4605      	mov	r5, r0
 800cdf0:	eb12 0804 	adds.w	r8, r2, r4
 800cdf4:	eb43 0905 	adc.w	r9, r3, r5
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	469a      	mov	sl, r3
 800ce00:	4693      	mov	fp, r2
 800ce02:	4652      	mov	r2, sl
 800ce04:	465b      	mov	r3, fp
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f002 fa23 	bl	800f254 <__aeabi_uldivmod>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4613      	mov	r3, r2
 800ce14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce1c:	d308      	bcc.n	800ce30 <UART_SetConfig+0x430>
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce24:	d204      	bcs.n	800ce30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6a3a      	ldr	r2, [r7, #32]
 800ce2c:	60da      	str	r2, [r3, #12]
 800ce2e:	e0ce      	b.n	800cfce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ce36:	e0ca      	b.n	800cfce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce40:	d166      	bne.n	800cf10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ce42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce46:	2b08      	cmp	r3, #8
 800ce48:	d827      	bhi.n	800ce9a <UART_SetConfig+0x49a>
 800ce4a:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <UART_SetConfig+0x450>)
 800ce4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce50:	0800ce75 	.word	0x0800ce75
 800ce54:	0800ce7d 	.word	0x0800ce7d
 800ce58:	0800ce85 	.word	0x0800ce85
 800ce5c:	0800ce9b 	.word	0x0800ce9b
 800ce60:	0800ce8b 	.word	0x0800ce8b
 800ce64:	0800ce9b 	.word	0x0800ce9b
 800ce68:	0800ce9b 	.word	0x0800ce9b
 800ce6c:	0800ce9b 	.word	0x0800ce9b
 800ce70:	0800ce93 	.word	0x0800ce93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce74:	f7f8 f92c 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800ce78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce7a:	e014      	b.n	800cea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce7c:	f7f8 f93e 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 800ce80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce82:	e010      	b.n	800cea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce84:	4b4e      	ldr	r3, [pc, #312]	; (800cfc0 <UART_SetConfig+0x5c0>)
 800ce86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce88:	e00d      	b.n	800cea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce8a:	f7f8 f889 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800ce8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce90:	e009      	b.n	800cea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce98:	e005      	b.n	800cea6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 8090 	beq.w	800cfce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	4a44      	ldr	r2, [pc, #272]	; (800cfc4 <UART_SetConfig+0x5c4>)
 800ceb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec0:	005a      	lsls	r2, r3, #1
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	085b      	lsrs	r3, r3, #1
 800cec8:	441a      	add	r2, r3
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ced2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	2b0f      	cmp	r3, #15
 800ced8:	d916      	bls.n	800cf08 <UART_SetConfig+0x508>
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cee0:	d212      	bcs.n	800cf08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	f023 030f 	bic.w	r3, r3, #15
 800ceea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	085b      	lsrs	r3, r3, #1
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	8bfb      	ldrh	r3, [r7, #30]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	8bfa      	ldrh	r2, [r7, #30]
 800cf04:	60da      	str	r2, [r3, #12]
 800cf06:	e062      	b.n	800cfce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cf0e:	e05e      	b.n	800cfce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf14:	2b08      	cmp	r3, #8
 800cf16:	d828      	bhi.n	800cf6a <UART_SetConfig+0x56a>
 800cf18:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <UART_SetConfig+0x520>)
 800cf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1e:	bf00      	nop
 800cf20:	0800cf45 	.word	0x0800cf45
 800cf24:	0800cf4d 	.word	0x0800cf4d
 800cf28:	0800cf55 	.word	0x0800cf55
 800cf2c:	0800cf6b 	.word	0x0800cf6b
 800cf30:	0800cf5b 	.word	0x0800cf5b
 800cf34:	0800cf6b 	.word	0x0800cf6b
 800cf38:	0800cf6b 	.word	0x0800cf6b
 800cf3c:	0800cf6b 	.word	0x0800cf6b
 800cf40:	0800cf63 	.word	0x0800cf63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf44:	f7f8 f8c4 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800cf48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf4a:	e014      	b.n	800cf76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf4c:	f7f8 f8d6 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 800cf50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf52:	e010      	b.n	800cf76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf54:	4b1a      	ldr	r3, [pc, #104]	; (800cfc0 <UART_SetConfig+0x5c0>)
 800cf56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf58:	e00d      	b.n	800cf76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf5a:	f7f8 f821 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800cf5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf60:	e009      	b.n	800cf76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf68:	e005      	b.n	800cf76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cf74:	bf00      	nop
    }

    if (pclk != 0U)
 800cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d028      	beq.n	800cfce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	4a10      	ldr	r2, [pc, #64]	; (800cfc4 <UART_SetConfig+0x5c4>)
 800cf82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf86:	461a      	mov	r2, r3
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	085b      	lsrs	r3, r3, #1
 800cf94:	441a      	add	r2, r3
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf9e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	2b0f      	cmp	r3, #15
 800cfa4:	d910      	bls.n	800cfc8 <UART_SetConfig+0x5c8>
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfac:	d20c      	bcs.n	800cfc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	60da      	str	r2, [r3, #12]
 800cfb8:	e009      	b.n	800cfce <UART_SetConfig+0x5ce>
 800cfba:	bf00      	nop
 800cfbc:	40008000 	.word	0x40008000
 800cfc0:	00f42400 	.word	0x00f42400
 800cfc4:	0800f6bc 	.word	0x0800f6bc
      }
      else
      {
        ret = HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cfea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3730      	adds	r7, #48	; 0x30
 800cff2:	46bd      	mov	sp, r7
 800cff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	f003 0301 	and.w	r3, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	430a      	orrs	r2, r1
 800d020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	430a      	orrs	r2, r1
 800d042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00a      	beq.n	800d066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	430a      	orrs	r2, r1
 800d064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	f003 0308 	and.w	r3, r3, #8
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	430a      	orrs	r2, r1
 800d086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08c:	f003 0310 	and.w	r3, r3, #16
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00a      	beq.n	800d0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ae:	f003 0320 	and.w	r3, r3, #32
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00a      	beq.n	800d0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01a      	beq.n	800d10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	430a      	orrs	r2, r1
 800d0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0f6:	d10a      	bne.n	800d10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	430a      	orrs	r2, r1
 800d10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	430a      	orrs	r2, r1
 800d12e:	605a      	str	r2, [r3, #4]
  }
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af02      	add	r7, sp, #8
 800d142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d14c:	f7f4 fa42 	bl	80015d4 <HAL_GetTick>
 800d150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 0308 	and.w	r3, r3, #8
 800d15c:	2b08      	cmp	r3, #8
 800d15e:	d10e      	bne.n	800d17e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f82f 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e025      	b.n	800d1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0304 	and.w	r3, r3, #4
 800d188:	2b04      	cmp	r3, #4
 800d18a:	d10e      	bne.n	800d1aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f819 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e00f      	b.n	800d1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2220      	movs	r2, #32
 800d1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b09c      	sub	sp, #112	; 0x70
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	60f8      	str	r0, [r7, #12]
 800d1da:	60b9      	str	r1, [r7, #8]
 800d1dc:	603b      	str	r3, [r7, #0]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1e2:	e0a9      	b.n	800d338 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ea:	f000 80a5 	beq.w	800d338 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1ee:	f7f4 f9f1 	bl	80015d4 <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d302      	bcc.n	800d204 <UART_WaitOnFlagUntilTimeout+0x32>
 800d1fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d200:	2b00      	cmp	r3, #0
 800d202:	d140      	bne.n	800d286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d20c:	e853 3f00 	ldrex	r3, [r3]
 800d210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d218:	667b      	str	r3, [r7, #100]	; 0x64
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d224:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d22a:	e841 2300 	strex	r3, r2, [r1]
 800d22e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e6      	bne.n	800d204 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3308      	adds	r3, #8
 800d23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d240:	e853 3f00 	ldrex	r3, [r3]
 800d244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	f023 0301 	bic.w	r3, r3, #1
 800d24c:	663b      	str	r3, [r7, #96]	; 0x60
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3308      	adds	r3, #8
 800d254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d256:	64ba      	str	r2, [r7, #72]	; 0x48
 800d258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e5      	bne.n	800d236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2220      	movs	r2, #32
 800d26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2220      	movs	r2, #32
 800d276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	e069      	b.n	800d35a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f003 0304 	and.w	r3, r3, #4
 800d290:	2b00      	cmp	r3, #0
 800d292:	d051      	beq.n	800d338 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	69db      	ldr	r3, [r3, #28]
 800d29a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d29e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2a2:	d149      	bne.n	800d338 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	e853 3f00 	ldrex	r3, [r3]
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2d4:	e841 2300 	strex	r3, r2, [r1]
 800d2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e6      	bne.n	800d2ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	e853 3f00 	ldrex	r3, [r3]
 800d2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	f023 0301 	bic.w	r3, r3, #1
 800d2f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d300:	623a      	str	r2, [r7, #32]
 800d302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d304:	69f9      	ldr	r1, [r7, #28]
 800d306:	6a3a      	ldr	r2, [r7, #32]
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1e5      	bne.n	800d2e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2220      	movs	r2, #32
 800d318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2220      	movs	r2, #32
 800d320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2220      	movs	r2, #32
 800d328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d334:	2303      	movs	r3, #3
 800d336:	e010      	b.n	800d35a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	69da      	ldr	r2, [r3, #28]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	4013      	ands	r3, r2
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	429a      	cmp	r2, r3
 800d346:	bf0c      	ite	eq
 800d348:	2301      	moveq	r3, #1
 800d34a:	2300      	movne	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	461a      	mov	r2, r3
 800d350:	79fb      	ldrb	r3, [r7, #7]
 800d352:	429a      	cmp	r2, r3
 800d354:	f43f af46 	beq.w	800d1e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3770      	adds	r7, #112	; 0x70
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d362:	b480      	push	{r7}
 800d364:	b0a3      	sub	sp, #140	; 0x8c
 800d366:	af00      	add	r7, sp, #0
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	4613      	mov	r3, r2
 800d36e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	88fa      	ldrh	r2, [r7, #6]
 800d37a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	88fa      	ldrh	r2, [r7, #6]
 800d382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d394:	d10e      	bne.n	800d3b4 <UART_Start_Receive_IT+0x52>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <UART_Start_Receive_IT+0x48>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3a8:	e02d      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	22ff      	movs	r2, #255	; 0xff
 800d3ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3b2:	e028      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10d      	bne.n	800d3d8 <UART_Start_Receive_IT+0x76>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <UART_Start_Receive_IT+0x6c>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	22ff      	movs	r2, #255	; 0xff
 800d3c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3cc:	e01b      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	227f      	movs	r2, #127	; 0x7f
 800d3d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3d6:	e016      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3e0:	d10d      	bne.n	800d3fe <UART_Start_Receive_IT+0x9c>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <UART_Start_Receive_IT+0x92>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	227f      	movs	r2, #127	; 0x7f
 800d3ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3f2:	e008      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	223f      	movs	r2, #63	; 0x3f
 800d3f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3fc:	e003      	b.n	800d406 <UART_Start_Receive_IT+0xa4>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2222      	movs	r2, #34	; 0x22
 800d412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3308      	adds	r3, #8
 800d41c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d428:	f043 0301 	orr.w	r3, r3, #1
 800d42c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3308      	adds	r3, #8
 800d436:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d43a:	673a      	str	r2, [r7, #112]	; 0x70
 800d43c:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d440:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e3      	bne.n	800d416 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d456:	d153      	bne.n	800d500 <UART_Start_Receive_IT+0x19e>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d45e:	88fa      	ldrh	r2, [r7, #6]
 800d460:	429a      	cmp	r2, r3
 800d462:	d34d      	bcc.n	800d500 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d46c:	d107      	bne.n	800d47e <UART_Start_Receive_IT+0x11c>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d103      	bne.n	800d47e <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4a4a      	ldr	r2, [pc, #296]	; (800d5a4 <UART_Start_Receive_IT+0x242>)
 800d47a:	671a      	str	r2, [r3, #112]	; 0x70
 800d47c:	e002      	b.n	800d484 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	4a49      	ldr	r2, [pc, #292]	; (800d5a8 <UART_Start_Receive_IT+0x246>)
 800d482:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d01a      	beq.n	800d4ca <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49c:	e853 3f00 	ldrex	r3, [r3]
 800d4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4be:	e841 2300 	strex	r3, r2, [r1]
 800d4c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1e4      	bne.n	800d494 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d4:	e853 3f00 	ldrex	r3, [r3]
 800d4d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d4ea:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e5      	bne.n	800d4ca <UART_Start_Receive_IT+0x168>
 800d4fe:	e04a      	b.n	800d596 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d508:	d107      	bne.n	800d51a <UART_Start_Receive_IT+0x1b8>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d103      	bne.n	800d51a <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	4a25      	ldr	r2, [pc, #148]	; (800d5ac <UART_Start_Receive_IT+0x24a>)
 800d516:	671a      	str	r2, [r3, #112]	; 0x70
 800d518:	e002      	b.n	800d520 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	4a24      	ldr	r2, [pc, #144]	; (800d5b0 <UART_Start_Receive_IT+0x24e>)
 800d51e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d019      	beq.n	800d564 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d540:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d544:	677b      	str	r3, [r7, #116]	; 0x74
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	461a      	mov	r2, r3
 800d54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d54e:	637b      	str	r3, [r7, #52]	; 0x34
 800d550:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d556:	e841 2300 	strex	r3, r2, [r1]
 800d55a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1e6      	bne.n	800d530 <UART_Start_Receive_IT+0x1ce>
 800d562:	e018      	b.n	800d596 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	e853 3f00 	ldrex	r3, [r3]
 800d570:	613b      	str	r3, [r7, #16]
   return(result);
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f043 0320 	orr.w	r3, r3, #32
 800d578:	67bb      	str	r3, [r7, #120]	; 0x78
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d582:	623b      	str	r3, [r7, #32]
 800d584:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d586:	69f9      	ldr	r1, [r7, #28]
 800d588:	6a3a      	ldr	r2, [r7, #32]
 800d58a:	e841 2300 	strex	r3, r2, [r1]
 800d58e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e6      	bne.n	800d564 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	378c      	adds	r7, #140	; 0x8c
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	0800e619 	.word	0x0800e619
 800d5a8:	0800e31f 	.word	0x0800e31f
 800d5ac:	0800e1bb 	.word	0x0800e1bb
 800d5b0:	0800e057 	.word	0x0800e057

0800d5b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b096      	sub	sp, #88	; 0x58
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	88fa      	ldrh	r2, [r7, #6]
 800d5cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2222      	movs	r2, #34	; 0x22
 800d5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d02c      	beq.n	800d642 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ec:	4a42      	ldr	r2, [pc, #264]	; (800d6f8 <UART_Start_Receive_DMA+0x144>)
 800d5ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5f4:	4a41      	ldr	r2, [pc, #260]	; (800d6fc <UART_Start_Receive_DMA+0x148>)
 800d5f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5fc:	4a40      	ldr	r2, [pc, #256]	; (800d700 <UART_Start_Receive_DMA+0x14c>)
 800d5fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d604:	2200      	movs	r2, #0
 800d606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3324      	adds	r3, #36	; 0x24
 800d612:	4619      	mov	r1, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d618:	461a      	mov	r2, r3
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	f7f4 fe77 	bl	800230e <HAL_DMA_Start_IT>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00d      	beq.n	800d642 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2210      	movs	r2, #16
 800d62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2220      	movs	r2, #32
 800d63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e055      	b.n	800d6ee <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d018      	beq.n	800d684 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65a:	e853 3f00 	ldrex	r3, [r3]
 800d65e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d666:	657b      	str	r3, [r7, #84]	; 0x54
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	461a      	mov	r2, r3
 800d66e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d670:	64bb      	str	r3, [r7, #72]	; 0x48
 800d672:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d674:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d678:	e841 2300 	strex	r3, r2, [r1]
 800d67c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1e6      	bne.n	800d652 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3308      	adds	r3, #8
 800d68a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	e853 3f00 	ldrex	r3, [r3]
 800d692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	f043 0301 	orr.w	r3, r3, #1
 800d69a:	653b      	str	r3, [r7, #80]	; 0x50
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6a4:	637a      	str	r2, [r7, #52]	; 0x34
 800d6a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6ac:	e841 2300 	strex	r3, r2, [r1]
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e5      	bne.n	800d684 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	e853 3f00 	ldrex	r3, [r3]
 800d6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6d8:	623a      	str	r2, [r7, #32]
 800d6da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6dc:	69f9      	ldr	r1, [r7, #28]
 800d6de:	6a3a      	ldr	r2, [r7, #32]
 800d6e0:	e841 2300 	strex	r3, r2, [r1]
 800d6e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1e5      	bne.n	800d6b8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3758      	adds	r7, #88	; 0x58
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	0800d909 	.word	0x0800d909
 800d6fc:	0800da2f 	.word	0x0800da2f
 800d700:	0800da67 	.word	0x0800da67

0800d704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d704:	b480      	push	{r7}
 800d706:	b08f      	sub	sp, #60	; 0x3c
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	e853 3f00 	ldrex	r3, [r3]
 800d718:	61fb      	str	r3, [r7, #28]
   return(result);
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d720:	637b      	str	r3, [r7, #52]	; 0x34
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d72c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d732:	e841 2300 	strex	r3, r2, [r1]
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1e6      	bne.n	800d70c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3308      	adds	r3, #8
 800d744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d754:	633b      	str	r3, [r7, #48]	; 0x30
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3308      	adds	r3, #8
 800d75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d75e:	61ba      	str	r2, [r7, #24]
 800d760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	6979      	ldr	r1, [r7, #20]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	e841 2300 	strex	r3, r2, [r1]
 800d76a:	613b      	str	r3, [r7, #16]
   return(result);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e5      	bne.n	800d73e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d77a:	bf00      	nop
 800d77c:	373c      	adds	r7, #60	; 0x3c
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d786:	b480      	push	{r7}
 800d788:	b095      	sub	sp, #84	; 0x54
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d796:	e853 3f00 	ldrex	r3, [r3]
 800d79a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d7ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7b4:	e841 2300 	strex	r3, r2, [r1]
 800d7b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e6      	bne.n	800d78e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7d6:	f023 0301 	bic.w	r3, r3, #1
 800d7da:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e3      	bne.n	800d7c0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d118      	bne.n	800d832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	f023 0310 	bic.w	r3, r3, #16
 800d814:	647b      	str	r3, [r7, #68]	; 0x44
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81e:	61bb      	str	r3, [r7, #24]
 800d820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6979      	ldr	r1, [r7, #20]
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	613b      	str	r3, [r7, #16]
   return(result);
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e6      	bne.n	800d800 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2220      	movs	r2, #32
 800d836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d846:	bf00      	nop
 800d848:	3754      	adds	r7, #84	; 0x54
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b090      	sub	sp, #64	; 0x40
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d137      	bne.n	800d8de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d870:	2200      	movs	r2, #0
 800d872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3308      	adds	r3, #8
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	623b      	str	r3, [r7, #32]
   return(result);
 800d886:	6a3b      	ldr	r3, [r7, #32]
 800d888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d88c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3308      	adds	r3, #8
 800d894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d896:	633a      	str	r2, [r7, #48]	; 0x30
 800d898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e5      	bne.n	800d876 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	e853 3f00 	ldrex	r3, [r3]
 800d8b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8be:	637b      	str	r3, [r7, #52]	; 0x34
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c8:	61fb      	str	r3, [r7, #28]
 800d8ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8cc:	69b9      	ldr	r1, [r7, #24]
 800d8ce:	69fa      	ldr	r2, [r7, #28]
 800d8d0:	e841 2300 	strex	r3, r2, [r1]
 800d8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1e6      	bne.n	800d8aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8dc:	e002      	b.n	800d8e4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d8de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8e0:	f7fe fe27 	bl	800c532 <HAL_UART_TxCpltCallback>
}
 800d8e4:	bf00      	nop
 800d8e6:	3740      	adds	r7, #64	; 0x40
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7fe fe23 	bl	800c546 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b09c      	sub	sp, #112	; 0x70
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d914:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0320 	and.w	r3, r3, #32
 800d920:	2b00      	cmp	r3, #0
 800d922:	d171      	bne.n	800da08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d926:	2200      	movs	r2, #0
 800d928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d934:	e853 3f00 	ldrex	r3, [r3]
 800d938:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d940:	66bb      	str	r3, [r7, #104]	; 0x68
 800d942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d94a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d94c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d952:	e841 2300 	strex	r3, r2, [r1]
 800d956:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1e6      	bne.n	800d92c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	3308      	adds	r3, #8
 800d964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d968:	e853 3f00 	ldrex	r3, [r3]
 800d96c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d970:	f023 0301 	bic.w	r3, r3, #1
 800d974:	667b      	str	r3, [r7, #100]	; 0x64
 800d976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d97e:	647a      	str	r2, [r7, #68]	; 0x44
 800d980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d986:	e841 2300 	strex	r3, r2, [r1]
 800d98a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1e5      	bne.n	800d95e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3308      	adds	r3, #8
 800d998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9a8:	663b      	str	r3, [r7, #96]	; 0x60
 800d9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9b2:	633a      	str	r2, [r7, #48]	; 0x30
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e5      	bne.n	800d992 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d118      	bne.n	800da08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	e853 3f00 	ldrex	r3, [r3]
 800d9e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 0310 	bic.w	r3, r3, #16
 800d9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f4:	61fb      	str	r3, [r7, #28]
 800d9f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f8:	69b9      	ldr	r1, [r7, #24]
 800d9fa:	69fa      	ldr	r2, [r7, #28]
 800d9fc:	e841 2300 	strex	r3, r2, [r1]
 800da00:	617b      	str	r3, [r7, #20]
   return(result);
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1e6      	bne.n	800d9d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d107      	bne.n	800da20 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da16:	4619      	mov	r1, r3
 800da18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da1a:	f7fe fdda 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da1e:	e002      	b.n	800da26 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800da20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da22:	f7f3 fa93 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 800da26:	bf00      	nop
 800da28:	3770      	adds	r7, #112	; 0x70
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da40:	2b01      	cmp	r3, #1
 800da42:	d109      	bne.n	800da58 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da4a:	085b      	lsrs	r3, r3, #1
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	4619      	mov	r1, r3
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7fe fdbe 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da56:	e002      	b.n	800da5e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7fe fd88 	bl	800c56e <HAL_UART_RxHalfCpltCallback>
}
 800da5e:	bf00      	nop
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b086      	sub	sp, #24
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da8e:	2b80      	cmp	r3, #128	; 0x80
 800da90:	d109      	bne.n	800daa6 <UART_DMAError+0x40>
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b21      	cmp	r3, #33	; 0x21
 800da96:	d106      	bne.n	800daa6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800daa0:	6978      	ldr	r0, [r7, #20]
 800daa2:	f7ff fe2f 	bl	800d704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab0:	2b40      	cmp	r3, #64	; 0x40
 800dab2:	d109      	bne.n	800dac8 <UART_DMAError+0x62>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b22      	cmp	r3, #34	; 0x22
 800dab8:	d106      	bne.n	800dac8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dac2:	6978      	ldr	r0, [r7, #20]
 800dac4:	f7ff fe5f 	bl	800d786 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dace:	f043 0210 	orr.w	r2, r3, #16
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dad8:	6978      	ldr	r0, [r7, #20]
 800dada:	f7fe fd52 	bl	800c582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dade:	bf00      	nop
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f7fe fd3c 	bl	800c582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b084      	sub	sp, #16
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db24:	2200      	movs	r2, #0
 800db26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db36:	2b00      	cmp	r3, #0
 800db38:	d12d      	bne.n	800db96 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	220f      	movs	r2, #15
 800db58:	621a      	str	r2, [r3, #32]

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db62:	d109      	bne.n	800db78 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	8b1b      	ldrh	r3, [r3, #24]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f042 0210 	orr.w	r2, r2, #16
 800db74:	b292      	uxth	r2, r2
 800db76:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2220      	movs	r2, #32
 800db7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2220      	movs	r2, #32
 800db84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7fe fd01 	bl	800c596 <HAL_UART_AbortCpltCallback>
 800db94:	e000      	b.n	800db98 <UART_DMATxAbortCallback+0x86>
      return;
 800db96:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbaa:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d004      	beq.n	800dbc6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d128      	bne.n	800dc18 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	220f      	movs	r2, #15
 800dbe4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	8b1b      	ldrh	r3, [r3, #24]
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f042 0208 	orr.w	r2, r2, #8
 800dbf6:	b292      	uxth	r2, r2
 800dbf8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2220      	movs	r2, #32
 800dbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2220      	movs	r2, #32
 800dc06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f7fe fcc0 	bl	800c596 <HAL_UART_AbortCpltCallback>
 800dc16:	e000      	b.n	800dc1a <UART_DMARxAbortCallback+0x7c>
      return;
 800dc18:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2c:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc3e:	d109      	bne.n	800dc54 <UART_DMATxOnlyAbortCallback+0x34>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	8b1b      	ldrh	r3, [r3, #24]
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f042 0210 	orr.w	r2, r2, #16
 800dc50:	b292      	uxth	r2, r2
 800dc52:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2220      	movs	r2, #32
 800dc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7fe fca4 	bl	800c5aa <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc62:	bf00      	nop
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc76:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	220f      	movs	r2, #15
 800dc86:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	8b1b      	ldrh	r3, [r3, #24]
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f042 0208 	orr.w	r2, r2, #8
 800dc98:	b292      	uxth	r2, r2
 800dc9a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2220      	movs	r2, #32
 800dca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7fe fc87 	bl	800c5be <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b08f      	sub	sp, #60	; 0x3c
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc6:	2b21      	cmp	r3, #33	; 0x21
 800dcc8:	d14d      	bne.n	800dd66 <UART_TxISR_8BIT+0xae>
  {
    if (huart->TxXferCount == 0U)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d132      	bne.n	800dd3c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	e853 3f00 	ldrex	r3, [r3]
 800dce2:	61fb      	str	r3, [r7, #28]
   return(result);
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcea:	637b      	str	r3, [r7, #52]	; 0x34
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcfc:	e841 2300 	strex	r3, r2, [r1]
 800dd00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1e6      	bne.n	800dcd6 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1c:	633b      	str	r3, [r7, #48]	; 0x30
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	6979      	ldr	r1, [r7, #20]
 800dd2c:	69ba      	ldr	r2, [r7, #24]
 800dd2e:	e841 2300 	strex	r3, r2, [r1]
 800dd32:	613b      	str	r3, [r7, #16]
   return(result);
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e6      	bne.n	800dd08 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dd3a:	e014      	b.n	800dd66 <UART_TxISR_8BIT+0xae>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	b292      	uxth	r2, r2
 800dd48:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd4e:	1c5a      	adds	r2, r3, #1
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800dd66:	bf00      	nop
 800dd68:	373c      	adds	r7, #60	; 0x3c
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b091      	sub	sp, #68	; 0x44
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd80:	2b21      	cmp	r3, #33	; 0x21
 800dd82:	d151      	bne.n	800de28 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d132      	bne.n	800ddf6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	e853 3f00 	ldrex	r3, [r3]
 800dd9c:	623b      	str	r3, [r7, #32]
   return(result);
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dda4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddae:	633b      	str	r3, [r7, #48]	; 0x30
 800ddb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb6:	e841 2300 	strex	r3, r2, [r1]
 800ddba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e6      	bne.n	800dd90 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	e853 3f00 	ldrex	r3, [r3]
 800ddce:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddd6:	637b      	str	r3, [r7, #52]	; 0x34
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	461a      	mov	r2, r3
 800ddde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde4:	69b9      	ldr	r1, [r7, #24]
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	e841 2300 	strex	r3, r2, [r1]
 800ddec:	617b      	str	r3, [r7, #20]
   return(result);
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1e6      	bne.n	800ddc2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ddf4:	e018      	b.n	800de28 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfe:	881a      	ldrh	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de08:	b292      	uxth	r2, r2
 800de0a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de10:	1c9a      	adds	r2, r3, #2
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	3b01      	subs	r3, #1
 800de20:	b29a      	uxth	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800de28:	bf00      	nop
 800de2a:	3744      	adds	r7, #68	; 0x44
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800de34:	b480      	push	{r7}
 800de36:	b091      	sub	sp, #68	; 0x44
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de42:	2b21      	cmp	r3, #33	; 0x21
 800de44:	d161      	bne.n	800df0a <UART_TxISR_8BIT_FIFOEN+0xd6>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800de4e:	e058      	b.n	800df02 <UART_TxISR_8BIT_FIFOEN+0xce>
    {
      if (huart->TxXferCount == 0U)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de56:	b29b      	uxth	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d133      	bne.n	800dec4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3308      	adds	r3, #8
 800de62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	e853 3f00 	ldrex	r3, [r3]
 800de6a:	623b      	str	r3, [r7, #32]
   return(result);
 800de6c:	6a3b      	ldr	r3, [r7, #32]
 800de6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800de72:	63bb      	str	r3, [r7, #56]	; 0x38
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	3308      	adds	r3, #8
 800de7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de7c:	633a      	str	r2, [r7, #48]	; 0x30
 800de7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de84:	e841 2300 	strex	r3, r2, [r1]
 800de88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e5      	bne.n	800de5c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	e853 3f00 	ldrex	r3, [r3]
 800de9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea4:	637b      	str	r3, [r7, #52]	; 0x34
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deae:	61fb      	str	r3, [r7, #28]
 800deb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb2:	69b9      	ldr	r1, [r7, #24]
 800deb4:	69fa      	ldr	r2, [r7, #28]
 800deb6:	e841 2300 	strex	r3, r2, [r1]
 800deba:	617b      	str	r3, [r7, #20]
   return(result);
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1e6      	bne.n	800de90 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800dec2:	e022      	b.n	800df0a <UART_TxISR_8BIT_FIFOEN+0xd6>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	69db      	ldr	r3, [r3, #28]
 800deca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d014      	beq.n	800defc <UART_TxISR_8BIT_FIFOEN+0xc8>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ded6:	781a      	ldrb	r2, [r3, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	b292      	uxth	r2, r2
 800dede:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800def0:	b29b      	uxth	r3, r3
 800def2:	3b01      	subs	r3, #1
 800def4:	b29a      	uxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800defc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800defe:	3b01      	subs	r3, #1
 800df00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800df02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1a3      	bne.n	800de50 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800df08:	e7ff      	b.n	800df0a <UART_TxISR_8BIT_FIFOEN+0xd6>
 800df0a:	bf00      	nop
 800df0c:	3744      	adds	r7, #68	; 0x44
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df16:	b480      	push	{r7}
 800df18:	b091      	sub	sp, #68	; 0x44
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df24:	2b21      	cmp	r3, #33	; 0x21
 800df26:	d165      	bne.n	800dff4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800df30:	e05c      	b.n	800dfec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d133      	bne.n	800dfa6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3308      	adds	r3, #8
 800df44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	e853 3f00 	ldrex	r3, [r3]
 800df4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3308      	adds	r3, #8
 800df5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df66:	e841 2300 	strex	r3, r2, [r1]
 800df6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1e5      	bne.n	800df3e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df86:	633b      	str	r3, [r7, #48]	; 0x30
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	461a      	mov	r2, r3
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	6979      	ldr	r1, [r7, #20]
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	e841 2300 	strex	r3, r2, [r1]
 800df9c:	613b      	str	r3, [r7, #16]
   return(result);
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e6      	bne.n	800df72 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800dfa4:	e026      	b.n	800dff4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d018      	beq.n	800dfe6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfb8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	881a      	ldrh	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dfc6:	b292      	uxth	r2, r2
 800dfc8:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfce:	1c9a      	adds	r2, r3, #2
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dfe6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800dfec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d19f      	bne.n	800df32 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800dff2:	e7ff      	b.n	800dff4 <UART_TxISR_16BIT_FIFOEN+0xde>
 800dff4:	bf00      	nop
 800dff6:	3744      	adds	r7, #68	; 0x44
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b088      	sub	sp, #32
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	e853 3f00 	ldrex	r3, [r3]
 800e014:	60bb      	str	r3, [r7, #8]
   return(result);
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e01c:	61fb      	str	r3, [r7, #28]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02a:	6979      	ldr	r1, [r7, #20]
 800e02c:	69ba      	ldr	r2, [r7, #24]
 800e02e:	e841 2300 	strex	r3, r2, [r1]
 800e032:	613b      	str	r3, [r7, #16]
   return(result);
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e6      	bne.n	800e008 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2220      	movs	r2, #32
 800e03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fe fa72 	bl	800c532 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e04e:	bf00      	nop
 800e050:	3720      	adds	r7, #32
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b096      	sub	sp, #88	; 0x58
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e064:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e06e:	2b22      	cmp	r3, #34	; 0x22
 800e070:	f040 8095 	bne.w	800e19e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e07a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e07e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e082:	b2d9      	uxtb	r1, r3
 800e084:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e08e:	400a      	ands	r2, r1
 800e090:	b2d2      	uxtb	r2, r2
 800e092:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d17a      	bne.n	800e1b2 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	e853 3f00 	ldrex	r3, [r3]
 800e0c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e0d0:	653b      	str	r3, [r7, #80]	; 0x50
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0da:	647b      	str	r3, [r7, #68]	; 0x44
 800e0dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0e2:	e841 2300 	strex	r3, r2, [r1]
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e6      	bne.n	800e0bc <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	e853 3f00 	ldrex	r3, [r3]
 800e0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	f023 0301 	bic.w	r3, r3, #1
 800e104:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3308      	adds	r3, #8
 800e10c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e10e:	633a      	str	r2, [r7, #48]	; 0x30
 800e110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e5      	bne.n	800e0ee <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2220      	movs	r2, #32
 800e126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e134:	2b01      	cmp	r3, #1
 800e136:	d12e      	bne.n	800e196 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	e853 3f00 	ldrex	r3, [r3]
 800e14a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f023 0310 	bic.w	r3, r3, #16
 800e152:	64bb      	str	r3, [r7, #72]	; 0x48
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	461a      	mov	r2, r3
 800e15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e160:	69b9      	ldr	r1, [r7, #24]
 800e162:	69fa      	ldr	r2, [r7, #28]
 800e164:	e841 2300 	strex	r3, r2, [r1]
 800e168:	617b      	str	r3, [r7, #20]
   return(result);
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1e6      	bne.n	800e13e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	69db      	ldr	r3, [r3, #28]
 800e176:	f003 0310 	and.w	r3, r3, #16
 800e17a:	2b10      	cmp	r3, #16
 800e17c:	d103      	bne.n	800e186 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2210      	movs	r2, #16
 800e184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7fe fa1f 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e194:	e00d      	b.n	800e1b2 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7f2 fed8 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 800e19c:	e009      	b.n	800e1b2 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	8b1b      	ldrh	r3, [r3, #24]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f042 0208 	orr.w	r2, r2, #8
 800e1ae:	b292      	uxth	r2, r2
 800e1b0:	831a      	strh	r2, [r3, #24]
}
 800e1b2:	bf00      	nop
 800e1b4:	3758      	adds	r7, #88	; 0x58
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b096      	sub	sp, #88	; 0x58
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1d2:	2b22      	cmp	r3, #34	; 0x22
 800e1d4:	f040 8095 	bne.w	800e302 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1e6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e1e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e1ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1fc:	1c9a      	adds	r2, r3, #2
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d17a      	bne.n	800e316 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e228:	e853 3f00 	ldrex	r3, [r3]
 800e22c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e234:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23e:	643b      	str	r3, [r7, #64]	; 0x40
 800e240:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1e6      	bne.n	800e220 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	3308      	adds	r3, #8
 800e258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	e853 3f00 	ldrex	r3, [r3]
 800e260:	61fb      	str	r3, [r7, #28]
   return(result);
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	f023 0301 	bic.w	r3, r3, #1
 800e268:	64bb      	str	r3, [r7, #72]	; 0x48
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	3308      	adds	r3, #8
 800e270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e272:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e5      	bne.n	800e252 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2220      	movs	r2, #32
 800e28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d12e      	bne.n	800e2fa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f023 0310 	bic.w	r3, r3, #16
 800e2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c0:	61bb      	str	r3, [r7, #24]
 800e2c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	6979      	ldr	r1, [r7, #20]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e6      	bne.n	800e2a2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	69db      	ldr	r3, [r3, #28]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d103      	bne.n	800e2ea <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2210      	movs	r2, #16
 800e2e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7fe f96d 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2f8:	e00d      	b.n	800e316 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7f2 fe26 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 800e300:	e009      	b.n	800e316 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	8b1b      	ldrh	r3, [r3, #24]
 800e308:	b29a      	uxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0208 	orr.w	r2, r2, #8
 800e312:	b292      	uxth	r2, r2
 800e314:	831a      	strh	r2, [r3, #24]
}
 800e316:	bf00      	nop
 800e318:	3758      	adds	r7, #88	; 0x58
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b0a6      	sub	sp, #152	; 0x98
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e32c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	69db      	ldr	r3, [r3, #28]
 800e336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e354:	2b22      	cmp	r3, #34	; 0x22
 800e356:	f040 814f 	bne.w	800e5f8 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e360:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e364:	e0f6      	b.n	800e554 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e36c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e370:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e374:	b2d9      	uxtb	r1, r3
 800e376:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e380:	400a      	ands	r2, r1
 800e382:	b2d2      	uxtb	r2, r2
 800e384:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e38a:	1c5a      	adds	r2, r3, #1
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e396:	b29b      	uxth	r3, r3
 800e398:	3b01      	subs	r3, #1
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e3ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3b0:	f003 0307 	and.w	r3, r3, #7
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d053      	beq.n	800e460 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3bc:	f003 0301 	and.w	r3, r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d011      	beq.n	800e3e8 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e3c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00b      	beq.n	800e3e8 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3de:	f043 0201 	orr.w	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d011      	beq.n	800e418 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e3f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00b      	beq.n	800e418 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2202      	movs	r2, #2
 800e406:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e40e:	f043 0204 	orr.w	r2, r3, #4
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e418:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d011      	beq.n	800e448 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00b      	beq.n	800e448 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2204      	movs	r2, #4
 800e436:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e43e:	f043 0202 	orr.w	r2, r3, #2
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d006      	beq.n	800e460 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7fe f895 	bl	800c582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e466:	b29b      	uxth	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d173      	bne.n	800e554 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	461a      	mov	r2, r3
 800e48a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e48e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e490:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e494:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e49c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e4      	bne.n	800e46c <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ac:	e853 3f00 	ldrex	r3, [r3]
 800e4b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4b8:	f023 0301 	bic.w	r3, r3, #1
 800e4bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e4c6:	657a      	str	r2, [r7, #84]	; 0x54
 800e4c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e3      	bne.n	800e4a2 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d12e      	bne.n	800e54e <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fe:	e853 3f00 	ldrex	r3, [r3]
 800e502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e506:	f023 0310 	bic.w	r3, r3, #16
 800e50a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	461a      	mov	r2, r3
 800e512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e514:	643b      	str	r3, [r7, #64]	; 0x40
 800e516:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e51a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e51c:	e841 2300 	strex	r3, r2, [r1]
 800e520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1e6      	bne.n	800e4f6 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	69db      	ldr	r3, [r3, #28]
 800e52e:	f003 0310 	and.w	r3, r3, #16
 800e532:	2b10      	cmp	r3, #16
 800e534:	d103      	bne.n	800e53e <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2210      	movs	r2, #16
 800e53c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e544:	4619      	mov	r1, r3
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7fe f843 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
 800e54c:	e002      	b.n	800e554 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7f2 fcfc 	bl	8000f4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e554:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e55c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e560:	f003 0320 	and.w	r3, r3, #32
 800e564:	2b00      	cmp	r3, #0
 800e566:	f47f aefe 	bne.w	800e366 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e570:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e574:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d047      	beq.n	800e60c <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e586:	429a      	cmp	r2, r3
 800e588:	d240      	bcs.n	800e60c <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3308      	adds	r3, #8
 800e590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	e853 3f00 	ldrex	r3, [r3]
 800e598:	61fb      	str	r3, [r7, #28]
   return(result);
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e5a0:	673b      	str	r3, [r7, #112]	; 0x70
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3308      	adds	r3, #8
 800e5a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e5aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5b2:	e841 2300 	strex	r3, r2, [r1]
 800e5b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1e5      	bne.n	800e58a <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a14      	ldr	r2, [pc, #80]	; (800e614 <UART_RxISR_8BIT_FIFOEN+0x2f6>)
 800e5c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	e853 3f00 	ldrex	r3, [r3]
 800e5d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	f043 0320 	orr.w	r3, r3, #32
 800e5d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5e2:	61bb      	str	r3, [r7, #24]
 800e5e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e6:	6979      	ldr	r1, [r7, #20]
 800e5e8:	69ba      	ldr	r2, [r7, #24]
 800e5ea:	e841 2300 	strex	r3, r2, [r1]
 800e5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1e6      	bne.n	800e5c4 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5f6:	e009      	b.n	800e60c <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	8b1b      	ldrh	r3, [r3, #24]
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f042 0208 	orr.w	r2, r2, #8
 800e608:	b292      	uxth	r2, r2
 800e60a:	831a      	strh	r2, [r3, #24]
}
 800e60c:	bf00      	nop
 800e60e:	3798      	adds	r7, #152	; 0x98
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	0800e057 	.word	0x0800e057

0800e618 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b0a8      	sub	sp, #160	; 0xa0
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e626:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69db      	ldr	r3, [r3, #28]
 800e630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e64e:	2b22      	cmp	r3, #34	; 0x22
 800e650:	f040 8153 	bne.w	800e8fa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e65a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e65e:	e0fa      	b.n	800e856 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e666:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e66e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e672:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e676:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e67a:	4013      	ands	r3, r2
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e682:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e688:	1c9a      	adds	r2, r3, #2
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e694:	b29b      	uxth	r3, r3
 800e696:	3b01      	subs	r3, #1
 800e698:	b29a      	uxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	69db      	ldr	r3, [r3, #28]
 800e6a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e6aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6ae:	f003 0307 	and.w	r3, r3, #7
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d053      	beq.n	800e75e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6ba:	f003 0301 	and.w	r3, r3, #1
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d011      	beq.n	800e6e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e6c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00b      	beq.n	800e6e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6dc:	f043 0201 	orr.w	r2, r3, #1
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6ea:	f003 0302 	and.w	r3, r3, #2
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d011      	beq.n	800e716 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e6f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2202      	movs	r2, #2
 800e704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e70c:	f043 0204 	orr.w	r2, r3, #4
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e71a:	f003 0304 	and.w	r3, r3, #4
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d011      	beq.n	800e746 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e726:	f003 0301 	and.w	r3, r3, #1
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2204      	movs	r2, #4
 800e734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e73c:	f043 0202 	orr.w	r2, r3, #2
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7fd ff16 	bl	800c582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e764:	b29b      	uxth	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	d175      	bne.n	800e856 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e772:	e853 3f00 	ldrex	r3, [r3]
 800e776:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e77a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e77e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e78c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e78e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e790:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e794:	e841 2300 	strex	r3, r2, [r1]
 800e798:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e79a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1e4      	bne.n	800e76a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7aa:	e853 3f00 	ldrex	r3, [r3]
 800e7ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7b6:	f023 0301 	bic.w	r3, r3, #1
 800e7ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7c8:	65ba      	str	r2, [r7, #88]	; 0x58
 800e7ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7d0:	e841 2300 	strex	r3, r2, [r1]
 800e7d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1e1      	bne.n	800e7a0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d12e      	bne.n	800e850 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e808:	f023 0310 	bic.w	r3, r3, #16
 800e80c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e816:	647b      	str	r3, [r7, #68]	; 0x44
 800e818:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e81c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e6      	bne.n	800e7f8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	f003 0310 	and.w	r3, r3, #16
 800e834:	2b10      	cmp	r3, #16
 800e836:	d103      	bne.n	800e840 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2210      	movs	r2, #16
 800e83e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7fd fec2 	bl	800c5d2 <HAL_UARTEx_RxEventCallback>
 800e84e:	e002      	b.n	800e856 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7f2 fb7b 	bl	8000f4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e856:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d006      	beq.n	800e86c <UART_RxISR_16BIT_FIFOEN+0x254>
 800e85e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	f47f aefa 	bne.w	800e660 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e872:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e876:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d047      	beq.n	800e90e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e884:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e888:	429a      	cmp	r2, r3
 800e88a:	d240      	bcs.n	800e90e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3308      	adds	r3, #8
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	e853 3f00 	ldrex	r3, [r3]
 800e89a:	623b      	str	r3, [r7, #32]
   return(result);
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8a2:	677b      	str	r3, [r7, #116]	; 0x74
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e8ac:	633a      	str	r2, [r7, #48]	; 0x30
 800e8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e5      	bne.n	800e88c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	; (800e918 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800e8c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f043 0320 	orr.w	r3, r3, #32
 800e8da:	673b      	str	r3, [r7, #112]	; 0x70
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8e4:	61fb      	str	r3, [r7, #28]
 800e8e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	69b9      	ldr	r1, [r7, #24]
 800e8ea:	69fa      	ldr	r2, [r7, #28]
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	617b      	str	r3, [r7, #20]
   return(result);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e6      	bne.n	800e8c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8f8:	e009      	b.n	800e90e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	8b1b      	ldrh	r3, [r3, #24]
 800e900:	b29a      	uxth	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0208 	orr.w	r2, r2, #8
 800e90a:	b292      	uxth	r2, r2
 800e90c:	831a      	strh	r2, [r3, #24]
}
 800e90e:	bf00      	nop
 800e910:	37a0      	adds	r7, #160	; 0xa0
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	0800e1bb 	.word	0x0800e1bb

0800e91c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e058      	b.n	800e9e6 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d106      	bne.n	800e94c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f7f2 fbb4 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2224      	movs	r2, #36	; 0x24
 800e950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f022 0201 	bic.w	r2, r2, #1
 800e962:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7fe f84b 	bl	800ca00 <UART_SetConfig>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d101      	bne.n	800e974 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800e970:	2301      	movs	r3, #1
 800e972:	e038      	b.n	800e9e6 <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7fe fb3b 	bl	800cff8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	689a      	ldr	r2, [r3, #8]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e990:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	055b      	lsls	r3, r3, #21
 800e9aa:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	041b      	lsls	r3, r3, #16
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800e9c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	6812      	ldr	r2, [r2, #0]
 800e9c8:	6979      	ldr	r1, [r7, #20]
 800e9ca:	430b      	orrs	r3, r1
 800e9cc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f042 0201 	orr.w	r2, r2, #1
 800e9dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f7fe fbac 	bl	800d13c <UART_CheckIdleState>
 800e9e4:	4603      	mov	r3, r0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b083      	sub	sp, #12
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9f6:	bf00      	nop
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea02:	b480      	push	{r7}
 800ea04:	b083      	sub	sp, #12
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea0a:	bf00      	nop
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea16:	b480      	push	{r7}
 800ea18:	b083      	sub	sp, #12
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea1e:	bf00      	nop
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d101      	bne.n	800ea3e <HAL_MultiProcessorEx_AddressLength_Set+0x14>
  {
    return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e021      	b.n	800ea82 <HAL_MultiProcessorEx_AddressLength_Set+0x58>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2224      	movs	r2, #36	; 0x24
 800ea42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f022 0201 	bic.w	r2, r2, #1
 800ea54:	601a      	str	r2, [r3, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	f023 0110 	bic.w	r1, r3, #16
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	605a      	str	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f042 0201 	orr.w	r2, r2, #1
 800ea78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7fe fb5e 	bl	800d13c <UART_CheckIdleState>
 800ea80:	4603      	mov	r3, r0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b088      	sub	sp, #32
 800ea8e:	af02      	add	r7, sp, #8
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	1d3b      	adds	r3, r7, #4
 800ea94:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d101      	bne.n	800eaaa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	e046      	b.n	800eb38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2224      	movs	r2, #36	; 0x24
 800eab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f022 0201 	bic.w	r2, r2, #1
 800eac8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	430a      	orrs	r2, r1
 800eadc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d105      	bne.n	800eaf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800eae4:	1d3b      	adds	r3, r7, #4
 800eae6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f000 fb42 	bl	800f174 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f042 0201 	orr.w	r2, r2, #1
 800eafe:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb00:	f7f2 fd68 	bl	80015d4 <HAL_GetTick>
 800eb04:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7fe fb5c 	bl	800d1d2 <UART_WaitOnFlagUntilTimeout>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	75fb      	strb	r3, [r7, #23]
 800eb24:	e003      	b.n	800eb2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2220      	movs	r2, #32
 800eb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b089      	sub	sp, #36	; 0x24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d101      	bne.n	800eb56 <HAL_UARTEx_EnableStopMode+0x16>
 800eb52:	2302      	movs	r3, #2
 800eb54:	e021      	b.n	800eb9a <HAL_UARTEx_EnableStopMode+0x5a>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	e853 3f00 	ldrex	r3, [r3]
 800eb6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	f043 0302 	orr.w	r3, r3, #2
 800eb72:	61fb      	str	r3, [r7, #28]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	61bb      	str	r3, [r7, #24]
 800eb7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb80:	6979      	ldr	r1, [r7, #20]
 800eb82:	69ba      	ldr	r2, [r7, #24]
 800eb84:	e841 2300 	strex	r3, r2, [r1]
 800eb88:	613b      	str	r3, [r7, #16]
   return(result);
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1e6      	bne.n	800eb5e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3724      	adds	r7, #36	; 0x24
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b089      	sub	sp, #36	; 0x24
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d101      	bne.n	800ebbc <HAL_UARTEx_DisableStopMode+0x16>
 800ebb8:	2302      	movs	r3, #2
 800ebba:	e021      	b.n	800ec00 <HAL_UARTEx_DisableStopMode+0x5a>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Clear UESM bit */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	e853 3f00 	ldrex	r3, [r3]
 800ebd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f023 0302 	bic.w	r3, r3, #2
 800ebd8:	61fb      	str	r3, [r7, #28]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	61bb      	str	r3, [r7, #24]
 800ebe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe6:	6979      	ldr	r1, [r7, #20]
 800ebe8:	69ba      	ldr	r2, [r7, #24]
 800ebea:	e841 2300 	strex	r3, r2, [r1]
 800ebee:	613b      	str	r3, [r7, #16]
   return(result);
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1e6      	bne.n	800ebc4 <HAL_UARTEx_DisableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3724      	adds	r7, #36	; 0x24
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d101      	bne.n	800ec22 <HAL_UARTEx_EnableFifoMode+0x16>
 800ec1e:	2302      	movs	r3, #2
 800ec20:	e02b      	b.n	800ec7a <HAL_UARTEx_EnableFifoMode+0x6e>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2201      	movs	r2, #1
 800ec26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2224      	movs	r2, #36	; 0x24
 800ec2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f022 0201 	bic.w	r2, r2, #1
 800ec48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ec58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 faa9 	bl	800f1ba <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b085      	sub	sp, #20
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d101      	bne.n	800ec98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec94:	2302      	movs	r3, #2
 800ec96:	e027      	b.n	800ece8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2224      	movs	r2, #36	; 0x24
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f022 0201 	bic.w	r2, r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ecc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2220      	movs	r2, #32
 800ecda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d101      	bne.n	800ed0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed08:	2302      	movs	r3, #2
 800ed0a:	e02d      	b.n	800ed68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2224      	movs	r2, #36	; 0x24
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f022 0201 	bic.w	r2, r2, #1
 800ed32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	683a      	ldr	r2, [r7, #0]
 800ed44:	430a      	orrs	r2, r1
 800ed46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 fa36 	bl	800f1ba <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2220      	movs	r2, #32
 800ed5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d101      	bne.n	800ed88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed84:	2302      	movs	r3, #2
 800ed86:	e02d      	b.n	800ede4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2224      	movs	r2, #36	; 0x24
 800ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f022 0201 	bic.w	r2, r2, #1
 800edae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	683a      	ldr	r2, [r7, #0]
 800edc0:	430a      	orrs	r2, r1
 800edc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f9f8 	bl	800f1ba <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2220      	movs	r2, #32
 800edd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	4613      	mov	r3, r2
 800edfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee02:	2b20      	cmp	r3, #32
 800ee04:	f040 80f9 	bne.w	800effa <HAL_UARTEx_ReceiveToIdle+0x20e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <HAL_UARTEx_ReceiveToIdle+0x28>
 800ee0e:	88fb      	ldrh	r3, [r7, #6]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e0f1      	b.n	800effc <HAL_UARTEx_ReceiveToIdle+0x210>
    }

    __HAL_LOCK(huart);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d101      	bne.n	800ee26 <HAL_UARTEx_ReceiveToIdle+0x3a>
 800ee22:	2302      	movs	r3, #2
 800ee24:	e0ea      	b.n	800effc <HAL_UARTEx_ReceiveToIdle+0x210>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2222      	movs	r2, #34	; 0x22
 800ee3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee44:	f7f2 fbc6 	bl	80015d4 <HAL_GetTick>
 800ee48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	88fa      	ldrh	r2, [r7, #6]
 800ee4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	88fa      	ldrh	r2, [r7, #6]
 800ee56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee62:	d10e      	bne.n	800ee82 <HAL_UARTEx_ReceiveToIdle+0x96>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d105      	bne.n	800ee78 <HAL_UARTEx_ReceiveToIdle+0x8c>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ee72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee76:	e02d      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	22ff      	movs	r2, #255	; 0xff
 800ee7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee80:	e028      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10d      	bne.n	800eea6 <HAL_UARTEx_ReceiveToIdle+0xba>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d104      	bne.n	800ee9c <HAL_UARTEx_ReceiveToIdle+0xb0>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	22ff      	movs	r2, #255	; 0xff
 800ee96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee9a:	e01b      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	227f      	movs	r2, #127	; 0x7f
 800eea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eea4:	e016      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeae:	d10d      	bne.n	800eecc <HAL_UARTEx_ReceiveToIdle+0xe0>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d104      	bne.n	800eec2 <HAL_UARTEx_ReceiveToIdle+0xd6>
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	227f      	movs	r2, #127	; 0x7f
 800eebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eec0:	e008      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	223f      	movs	r2, #63	; 0x3f
 800eec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eeca:	e003      	b.n	800eed4 <HAL_UARTEx_ReceiveToIdle+0xe8>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eee4:	d108      	bne.n	800eef8 <HAL_UARTEx_ReceiveToIdle+0x10c>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d104      	bne.n	800eef8 <HAL_UARTEx_ReceiveToIdle+0x10c>
    {
      pdata8bits  = NULL;
 800eeee:	2300      	movs	r3, #0
 800eef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	61bb      	str	r3, [r7, #24]
 800eef6:	e003      	b.n	800ef00 <HAL_UARTEx_ReceiveToIdle+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ef0e:	e05d      	b.n	800efcc <HAL_UARTEx_ReceiveToIdle+0x1e0>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	69db      	ldr	r3, [r3, #28]
 800ef16:	f003 0310 	and.w	r3, r3, #16
 800ef1a:	2b10      	cmp	r3, #16
 800ef1c:	d10d      	bne.n	800ef3a <HAL_UARTEx_ReceiveToIdle+0x14e>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2210      	movs	r2, #16
 800ef24:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d005      	beq.n	800ef3a <HAL_UARTEx_ReceiveToIdle+0x14e>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2220      	movs	r2, #32
 800ef32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          return HAL_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	e060      	b.n	800effc <HAL_UARTEx_ReceiveToIdle+0x210>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	69db      	ldr	r3, [r3, #28]
 800ef40:	f003 0320 	and.w	r3, r3, #32
 800ef44:	2b20      	cmp	r3, #32
 800ef46:	d12c      	bne.n	800efa2 <HAL_UARTEx_ReceiveToIdle+0x1b6>
      {
        if (pdata8bits == NULL)
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10c      	bne.n	800ef68 <HAL_UARTEx_ReceiveToIdle+0x17c>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	8a7b      	ldrh	r3, [r7, #18]
 800ef58:	4013      	ands	r3, r2
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	3302      	adds	r3, #2
 800ef64:	61bb      	str	r3, [r7, #24]
 800ef66:	e00d      	b.n	800ef84 <HAL_UARTEx_ReceiveToIdle+0x198>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	8a7b      	ldrh	r3, [r7, #18]
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	4013      	ands	r3, r2
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	3301      	adds	r3, #1
 800ef82:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	3b01      	subs	r3, #1
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa8:	d010      	beq.n	800efcc <HAL_UARTEx_ReceiveToIdle+0x1e0>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800efaa:	f7f2 fb13 	bl	80015d4 <HAL_GetTick>
 800efae:	4602      	mov	r2, r0
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d302      	bcc.n	800efc0 <HAL_UARTEx_ReceiveToIdle+0x1d4>
 800efba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d105      	bne.n	800efcc <HAL_UARTEx_ReceiveToIdle+0x1e0>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2220      	movs	r2, #32
 800efc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e017      	b.n	800effc <HAL_UARTEx_ReceiveToIdle+0x210>
    while (huart->RxXferCount > 0U)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d19b      	bne.n	800ef10 <HAL_UARTEx_ReceiveToIdle+0x124>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	b29a      	uxth	r2, r3
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2220      	movs	r2, #32
 800eff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e000      	b.n	800effc <HAL_UARTEx_ReceiveToIdle+0x210>
  }
  else
  {
    return HAL_BUSY;
 800effa:	2302      	movs	r3, #2
  }
}
 800effc:	4618      	mov	r0, r3
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b08c      	sub	sp, #48	; 0x30
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	4613      	mov	r3, r2
 800f010:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f018:	2b20      	cmp	r3, #32
 800f01a:	d14a      	bne.n	800f0b2 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800f022:	88fb      	ldrh	r3, [r7, #6]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	e043      	b.n	800f0b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
    }

    __HAL_LOCK(huart);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f032:	2b01      	cmp	r3, #1
 800f034:	d101      	bne.n	800f03a <HAL_UARTEx_ReceiveToIdle_IT+0x36>
 800f036:	2302      	movs	r3, #2
 800f038:	e03c      	b.n	800f0b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2201      	movs	r2, #1
 800f046:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800f048:	88fb      	ldrh	r3, [r7, #6]
 800f04a:	461a      	mov	r2, r3
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7fe f987 	bl	800d362 <UART_Start_Receive_IT>
 800f054:	4603      	mov	r3, r0
 800f056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d124      	bne.n	800f0ac <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f066:	2b01      	cmp	r3, #1
 800f068:	d11d      	bne.n	800f0a6 <HAL_UARTEx_ReceiveToIdle_IT+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2210      	movs	r2, #16
 800f070:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	e853 3f00 	ldrex	r3, [r3]
 800f07e:	617b      	str	r3, [r7, #20]
   return(result);
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	f043 0310 	orr.w	r3, r3, #16
 800f086:	62bb      	str	r3, [r7, #40]	; 0x28
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	461a      	mov	r2, r3
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	627b      	str	r3, [r7, #36]	; 0x24
 800f092:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f094:	6a39      	ldr	r1, [r7, #32]
 800f096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f098:	e841 2300 	strex	r3, r2, [r1]
 800f09c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1e6      	bne.n	800f072 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800f0a4:	e002      	b.n	800f0ac <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f0ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0b0:	e000      	b.n	800f0b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f0b2:	2302      	movs	r3, #2
  }
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3730      	adds	r7, #48	; 0x30
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08c      	sub	sp, #48	; 0x30
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0d0:	2b20      	cmp	r3, #32
 800f0d2:	d14a      	bne.n	800f16a <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e043      	b.n	800f16c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d101      	bne.n	800f0f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f0ee:	2302      	movs	r3, #2
 800f0f0:	e03c      	b.n	800f16c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f100:	88fb      	ldrh	r3, [r7, #6]
 800f102:	461a      	mov	r2, r3
 800f104:	68b9      	ldr	r1, [r7, #8]
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f7fe fa54 	bl	800d5b4 <UART_Start_Receive_DMA>
 800f10c:	4603      	mov	r3, r0
 800f10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f116:	2b00      	cmp	r3, #0
 800f118:	d124      	bne.n	800f164 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d11d      	bne.n	800f15e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2210      	movs	r2, #16
 800f128:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	e853 3f00 	ldrex	r3, [r3]
 800f136:	617b      	str	r3, [r7, #20]
   return(result);
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f043 0310 	orr.w	r3, r3, #16
 800f13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	461a      	mov	r2, r3
 800f146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f148:	627b      	str	r3, [r7, #36]	; 0x24
 800f14a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14c:	6a39      	ldr	r1, [r7, #32]
 800f14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f150:	e841 2300 	strex	r3, r2, [r1]
 800f154:	61fb      	str	r3, [r7, #28]
   return(result);
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1e6      	bne.n	800f12a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f15c:	e002      	b.n	800f164 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f168:	e000      	b.n	800f16c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f16a:	2302      	movs	r3, #2
  }
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3730      	adds	r7, #48	; 0x30
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	1d3b      	adds	r3, r7, #4
 800f17e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	f023 0210 	bic.w	r2, r3, #16
 800f18c:	893b      	ldrh	r3, [r7, #8]
 800f18e:	4619      	mov	r1, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	430a      	orrs	r2, r1
 800f196:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800f1a2:	7abb      	ldrb	r3, [r7, #10]
 800f1a4:	061a      	lsls	r2, r3, #24
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	605a      	str	r2, [r3, #4]
}
 800f1ae:	bf00      	nop
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b085      	sub	sp, #20
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d108      	bne.n	800f1dc <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f1da:	e031      	b.n	800f240 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f1dc:	2308      	movs	r3, #8
 800f1de:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f1e0:	2308      	movs	r3, #8
 800f1e2:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	0e5b      	lsrs	r3, r3, #25
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	0f5b      	lsrs	r3, r3, #29
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	f003 0307 	and.w	r3, r3, #7
 800f202:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f204:	7bbb      	ldrb	r3, [r7, #14]
 800f206:	7b3a      	ldrb	r2, [r7, #12]
 800f208:	4910      	ldr	r1, [pc, #64]	; (800f24c <UARTEx_SetNbDataToProcess+0x92>)
 800f20a:	5c8a      	ldrb	r2, [r1, r2]
 800f20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f210:	7b3a      	ldrb	r2, [r7, #12]
 800f212:	490f      	ldr	r1, [pc, #60]	; (800f250 <UARTEx_SetNbDataToProcess+0x96>)
 800f214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f216:	fb93 f3f2 	sdiv	r3, r3, r2
 800f21a:	b29a      	uxth	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	7b7a      	ldrb	r2, [r7, #13]
 800f226:	4909      	ldr	r1, [pc, #36]	; (800f24c <UARTEx_SetNbDataToProcess+0x92>)
 800f228:	5c8a      	ldrb	r2, [r1, r2]
 800f22a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f22e:	7b7a      	ldrb	r2, [r7, #13]
 800f230:	4907      	ldr	r1, [pc, #28]	; (800f250 <UARTEx_SetNbDataToProcess+0x96>)
 800f232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f234:	fb93 f3f2 	sdiv	r3, r3, r2
 800f238:	b29a      	uxth	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f240:	bf00      	nop
 800f242:	3714      	adds	r7, #20
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	0800f6d4 	.word	0x0800f6d4
 800f250:	0800f6dc 	.word	0x0800f6dc

0800f254 <__aeabi_uldivmod>:
 800f254:	b953      	cbnz	r3, 800f26c <__aeabi_uldivmod+0x18>
 800f256:	b94a      	cbnz	r2, 800f26c <__aeabi_uldivmod+0x18>
 800f258:	2900      	cmp	r1, #0
 800f25a:	bf08      	it	eq
 800f25c:	2800      	cmpeq	r0, #0
 800f25e:	bf1c      	itt	ne
 800f260:	f04f 31ff 	movne.w	r1, #4294967295
 800f264:	f04f 30ff 	movne.w	r0, #4294967295
 800f268:	f000 b974 	b.w	800f554 <__aeabi_idiv0>
 800f26c:	f1ad 0c08 	sub.w	ip, sp, #8
 800f270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800f274:	f000 f806 	bl	800f284 <__udivmoddi4>
 800f278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f280:	b004      	add	sp, #16
 800f282:	4770      	bx	lr

0800f284 <__udivmoddi4>:
 800f284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	9d08      	ldr	r5, [sp, #32]
 800f28a:	4604      	mov	r4, r0
 800f28c:	468e      	mov	lr, r1
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d14d      	bne.n	800f32e <__udivmoddi4+0xaa>
 800f292:	428a      	cmp	r2, r1
 800f294:	4694      	mov	ip, r2
 800f296:	d969      	bls.n	800f36c <__udivmoddi4+0xe8>
 800f298:	fab2 f282 	clz	r2, r2
 800f29c:	b152      	cbz	r2, 800f2b4 <__udivmoddi4+0x30>
 800f29e:	fa01 f302 	lsl.w	r3, r1, r2
 800f2a2:	f1c2 0120 	rsb	r1, r2, #32
 800f2a6:	fa20 f101 	lsr.w	r1, r0, r1
 800f2aa:	fa0c fc02 	lsl.w	ip, ip, r2
 800f2ae:	ea41 0e03 	orr.w	lr, r1, r3
 800f2b2:	4094      	lsls	r4, r2
 800f2b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800f2b8:	0c21      	lsrs	r1, r4, #16
 800f2ba:	fbbe f6f8 	udiv	r6, lr, r8
 800f2be:	fa1f f78c 	uxth.w	r7, ip
 800f2c2:	fb08 e316 	mls	r3, r8, r6, lr
 800f2c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f2ca:	fb06 f107 	mul.w	r1, r6, r7
 800f2ce:	4299      	cmp	r1, r3
 800f2d0:	d90a      	bls.n	800f2e8 <__udivmoddi4+0x64>
 800f2d2:	eb1c 0303 	adds.w	r3, ip, r3
 800f2d6:	f106 30ff 	add.w	r0, r6, #4294967295
 800f2da:	f080 811f 	bcs.w	800f51c <__udivmoddi4+0x298>
 800f2de:	4299      	cmp	r1, r3
 800f2e0:	f240 811c 	bls.w	800f51c <__udivmoddi4+0x298>
 800f2e4:	3e02      	subs	r6, #2
 800f2e6:	4463      	add	r3, ip
 800f2e8:	1a5b      	subs	r3, r3, r1
 800f2ea:	b2a4      	uxth	r4, r4
 800f2ec:	fbb3 f0f8 	udiv	r0, r3, r8
 800f2f0:	fb08 3310 	mls	r3, r8, r0, r3
 800f2f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800f2f8:	fb00 f707 	mul.w	r7, r0, r7
 800f2fc:	42a7      	cmp	r7, r4
 800f2fe:	d90a      	bls.n	800f316 <__udivmoddi4+0x92>
 800f300:	eb1c 0404 	adds.w	r4, ip, r4
 800f304:	f100 33ff 	add.w	r3, r0, #4294967295
 800f308:	f080 810a 	bcs.w	800f520 <__udivmoddi4+0x29c>
 800f30c:	42a7      	cmp	r7, r4
 800f30e:	f240 8107 	bls.w	800f520 <__udivmoddi4+0x29c>
 800f312:	4464      	add	r4, ip
 800f314:	3802      	subs	r0, #2
 800f316:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800f31a:	1be4      	subs	r4, r4, r7
 800f31c:	2600      	movs	r6, #0
 800f31e:	b11d      	cbz	r5, 800f328 <__udivmoddi4+0xa4>
 800f320:	40d4      	lsrs	r4, r2
 800f322:	2300      	movs	r3, #0
 800f324:	e9c5 4300 	strd	r4, r3, [r5]
 800f328:	4631      	mov	r1, r6
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	428b      	cmp	r3, r1
 800f330:	d909      	bls.n	800f346 <__udivmoddi4+0xc2>
 800f332:	2d00      	cmp	r5, #0
 800f334:	f000 80ef 	beq.w	800f516 <__udivmoddi4+0x292>
 800f338:	2600      	movs	r6, #0
 800f33a:	e9c5 0100 	strd	r0, r1, [r5]
 800f33e:	4630      	mov	r0, r6
 800f340:	4631      	mov	r1, r6
 800f342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f346:	fab3 f683 	clz	r6, r3
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	d14a      	bne.n	800f3e4 <__udivmoddi4+0x160>
 800f34e:	428b      	cmp	r3, r1
 800f350:	d302      	bcc.n	800f358 <__udivmoddi4+0xd4>
 800f352:	4282      	cmp	r2, r0
 800f354:	f200 80f9 	bhi.w	800f54a <__udivmoddi4+0x2c6>
 800f358:	1a84      	subs	r4, r0, r2
 800f35a:	eb61 0303 	sbc.w	r3, r1, r3
 800f35e:	2001      	movs	r0, #1
 800f360:	469e      	mov	lr, r3
 800f362:	2d00      	cmp	r5, #0
 800f364:	d0e0      	beq.n	800f328 <__udivmoddi4+0xa4>
 800f366:	e9c5 4e00 	strd	r4, lr, [r5]
 800f36a:	e7dd      	b.n	800f328 <__udivmoddi4+0xa4>
 800f36c:	b902      	cbnz	r2, 800f370 <__udivmoddi4+0xec>
 800f36e:	deff      	udf	#255	; 0xff
 800f370:	fab2 f282 	clz	r2, r2
 800f374:	2a00      	cmp	r2, #0
 800f376:	f040 8092 	bne.w	800f49e <__udivmoddi4+0x21a>
 800f37a:	eba1 010c 	sub.w	r1, r1, ip
 800f37e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800f382:	fa1f fe8c 	uxth.w	lr, ip
 800f386:	2601      	movs	r6, #1
 800f388:	0c20      	lsrs	r0, r4, #16
 800f38a:	fbb1 f3f7 	udiv	r3, r1, r7
 800f38e:	fb07 1113 	mls	r1, r7, r3, r1
 800f392:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800f396:	fb0e f003 	mul.w	r0, lr, r3
 800f39a:	4288      	cmp	r0, r1
 800f39c:	d908      	bls.n	800f3b0 <__udivmoddi4+0x12c>
 800f39e:	eb1c 0101 	adds.w	r1, ip, r1
 800f3a2:	f103 38ff 	add.w	r8, r3, #4294967295
 800f3a6:	d202      	bcs.n	800f3ae <__udivmoddi4+0x12a>
 800f3a8:	4288      	cmp	r0, r1
 800f3aa:	f200 80cb 	bhi.w	800f544 <__udivmoddi4+0x2c0>
 800f3ae:	4643      	mov	r3, r8
 800f3b0:	1a09      	subs	r1, r1, r0
 800f3b2:	b2a4      	uxth	r4, r4
 800f3b4:	fbb1 f0f7 	udiv	r0, r1, r7
 800f3b8:	fb07 1110 	mls	r1, r7, r0, r1
 800f3bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f3c0:	fb0e fe00 	mul.w	lr, lr, r0
 800f3c4:	45a6      	cmp	lr, r4
 800f3c6:	d908      	bls.n	800f3da <__udivmoddi4+0x156>
 800f3c8:	eb1c 0404 	adds.w	r4, ip, r4
 800f3cc:	f100 31ff 	add.w	r1, r0, #4294967295
 800f3d0:	d202      	bcs.n	800f3d8 <__udivmoddi4+0x154>
 800f3d2:	45a6      	cmp	lr, r4
 800f3d4:	f200 80bb 	bhi.w	800f54e <__udivmoddi4+0x2ca>
 800f3d8:	4608      	mov	r0, r1
 800f3da:	eba4 040e 	sub.w	r4, r4, lr
 800f3de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800f3e2:	e79c      	b.n	800f31e <__udivmoddi4+0x9a>
 800f3e4:	f1c6 0720 	rsb	r7, r6, #32
 800f3e8:	40b3      	lsls	r3, r6
 800f3ea:	fa22 fc07 	lsr.w	ip, r2, r7
 800f3ee:	ea4c 0c03 	orr.w	ip, ip, r3
 800f3f2:	fa20 f407 	lsr.w	r4, r0, r7
 800f3f6:	fa01 f306 	lsl.w	r3, r1, r6
 800f3fa:	431c      	orrs	r4, r3
 800f3fc:	40f9      	lsrs	r1, r7
 800f3fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800f402:	fa00 f306 	lsl.w	r3, r0, r6
 800f406:	fbb1 f8f9 	udiv	r8, r1, r9
 800f40a:	0c20      	lsrs	r0, r4, #16
 800f40c:	fa1f fe8c 	uxth.w	lr, ip
 800f410:	fb09 1118 	mls	r1, r9, r8, r1
 800f414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800f418:	fb08 f00e 	mul.w	r0, r8, lr
 800f41c:	4288      	cmp	r0, r1
 800f41e:	fa02 f206 	lsl.w	r2, r2, r6
 800f422:	d90b      	bls.n	800f43c <__udivmoddi4+0x1b8>
 800f424:	eb1c 0101 	adds.w	r1, ip, r1
 800f428:	f108 3aff 	add.w	sl, r8, #4294967295
 800f42c:	f080 8088 	bcs.w	800f540 <__udivmoddi4+0x2bc>
 800f430:	4288      	cmp	r0, r1
 800f432:	f240 8085 	bls.w	800f540 <__udivmoddi4+0x2bc>
 800f436:	f1a8 0802 	sub.w	r8, r8, #2
 800f43a:	4461      	add	r1, ip
 800f43c:	1a09      	subs	r1, r1, r0
 800f43e:	b2a4      	uxth	r4, r4
 800f440:	fbb1 f0f9 	udiv	r0, r1, r9
 800f444:	fb09 1110 	mls	r1, r9, r0, r1
 800f448:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800f44c:	fb00 fe0e 	mul.w	lr, r0, lr
 800f450:	458e      	cmp	lr, r1
 800f452:	d908      	bls.n	800f466 <__udivmoddi4+0x1e2>
 800f454:	eb1c 0101 	adds.w	r1, ip, r1
 800f458:	f100 34ff 	add.w	r4, r0, #4294967295
 800f45c:	d26c      	bcs.n	800f538 <__udivmoddi4+0x2b4>
 800f45e:	458e      	cmp	lr, r1
 800f460:	d96a      	bls.n	800f538 <__udivmoddi4+0x2b4>
 800f462:	3802      	subs	r0, #2
 800f464:	4461      	add	r1, ip
 800f466:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800f46a:	fba0 9402 	umull	r9, r4, r0, r2
 800f46e:	eba1 010e 	sub.w	r1, r1, lr
 800f472:	42a1      	cmp	r1, r4
 800f474:	46c8      	mov	r8, r9
 800f476:	46a6      	mov	lr, r4
 800f478:	d356      	bcc.n	800f528 <__udivmoddi4+0x2a4>
 800f47a:	d053      	beq.n	800f524 <__udivmoddi4+0x2a0>
 800f47c:	b15d      	cbz	r5, 800f496 <__udivmoddi4+0x212>
 800f47e:	ebb3 0208 	subs.w	r2, r3, r8
 800f482:	eb61 010e 	sbc.w	r1, r1, lr
 800f486:	fa01 f707 	lsl.w	r7, r1, r7
 800f48a:	fa22 f306 	lsr.w	r3, r2, r6
 800f48e:	40f1      	lsrs	r1, r6
 800f490:	431f      	orrs	r7, r3
 800f492:	e9c5 7100 	strd	r7, r1, [r5]
 800f496:	2600      	movs	r6, #0
 800f498:	4631      	mov	r1, r6
 800f49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f49e:	f1c2 0320 	rsb	r3, r2, #32
 800f4a2:	40d8      	lsrs	r0, r3
 800f4a4:	fa0c fc02 	lsl.w	ip, ip, r2
 800f4a8:	fa21 f303 	lsr.w	r3, r1, r3
 800f4ac:	4091      	lsls	r1, r2
 800f4ae:	4301      	orrs	r1, r0
 800f4b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800f4b4:	fa1f fe8c 	uxth.w	lr, ip
 800f4b8:	fbb3 f0f7 	udiv	r0, r3, r7
 800f4bc:	fb07 3610 	mls	r6, r7, r0, r3
 800f4c0:	0c0b      	lsrs	r3, r1, #16
 800f4c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800f4c6:	fb00 f60e 	mul.w	r6, r0, lr
 800f4ca:	429e      	cmp	r6, r3
 800f4cc:	fa04 f402 	lsl.w	r4, r4, r2
 800f4d0:	d908      	bls.n	800f4e4 <__udivmoddi4+0x260>
 800f4d2:	eb1c 0303 	adds.w	r3, ip, r3
 800f4d6:	f100 38ff 	add.w	r8, r0, #4294967295
 800f4da:	d22f      	bcs.n	800f53c <__udivmoddi4+0x2b8>
 800f4dc:	429e      	cmp	r6, r3
 800f4de:	d92d      	bls.n	800f53c <__udivmoddi4+0x2b8>
 800f4e0:	3802      	subs	r0, #2
 800f4e2:	4463      	add	r3, ip
 800f4e4:	1b9b      	subs	r3, r3, r6
 800f4e6:	b289      	uxth	r1, r1
 800f4e8:	fbb3 f6f7 	udiv	r6, r3, r7
 800f4ec:	fb07 3316 	mls	r3, r7, r6, r3
 800f4f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f4f4:	fb06 f30e 	mul.w	r3, r6, lr
 800f4f8:	428b      	cmp	r3, r1
 800f4fa:	d908      	bls.n	800f50e <__udivmoddi4+0x28a>
 800f4fc:	eb1c 0101 	adds.w	r1, ip, r1
 800f500:	f106 38ff 	add.w	r8, r6, #4294967295
 800f504:	d216      	bcs.n	800f534 <__udivmoddi4+0x2b0>
 800f506:	428b      	cmp	r3, r1
 800f508:	d914      	bls.n	800f534 <__udivmoddi4+0x2b0>
 800f50a:	3e02      	subs	r6, #2
 800f50c:	4461      	add	r1, ip
 800f50e:	1ac9      	subs	r1, r1, r3
 800f510:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800f514:	e738      	b.n	800f388 <__udivmoddi4+0x104>
 800f516:	462e      	mov	r6, r5
 800f518:	4628      	mov	r0, r5
 800f51a:	e705      	b.n	800f328 <__udivmoddi4+0xa4>
 800f51c:	4606      	mov	r6, r0
 800f51e:	e6e3      	b.n	800f2e8 <__udivmoddi4+0x64>
 800f520:	4618      	mov	r0, r3
 800f522:	e6f8      	b.n	800f316 <__udivmoddi4+0x92>
 800f524:	454b      	cmp	r3, r9
 800f526:	d2a9      	bcs.n	800f47c <__udivmoddi4+0x1f8>
 800f528:	ebb9 0802 	subs.w	r8, r9, r2
 800f52c:	eb64 0e0c 	sbc.w	lr, r4, ip
 800f530:	3801      	subs	r0, #1
 800f532:	e7a3      	b.n	800f47c <__udivmoddi4+0x1f8>
 800f534:	4646      	mov	r6, r8
 800f536:	e7ea      	b.n	800f50e <__udivmoddi4+0x28a>
 800f538:	4620      	mov	r0, r4
 800f53a:	e794      	b.n	800f466 <__udivmoddi4+0x1e2>
 800f53c:	4640      	mov	r0, r8
 800f53e:	e7d1      	b.n	800f4e4 <__udivmoddi4+0x260>
 800f540:	46d0      	mov	r8, sl
 800f542:	e77b      	b.n	800f43c <__udivmoddi4+0x1b8>
 800f544:	3b02      	subs	r3, #2
 800f546:	4461      	add	r1, ip
 800f548:	e732      	b.n	800f3b0 <__udivmoddi4+0x12c>
 800f54a:	4630      	mov	r0, r6
 800f54c:	e709      	b.n	800f362 <__udivmoddi4+0xde>
 800f54e:	4464      	add	r4, ip
 800f550:	3802      	subs	r0, #2
 800f552:	e742      	b.n	800f3da <__udivmoddi4+0x156>

0800f554 <__aeabi_idiv0>:
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop

0800f558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800f558:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800f55c:	f7f1 fed0 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f560:	480c      	ldr	r0, [pc, #48]	; (800f594 <LoopForever+0x6>)
  ldr r1, =_edata
 800f562:	490d      	ldr	r1, [pc, #52]	; (800f598 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f564:	4a0d      	ldr	r2, [pc, #52]	; (800f59c <LoopForever+0xe>)
  movs r3, #0
 800f566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f568:	e002      	b.n	800f570 <LoopCopyDataInit>

0800f56a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f56a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f56c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f56e:	3304      	adds	r3, #4

0800f570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f574:	d3f9      	bcc.n	800f56a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f576:	4a0a      	ldr	r2, [pc, #40]	; (800f5a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f578:	4c0a      	ldr	r4, [pc, #40]	; (800f5a4 <LoopForever+0x16>)
  movs r3, #0
 800f57a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f57c:	e001      	b.n	800f582 <LoopFillZerobss>

0800f57e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f57e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f580:	3204      	adds	r2, #4

0800f582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f584:	d3fb      	bcc.n	800f57e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f586:	f000 f811 	bl	800f5ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f58a:	f7f0 fff9 	bl	8000580 <main>

0800f58e <LoopForever>:

LoopForever:
    b LoopForever
 800f58e:	e7fe      	b.n	800f58e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800f590:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800f594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f598:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800f59c:	0800f6f4 	.word	0x0800f6f4
  ldr r2, =_sbss
 800f5a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800f5a4:	2000f840 	.word	0x2000f840

0800f5a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f5a8:	e7fe      	b.n	800f5a8 <ADC1_IRQHandler>
	...

0800f5ac <__libc_init_array>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	4d0d      	ldr	r5, [pc, #52]	; (800f5e4 <__libc_init_array+0x38>)
 800f5b0:	4c0d      	ldr	r4, [pc, #52]	; (800f5e8 <__libc_init_array+0x3c>)
 800f5b2:	1b64      	subs	r4, r4, r5
 800f5b4:	10a4      	asrs	r4, r4, #2
 800f5b6:	2600      	movs	r6, #0
 800f5b8:	42a6      	cmp	r6, r4
 800f5ba:	d109      	bne.n	800f5d0 <__libc_init_array+0x24>
 800f5bc:	4d0b      	ldr	r5, [pc, #44]	; (800f5ec <__libc_init_array+0x40>)
 800f5be:	4c0c      	ldr	r4, [pc, #48]	; (800f5f0 <__libc_init_array+0x44>)
 800f5c0:	f000 f820 	bl	800f604 <_init>
 800f5c4:	1b64      	subs	r4, r4, r5
 800f5c6:	10a4      	asrs	r4, r4, #2
 800f5c8:	2600      	movs	r6, #0
 800f5ca:	42a6      	cmp	r6, r4
 800f5cc:	d105      	bne.n	800f5da <__libc_init_array+0x2e>
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5d4:	4798      	blx	r3
 800f5d6:	3601      	adds	r6, #1
 800f5d8:	e7ee      	b.n	800f5b8 <__libc_init_array+0xc>
 800f5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5de:	4798      	blx	r3
 800f5e0:	3601      	adds	r6, #1
 800f5e2:	e7f2      	b.n	800f5ca <__libc_init_array+0x1e>
 800f5e4:	0800f6ec 	.word	0x0800f6ec
 800f5e8:	0800f6ec 	.word	0x0800f6ec
 800f5ec:	0800f6ec 	.word	0x0800f6ec
 800f5f0:	0800f6f0 	.word	0x0800f6f0

0800f5f4 <memset>:
 800f5f4:	4402      	add	r2, r0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d100      	bne.n	800f5fe <memset+0xa>
 800f5fc:	4770      	bx	lr
 800f5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f602:	e7f9      	b.n	800f5f8 <memset+0x4>

0800f604 <_init>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr

0800f610 <_fini>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr
